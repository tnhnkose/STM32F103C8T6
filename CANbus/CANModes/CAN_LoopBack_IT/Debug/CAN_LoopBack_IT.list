
CAN_LoopBack_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08002d20  08002d20  00012d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002db8  08002db8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002db8  08002db8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002db8  08002db8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002db8  08002db8  00012db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000070  08002e30  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002e30  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b04  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016d7  00000000  00000000  00028b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  0002a278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  0002aa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017288  00000000  00000000  0002b170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000885c  00000000  00000000  000423f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084c88  00000000  00000000  0004ac54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf8dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022e4  00000000  00000000  000cf92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d08 	.word	0x08002d08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002d08 	.word	0x08002d08

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb30 	bl	80007b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f820 	bl	8000198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f914 	bl	8000384 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f862 	bl	8000224 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f898 	bl	8000294 <MX_USART1_UART_Init>
  CAN_Filter_Config();
 8000164:	f000 f8e8 	bl	8000338 <CAN_Filter_Config>
 if( HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF) != HAL_OK )
 8000168:	f240 4103 	movw	r1, #1027	; 0x403
 800016c:	4809      	ldr	r0, [pc, #36]	; (8000194 <main+0x48>)
 800016e:	f000 ff7b 	bl	8001068 <HAL_CAN_ActivateNotification>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d001      	beq.n	800017c <main+0x30>
 {
	 Error_Handler();
 8000178:	f000 f97f 	bl	800047a <Error_Handler>
 }

  if(HAL_CAN_Start(&hcan) != HAL_OK)
 800017c:	4805      	ldr	r0, [pc, #20]	; (8000194 <main+0x48>)
 800017e:	f000 fd3f 	bl	8000c00 <HAL_CAN_Start>
 8000182:	4603      	mov	r3, r0
 8000184:	2b00      	cmp	r3, #0
 8000186:	d001      	beq.n	800018c <main+0x40>
  {
	  Error_Handler();
 8000188:	f000 f977 	bl	800047a <Error_Handler>
  }
  /* USER CODE BEGIN 2 */

  CAN1_Tx();
 800018c:	f000 f8ac 	bl	80002e8 <CAN1_Tx>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000190:	e7fe      	b.n	8000190 <main+0x44>
 8000192:	bf00      	nop
 8000194:	2000008c 	.word	0x2000008c

08000198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b090      	sub	sp, #64	; 0x40
 800019c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019e:	f107 0318 	add.w	r3, r7, #24
 80001a2:	2228      	movs	r2, #40	; 0x28
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f002 f92c 	bl	8002404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	605a      	str	r2, [r3, #4]
 80001b4:	609a      	str	r2, [r3, #8]
 80001b6:	60da      	str	r2, [r3, #12]
 80001b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ba:	2301      	movs	r3, #1
 80001bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c4:	2300      	movs	r3, #0
 80001c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c8:	2301      	movs	r3, #1
 80001ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001cc:	2302      	movs	r3, #2
 80001ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001dc:	f107 0318 	add.w	r3, r7, #24
 80001e0:	4618      	mov	r0, r3
 80001e2:	f001 fbf7 	bl	80019d4 <HAL_RCC_OscConfig>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001ec:	f000 f945 	bl	800047a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f0:	230f      	movs	r3, #15
 80001f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f4:	2302      	movs	r3, #2
 80001f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000200:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	2102      	movs	r1, #2
 800020a:	4618      	mov	r0, r3
 800020c:	f001 fe64 	bl	8001ed8 <HAL_RCC_ClockConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000216:	f000 f930 	bl	800047a <Error_Handler>
  }
}
 800021a:	bf00      	nop
 800021c:	3740      	adds	r7, #64	; 0x40
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
	...

08000224 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000228:	4b18      	ldr	r3, [pc, #96]	; (800028c <MX_CAN_Init+0x68>)
 800022a:	4a19      	ldr	r2, [pc, #100]	; (8000290 <MX_CAN_Init+0x6c>)
 800022c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 800022e:	4b17      	ldr	r3, [pc, #92]	; (800028c <MX_CAN_Init+0x68>)
 8000230:	2208      	movs	r2, #8
 8000232:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000234:	4b15      	ldr	r3, [pc, #84]	; (800028c <MX_CAN_Init+0x68>)
 8000236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800023a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800023c:	4b13      	ldr	r3, [pc, #76]	; (800028c <MX_CAN_Init+0x68>)
 800023e:	2200      	movs	r2, #0
 8000240:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000242:	4b12      	ldr	r3, [pc, #72]	; (800028c <MX_CAN_Init+0x68>)
 8000244:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000248:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800024a:	4b10      	ldr	r3, [pc, #64]	; (800028c <MX_CAN_Init+0x68>)
 800024c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000250:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000252:	4b0e      	ldr	r3, [pc, #56]	; (800028c <MX_CAN_Init+0x68>)
 8000254:	2200      	movs	r2, #0
 8000256:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <MX_CAN_Init+0x68>)
 800025a:	2200      	movs	r2, #0
 800025c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800025e:	4b0b      	ldr	r3, [pc, #44]	; (800028c <MX_CAN_Init+0x68>)
 8000260:	2200      	movs	r2, #0
 8000262:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <MX_CAN_Init+0x68>)
 8000266:	2201      	movs	r2, #1
 8000268:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800026a:	4b08      	ldr	r3, [pc, #32]	; (800028c <MX_CAN_Init+0x68>)
 800026c:	2200      	movs	r2, #0
 800026e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000270:	4b06      	ldr	r3, [pc, #24]	; (800028c <MX_CAN_Init+0x68>)
 8000272:	2200      	movs	r2, #0
 8000274:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000276:	4805      	ldr	r0, [pc, #20]	; (800028c <MX_CAN_Init+0x68>)
 8000278:	f000 fafe 	bl	8000878 <HAL_CAN_Init>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000282:	f000 f8fa 	bl	800047a <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000286:	bf00      	nop
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	2000008c 	.word	0x2000008c
 8000290:	40006400 	.word	0x40006400

08000294 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000298:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <MX_USART1_UART_Init+0x4c>)
 800029a:	4a12      	ldr	r2, [pc, #72]	; (80002e4 <MX_USART1_UART_Init+0x50>)
 800029c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800029e:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <MX_USART1_UART_Init+0x4c>)
 80002a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <MX_USART1_UART_Init+0x4c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002ac:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <MX_USART1_UART_Init+0x4c>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002b2:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <MX_USART1_UART_Init+0x4c>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002b8:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <MX_USART1_UART_Init+0x4c>)
 80002ba:	220c      	movs	r2, #12
 80002bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002be:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <MX_USART1_UART_Init+0x4c>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <MX_USART1_UART_Init+0x4c>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002ca:	4805      	ldr	r0, [pc, #20]	; (80002e0 <MX_USART1_UART_Init+0x4c>)
 80002cc:	f001 ff92 	bl	80021f4 <HAL_UART_Init>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002d6:	f000 f8d0 	bl	800047a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	200000b4 	.word	0x200000b4
 80002e4:	40013800 	.word	0x40013800

080002e8 <CAN1_Tx>:
  * @param None
  * @retval None
  */

void CAN1_Tx(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b08a      	sub	sp, #40	; 0x28
 80002ec:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;

	uint32_t TxMailbox;

	uint8_t ourMessage[5] = {'H','E','L','L','O'};
 80002ee:	4a10      	ldr	r2, [pc, #64]	; (8000330 <CAN1_Tx+0x48>)
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002f6:	6018      	str	r0, [r3, #0]
 80002f8:	3304      	adds	r3, #4
 80002fa:	7019      	strb	r1, [r3, #0]
	TxHeader.DLC = 5;
 80002fc:	2305      	movs	r3, #5
 80002fe:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x65D;
 8000300:	f240 635d 	movw	r3, #1629	; 0x65d
 8000304:	613b      	str	r3, [r7, #16]
	TxHeader.IDE = CAN_ID_STD;
 8000306:	2300      	movs	r3, #0
 8000308:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 800030a:	2300      	movs	r3, #0
 800030c:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_AddTxMessage(&hcan,&TxHeader,ourMessage,&TxMailbox) != HAL_OK)
 800030e:	f107 030c 	add.w	r3, r7, #12
 8000312:	1d3a      	adds	r2, r7, #4
 8000314:	f107 0110 	add.w	r1, r7, #16
 8000318:	4806      	ldr	r0, [pc, #24]	; (8000334 <CAN1_Tx+0x4c>)
 800031a:	f000 fcb5 	bl	8000c88 <HAL_CAN_AddTxMessage>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <CAN1_Tx+0x40>
	{
		Error_Handler();
 8000324:	f000 f8a9 	bl	800047a <Error_Handler>
	}



}
 8000328:	bf00      	nop
 800032a:	3728      	adds	r7, #40	; 0x28
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	08002d20 	.word	0x08002d20
 8000334:	2000008c 	.word	0x2000008c

08000338 <CAN_Filter_Config>:


}

void CAN_Filter_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b08a      	sub	sp, #40	; 0x28
 800033c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;

	can1_filter_init.FilterActivation = ENABLE;
 800033e:	2301      	movs	r3, #1
 8000340:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = 0;
 8000346:	2300      	movs	r3, #0
 8000348:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 800034a:	2300      	movs	r3, #0
 800034c:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 800034e:	2300      	movs	r3, #0
 8000350:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0x0000;
 8000352:	2300      	movs	r3, #0
 8000354:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 8000356:	2300      	movs	r3, #0
 8000358:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 800035a:	2300      	movs	r3, #0
 800035c:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 800035e:	2301      	movs	r3, #1
 8000360:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan,&can1_filter_init) != HAL_OK )
 8000362:	463b      	mov	r3, r7
 8000364:	4619      	mov	r1, r3
 8000366:	4806      	ldr	r0, [pc, #24]	; (8000380 <CAN_Filter_Config+0x48>)
 8000368:	f000 fb81 	bl	8000a6e <HAL_CAN_ConfigFilter>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <CAN_Filter_Config+0x3e>
	{
		Error_Handler();
 8000372:	f000 f882 	bl	800047a <Error_Handler>
	}


}
 8000376:	bf00      	nop
 8000378:	3728      	adds	r7, #40	; 0x28
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	2000008c 	.word	0x2000008c

08000384 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <MX_GPIO_Init+0x40>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	4a0d      	ldr	r2, [pc, #52]	; (80003c4 <MX_GPIO_Init+0x40>)
 8000390:	f043 0320 	orr.w	r3, r3, #32
 8000394:	6193      	str	r3, [r2, #24]
 8000396:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <MX_GPIO_Init+0x40>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f003 0320 	and.w	r3, r3, #32
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <MX_GPIO_Init+0x40>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <MX_GPIO_Init+0x40>)
 80003a8:	f043 0304 	orr.w	r3, r3, #4
 80003ac:	6193      	str	r3, [r2, #24]
 80003ae:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <MX_GPIO_Init+0x40>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	f003 0304 	and.w	r3, r3, #4
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]

}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	40021000 	.word	0x40021000

080003c8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b090      	sub	sp, #64	; 0x40
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg,"Message Transmitted\r\n");
 80003d0:	f107 030c 	add.w	r3, r7, #12
 80003d4:	4903      	ldr	r1, [pc, #12]	; (80003e4 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 80003d6:	4618      	mov	r0, r3
 80003d8:	f002 f81c 	bl	8002414 <siprintf>
}
 80003dc:	bf00      	nop
 80003de:	3740      	adds	r7, #64	; 0x40
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	08002d40 	.word	0x08002d40

080003e8 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b090      	sub	sp, #64	; 0x40
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg,"Message Transmitted\r\n");
 80003f0:	f107 030c 	add.w	r3, r7, #12
 80003f4:	4903      	ldr	r1, [pc, #12]	; (8000404 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 80003f6:	4618      	mov	r0, r3
 80003f8:	f002 f80c 	bl	8002414 <siprintf>
}
 80003fc:	bf00      	nop
 80003fe:	3740      	adds	r7, #64	; 0x40
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	08002d40 	.word	0x08002d40

08000408 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b090      	sub	sp, #64	; 0x40
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg,"Message Transmitted\r\n");
 8000410:	f107 030c 	add.w	r3, r7, #12
 8000414:	4903      	ldr	r1, [pc, #12]	; (8000424 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8000416:	4618      	mov	r0, r3
 8000418:	f001 fffc 	bl	8002414 <siprintf>
}
 800041c:	bf00      	nop
 800041e:	3740      	adds	r7, #64	; 0x40
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	08002d40 	.word	0x08002d40

08000428 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b098      	sub	sp, #96	; 0x60
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]

		char msg[50];



		if(HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, rcvdMsg) != HAL_OK )
 8000430:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000434:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000438:	1d38      	adds	r0, r7, #4
 800043a:	2100      	movs	r1, #0
 800043c:	f000 fcf3 	bl	8000e26 <HAL_CAN_GetRxMessage>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		{
			Error_Handler();
 8000446:	f000 f818 	bl	800047a <Error_Handler>
		}

	    sprintf(msg,"Message Received: %s\r\n",rcvdMsg);
 800044a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800044e:	f107 0308 	add.w	r3, r7, #8
 8000452:	4904      	ldr	r1, [pc, #16]	; (8000464 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000454:	4618      	mov	r0, r3
 8000456:	f001 ffdd 	bl	8002414 <siprintf>



}
 800045a:	bf00      	nop
 800045c:	3760      	adds	r7, #96	; 0x60
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	08002d28 	.word	0x08002d28

08000468 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]

}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr

0800047a <Error_Handler>:




void Error_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047e:	b672      	cpsid	i
}
 8000480:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000482:	e7fe      	b.n	8000482 <Error_Handler+0x8>

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800048a:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <HAL_MspInit+0x5c>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a14      	ldr	r2, [pc, #80]	; (80004e0 <HAL_MspInit+0x5c>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6193      	str	r3, [r2, #24]
 8000496:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <HAL_MspInit+0x5c>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <HAL_MspInit+0x5c>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	4a0e      	ldr	r2, [pc, #56]	; (80004e0 <HAL_MspInit+0x5c>)
 80004a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ac:	61d3      	str	r3, [r2, #28]
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <HAL_MspInit+0x5c>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ba:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <HAL_MspInit+0x60>)
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <HAL_MspInit+0x60>)
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40010000 	.word	0x40010000

080004e8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a2c      	ldr	r2, [pc, #176]	; (80005b4 <HAL_CAN_MspInit+0xcc>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d151      	bne.n	80005ac <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000508:	4b2b      	ldr	r3, [pc, #172]	; (80005b8 <HAL_CAN_MspInit+0xd0>)
 800050a:	69db      	ldr	r3, [r3, #28]
 800050c:	4a2a      	ldr	r2, [pc, #168]	; (80005b8 <HAL_CAN_MspInit+0xd0>)
 800050e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000512:	61d3      	str	r3, [r2, #28]
 8000514:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <HAL_CAN_MspInit+0xd0>)
 8000516:	69db      	ldr	r3, [r3, #28]
 8000518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000520:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <HAL_CAN_MspInit+0xd0>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a24      	ldr	r2, [pc, #144]	; (80005b8 <HAL_CAN_MspInit+0xd0>)
 8000526:	f043 0304 	orr.w	r3, r3, #4
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <HAL_CAN_MspInit+0xd0>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0304 	and.w	r3, r3, #4
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000538:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800053c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	4619      	mov	r1, r3
 800054c:	481b      	ldr	r0, [pc, #108]	; (80005bc <HAL_CAN_MspInit+0xd4>)
 800054e:	f001 f8bd 	bl	80016cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000556:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000558:	2302      	movs	r3, #2
 800055a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800055c:	2303      	movs	r3, #3
 800055e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	4619      	mov	r1, r3
 8000566:	4815      	ldr	r0, [pc, #84]	; (80005bc <HAL_CAN_MspInit+0xd4>)
 8000568:	f001 f8b0 	bl	80016cc <HAL_GPIO_Init>



    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15,0);
 800056c:	2200      	movs	r2, #0
 800056e:	210f      	movs	r1, #15
 8000570:	2013      	movs	r0, #19
 8000572:	f001 f874 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15,0);
 8000576:	2200      	movs	r2, #0
 8000578:	210f      	movs	r1, #15
 800057a:	2014      	movs	r0, #20
 800057c:	f001 f86f 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15,0);
 8000580:	2200      	movs	r2, #0
 8000582:	210f      	movs	r1, #15
 8000584:	2015      	movs	r0, #21
 8000586:	f001 f86a 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15,0);
 800058a:	2200      	movs	r2, #0
 800058c:	210f      	movs	r1, #15
 800058e:	2016      	movs	r0, #22
 8000590:	f001 f865 	bl	800165e <HAL_NVIC_SetPriority>

    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000594:	2013      	movs	r0, #19
 8000596:	f001 f87e 	bl	8001696 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800059a:	2014      	movs	r0, #20
 800059c:	f001 f87b 	bl	8001696 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80005a0:	2015      	movs	r0, #21
 80005a2:	f001 f878 	bl	8001696 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80005a6:	2016      	movs	r0, #22
 80005a8:	f001 f875 	bl	8001696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80005ac:	bf00      	nop
 80005ae:	3720      	adds	r7, #32
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40006400 	.word	0x40006400
 80005b8:	40021000 	.word	0x40021000
 80005bc:	40010800 	.word	0x40010800

080005c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a1c      	ldr	r2, [pc, #112]	; (800064c <HAL_UART_MspInit+0x8c>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d131      	bne.n	8000644 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <HAL_UART_MspInit+0x90>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a1a      	ldr	r2, [pc, #104]	; (8000650 <HAL_UART_MspInit+0x90>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <HAL_UART_MspInit+0x90>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <HAL_UART_MspInit+0x90>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a14      	ldr	r2, [pc, #80]	; (8000650 <HAL_UART_MspInit+0x90>)
 80005fe:	f043 0304 	orr.w	r3, r3, #4
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_UART_MspInit+0x90>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0304 	and.w	r3, r3, #4
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000614:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800061a:	2303      	movs	r3, #3
 800061c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061e:	f107 0310 	add.w	r3, r7, #16
 8000622:	4619      	mov	r1, r3
 8000624:	480b      	ldr	r0, [pc, #44]	; (8000654 <HAL_UART_MspInit+0x94>)
 8000626:	f001 f851 	bl	80016cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800062a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800062e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	4619      	mov	r1, r3
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <HAL_UART_MspInit+0x94>)
 8000640:	f001 f844 	bl	80016cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000644:	bf00      	nop
 8000646:	3720      	adds	r7, #32
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40013800 	.word	0x40013800
 8000650:	40021000 	.word	0x40021000
 8000654:	40010800 	.word	0x40010800

08000658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800065c:	e7fe      	b.n	800065c <NMI_Handler+0x4>

0800065e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <HardFault_Handler+0x4>

08000664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <MemManage_Handler+0x4>

0800066a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <BusFault_Handler+0x4>

08000670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <UsageFault_Handler+0x4>

08000676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr

08000682 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr

0800069a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069e:	f000 f8cf 	bl	8000840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <USB_HP_CAN1_TX_IRQHandler>:
/* USER CODE BEGIN 1 */

extern CAN_HandleTypeDef hcan;

void CAN1_TX_IRQHandler()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 80006ac:	4802      	ldr	r0, [pc, #8]	; (80006b8 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80006ae:	f000 fd00 	bl	80010b2 <HAL_CAN_IRQHandler>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000008c 	.word	0x2000008c

080006bc <USB_LP_CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 80006c0:	4802      	ldr	r0, [pc, #8]	; (80006cc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80006c2:	f000 fcf6 	bl	80010b2 <HAL_CAN_IRQHandler>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000008c 	.word	0x2000008c

080006d0 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 80006d4:	4802      	ldr	r0, [pc, #8]	; (80006e0 <CAN1_RX1_IRQHandler+0x10>)
 80006d6:	f000 fcec 	bl	80010b2 <HAL_CAN_IRQHandler>
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2000008c 	.word	0x2000008c

080006e4 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler()
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006f8:	4a14      	ldr	r2, [pc, #80]	; (800074c <_sbrk+0x5c>)
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <_sbrk+0x60>)
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000704:	4b13      	ldr	r3, [pc, #76]	; (8000754 <_sbrk+0x64>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d102      	bne.n	8000712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <_sbrk+0x64>)
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <_sbrk+0x68>)
 8000710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <_sbrk+0x64>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	429a      	cmp	r2, r3
 800071e:	d207      	bcs.n	8000730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000720:	f001 fe46 	bl	80023b0 <__errno>
 8000724:	4603      	mov	r3, r0
 8000726:	220c      	movs	r2, #12
 8000728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
 800072e:	e009      	b.n	8000744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <_sbrk+0x64>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000736:	4b07      	ldr	r3, [pc, #28]	; (8000754 <_sbrk+0x64>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	4a05      	ldr	r2, [pc, #20]	; (8000754 <_sbrk+0x64>)
 8000740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000742:	68fb      	ldr	r3, [r7, #12]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20005000 	.word	0x20005000
 8000750:	00000400 	.word	0x00000400
 8000754:	200000fc 	.word	0x200000fc
 8000758:	20000118 	.word	0x20000118

0800075c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000768:	f7ff fff8 	bl	800075c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800076c:	480b      	ldr	r0, [pc, #44]	; (800079c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800076e:	490c      	ldr	r1, [pc, #48]	; (80007a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000770:	4a0c      	ldr	r2, [pc, #48]	; (80007a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000774:	e002      	b.n	800077c <LoopCopyDataInit>

08000776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077a:	3304      	adds	r3, #4

0800077c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800077c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000780:	d3f9      	bcc.n	8000776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000782:	4a09      	ldr	r2, [pc, #36]	; (80007a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000784:	4c09      	ldr	r4, [pc, #36]	; (80007ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000788:	e001      	b.n	800078e <LoopFillZerobss>

0800078a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800078c:	3204      	adds	r2, #4

0800078e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000790:	d3fb      	bcc.n	800078a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000792:	f001 fe13 	bl	80023bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000796:	f7ff fcd9 	bl	800014c <main>
  bx lr
 800079a:	4770      	bx	lr
  ldr r0, =_sdata
 800079c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007a4:	08002dc0 	.word	0x08002dc0
  ldr r2, =_sbss
 80007a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007ac:	20000114 	.word	0x20000114

080007b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC1_2_IRQHandler>
	...

080007b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <HAL_Init+0x28>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a07      	ldr	r2, [pc, #28]	; (80007dc <HAL_Init+0x28>)
 80007be:	f043 0310 	orr.w	r3, r3, #16
 80007c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f000 ff3f 	bl	8001648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ca:	200f      	movs	r0, #15
 80007cc:	f000 f808 	bl	80007e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d0:	f7ff fe58 	bl	8000484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40022000 	.word	0x40022000

080007e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_InitTick+0x54>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <HAL_InitTick+0x58>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 ff57 	bl	80016b2 <HAL_SYSTICK_Config>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	e00e      	b.n	800082c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b0f      	cmp	r3, #15
 8000812:	d80a      	bhi.n	800082a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000814:	2200      	movs	r2, #0
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	f000 ff1f 	bl	800165e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000820:	4a06      	ldr	r2, [pc, #24]	; (800083c <HAL_InitTick+0x5c>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000826:	2300      	movs	r3, #0
 8000828:	e000      	b.n	800082c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
}
 800082c:	4618      	mov	r0, r3
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000000 	.word	0x20000000
 8000838:	20000008 	.word	0x20000008
 800083c:	20000004 	.word	0x20000004

08000840 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_IncTick+0x1c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_IncTick+0x20>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
 8000850:	4a03      	ldr	r2, [pc, #12]	; (8000860 <HAL_IncTick+0x20>)
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	20000008 	.word	0x20000008
 8000860:	20000100 	.word	0x20000100

08000864 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return uwTick;
 8000868:	4b02      	ldr	r3, [pc, #8]	; (8000874 <HAL_GetTick+0x10>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	4618      	mov	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	20000100 	.word	0x20000100

08000878 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d101      	bne.n	800088a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e0ed      	b.n	8000a66 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	2b00      	cmp	r3, #0
 8000894:	d102      	bne.n	800089c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff fe26 	bl	80004e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f042 0201 	orr.w	r2, r2, #1
 80008aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008ac:	f7ff ffda 	bl	8000864 <HAL_GetTick>
 80008b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008b2:	e012      	b.n	80008da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008b4:	f7ff ffd6 	bl	8000864 <HAL_GetTick>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	2b0a      	cmp	r3, #10
 80008c0:	d90b      	bls.n	80008da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2205      	movs	r2, #5
 80008d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e0c5      	b.n	8000a66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d0e5      	beq.n	80008b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f022 0202 	bic.w	r2, r2, #2
 80008f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008f8:	f7ff ffb4 	bl	8000864 <HAL_GetTick>
 80008fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008fe:	e012      	b.n	8000926 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000900:	f7ff ffb0 	bl	8000864 <HAL_GetTick>
 8000904:	4602      	mov	r2, r0
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	2b0a      	cmp	r3, #10
 800090c:	d90b      	bls.n	8000926 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000912:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2205      	movs	r2, #5
 800091e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e09f      	b.n	8000a66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	f003 0302 	and.w	r3, r3, #2
 8000930:	2b00      	cmp	r3, #0
 8000932:	d1e5      	bne.n	8000900 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	7e1b      	ldrb	r3, [r3, #24]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d108      	bne.n	800094e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	e007      	b.n	800095e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800095c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	7e5b      	ldrb	r3, [r3, #25]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d108      	bne.n	8000978 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	e007      	b.n	8000988 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000986:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	7e9b      	ldrb	r3, [r3, #26]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d108      	bne.n	80009a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f042 0220 	orr.w	r2, r2, #32
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	e007      	b.n	80009b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f022 0220 	bic.w	r2, r2, #32
 80009b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	7edb      	ldrb	r3, [r3, #27]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d108      	bne.n	80009cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f022 0210 	bic.w	r2, r2, #16
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	e007      	b.n	80009dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f042 0210 	orr.w	r2, r2, #16
 80009da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	7f1b      	ldrb	r3, [r3, #28]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d108      	bne.n	80009f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f042 0208 	orr.w	r2, r2, #8
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	e007      	b.n	8000a06 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f022 0208 	bic.w	r2, r2, #8
 8000a04:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	7f5b      	ldrb	r3, [r3, #29]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d108      	bne.n	8000a20 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f042 0204 	orr.w	r2, r2, #4
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	e007      	b.n	8000a30 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f022 0204 	bic.w	r2, r2, #4
 8000a2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	431a      	orrs	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	691b      	ldr	r3, [r3, #16]
 8000a3e:	431a      	orrs	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	ea42 0103 	orr.w	r1, r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	1e5a      	subs	r2, r3, #1
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	430a      	orrs	r2, r1
 8000a54:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b087      	sub	sp, #28
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
 8000a76:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a84:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000a86:	7cfb      	ldrb	r3, [r7, #19]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d003      	beq.n	8000a94 <HAL_CAN_ConfigFilter+0x26>
 8000a8c:	7cfb      	ldrb	r3, [r7, #19]
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	f040 80aa 	bne.w	8000be8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a9a:	f043 0201 	orr.w	r2, r3, #1
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	f003 031f 	and.w	r3, r3, #31
 8000aac:	2201      	movs	r2, #1
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	43db      	mvns	r3, r3
 8000abe:	401a      	ands	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d123      	bne.n	8000b16 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	401a      	ands	r2, r3
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000aec:	683a      	ldr	r2, [r7, #0]
 8000aee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000af0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3248      	adds	r2, #72	; 0x48
 8000af6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b0a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b0c:	6979      	ldr	r1, [r7, #20]
 8000b0e:	3348      	adds	r3, #72	; 0x48
 8000b10:	00db      	lsls	r3, r3, #3
 8000b12:	440b      	add	r3, r1
 8000b14:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d122      	bne.n	8000b64 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	431a      	orrs	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b3a:	683a      	ldr	r2, [r7, #0]
 8000b3c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b3e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	3248      	adds	r2, #72	; 0x48
 8000b44:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b58:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b5a:	6979      	ldr	r1, [r7, #20]
 8000b5c:	3348      	adds	r3, #72	; 0x48
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	440b      	add	r3, r1
 8000b62:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d109      	bne.n	8000b80 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	43db      	mvns	r3, r3
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000b7e:	e007      	b.n	8000b90 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	431a      	orrs	r2, r3
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	691b      	ldr	r3, [r3, #16]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d109      	bne.n	8000bac <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000baa:	e007      	b.n	8000bbc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	6a1b      	ldr	r3, [r3, #32]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d107      	bne.n	8000bd4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	431a      	orrs	r2, r3
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000bda:	f023 0201 	bic.w	r2, r3, #1
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	e006      	b.n	8000bf6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
  }
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	371c      	adds	r7, #28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d12e      	bne.n	8000c72 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2202      	movs	r2, #2
 8000c18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f022 0201 	bic.w	r2, r2, #1
 8000c2a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c2c:	f7ff fe1a 	bl	8000864 <HAL_GetTick>
 8000c30:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c32:	e012      	b.n	8000c5a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c34:	f7ff fe16 	bl	8000864 <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	2b0a      	cmp	r3, #10
 8000c40:	d90b      	bls.n	8000c5a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2205      	movs	r2, #5
 8000c52:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e012      	b.n	8000c80 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1e5      	bne.n	8000c34 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e006      	b.n	8000c80 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
  }
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c9c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ca6:	7ffb      	ldrb	r3, [r7, #31]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d003      	beq.n	8000cb4 <HAL_CAN_AddTxMessage+0x2c>
 8000cac:	7ffb      	ldrb	r3, [r7, #31]
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	f040 80ad 	bne.w	8000e0e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d10a      	bne.n	8000cd4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d105      	bne.n	8000cd4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f000 8095 	beq.w	8000dfe <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	0e1b      	lsrs	r3, r3, #24
 8000cd8:	f003 0303 	and.w	r3, r3, #3
 8000cdc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000cde:	2201      	movs	r2, #1
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	409a      	lsls	r2, r3
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d10d      	bne.n	8000d0c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000cfa:	68f9      	ldr	r1, [r7, #12]
 8000cfc:	6809      	ldr	r1, [r1, #0]
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	3318      	adds	r3, #24
 8000d04:	011b      	lsls	r3, r3, #4
 8000d06:	440b      	add	r3, r1
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	e00f      	b.n	8000d2c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d16:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d1c:	68f9      	ldr	r1, [r7, #12]
 8000d1e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000d20:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3318      	adds	r3, #24
 8000d26:	011b      	lsls	r3, r3, #4
 8000d28:	440b      	add	r3, r1
 8000d2a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	6819      	ldr	r1, [r3, #0]
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	691a      	ldr	r2, [r3, #16]
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	3318      	adds	r3, #24
 8000d38:	011b      	lsls	r3, r3, #4
 8000d3a:	440b      	add	r3, r1
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	7d1b      	ldrb	r3, [r3, #20]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d111      	bne.n	8000d6c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	3318      	adds	r3, #24
 8000d50:	011b      	lsls	r3, r3, #4
 8000d52:	4413      	add	r3, r2
 8000d54:	3304      	adds	r3, #4
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	6811      	ldr	r1, [r2, #0]
 8000d5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	3318      	adds	r3, #24
 8000d64:	011b      	lsls	r3, r3, #4
 8000d66:	440b      	add	r3, r1
 8000d68:	3304      	adds	r3, #4
 8000d6a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3307      	adds	r3, #7
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	061a      	lsls	r2, r3, #24
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3306      	adds	r3, #6
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	041b      	lsls	r3, r3, #16
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3305      	adds	r3, #5
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	021b      	lsls	r3, r3, #8
 8000d86:	4313      	orrs	r3, r2
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	3204      	adds	r2, #4
 8000d8c:	7812      	ldrb	r2, [r2, #0]
 8000d8e:	4610      	mov	r0, r2
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	6811      	ldr	r1, [r2, #0]
 8000d94:	ea43 0200 	orr.w	r2, r3, r0
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	440b      	add	r3, r1
 8000d9e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000da2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3303      	adds	r3, #3
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	061a      	lsls	r2, r3, #24
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3302      	adds	r3, #2
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	041b      	lsls	r3, r3, #16
 8000db4:	431a      	orrs	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3301      	adds	r3, #1
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	021b      	lsls	r3, r3, #8
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	7812      	ldrb	r2, [r2, #0]
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	6811      	ldr	r1, [r2, #0]
 8000dca:	ea43 0200 	orr.w	r2, r3, r0
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	011b      	lsls	r3, r3, #4
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000dd8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	3318      	adds	r3, #24
 8000de2:	011b      	lsls	r3, r3, #4
 8000de4:	4413      	add	r3, r2
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	6811      	ldr	r1, [r2, #0]
 8000dec:	f043 0201 	orr.w	r2, r3, #1
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3318      	adds	r3, #24
 8000df4:	011b      	lsls	r3, r3, #4
 8000df6:	440b      	add	r3, r1
 8000df8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e00e      	b.n	8000e1c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e006      	b.n	8000e1c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e12:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
  }
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3724      	adds	r7, #36	; 0x24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr

08000e26 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000e26:	b480      	push	{r7}
 8000e28:	b087      	sub	sp, #28
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	60f8      	str	r0, [r7, #12]
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e3a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e3c:	7dfb      	ldrb	r3, [r7, #23]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d003      	beq.n	8000e4a <HAL_CAN_GetRxMessage+0x24>
 8000e42:	7dfb      	ldrb	r3, [r7, #23]
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	f040 8103 	bne.w	8001050 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d10e      	bne.n	8000e6e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d116      	bne.n	8000e8c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e0f7      	b.n	800105e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	691b      	ldr	r3, [r3, #16]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d107      	bne.n	8000e8c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e0e8      	b.n	800105e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	331b      	adds	r3, #27
 8000e94:	011b      	lsls	r3, r3, #4
 8000e96:	4413      	add	r3, r2
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0204 	and.w	r2, r3, #4
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10c      	bne.n	8000ec4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	331b      	adds	r3, #27
 8000eb2:	011b      	lsls	r3, r3, #4
 8000eb4:	4413      	add	r3, r2
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	0d5b      	lsrs	r3, r3, #21
 8000eba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	e00b      	b.n	8000edc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	331b      	adds	r3, #27
 8000ecc:	011b      	lsls	r3, r3, #4
 8000ece:	4413      	add	r3, r2
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	08db      	lsrs	r3, r3, #3
 8000ed4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	331b      	adds	r3, #27
 8000ee4:	011b      	lsls	r3, r3, #4
 8000ee6:	4413      	add	r3, r2
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0202 	and.w	r2, r3, #2
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	331b      	adds	r3, #27
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	4413      	add	r3, r2
 8000efe:	3304      	adds	r3, #4
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	611a      	str	r2, [r3, #16]
 8000f10:	e00b      	b.n	8000f2a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	331b      	adds	r3, #27
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	4413      	add	r3, r2
 8000f1e:	3304      	adds	r3, #4
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 020f 	and.w	r2, r3, #15
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	331b      	adds	r3, #27
 8000f32:	011b      	lsls	r3, r3, #4
 8000f34:	4413      	add	r3, r2
 8000f36:	3304      	adds	r3, #4
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	0a1b      	lsrs	r3, r3, #8
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	331b      	adds	r3, #27
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3304      	adds	r3, #4
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	0c1b      	lsrs	r3, r3, #16
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	011b      	lsls	r3, r3, #4
 8000f62:	4413      	add	r3, r2
 8000f64:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	4413      	add	r3, r2
 8000f7a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	0a1a      	lsrs	r2, r3, #8
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	011b      	lsls	r3, r3, #4
 8000f92:	4413      	add	r3, r2
 8000f94:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	0c1a      	lsrs	r2, r3, #16
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	4413      	add	r3, r2
 8000fae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	0e1a      	lsrs	r2, r3, #24
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	3303      	adds	r3, #3
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	011b      	lsls	r3, r3, #4
 8000fc6:	4413      	add	r3, r2
 8000fc8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	4413      	add	r3, r2
 8000fe0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	0a1a      	lsrs	r2, r3, #8
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	3305      	adds	r3, #5
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	4413      	add	r3, r2
 8000ffa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	0c1a      	lsrs	r2, r3, #16
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	3306      	adds	r3, #6
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	4413      	add	r3, r2
 8001014:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	0e1a      	lsrs	r2, r3, #24
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	3307      	adds	r3, #7
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d108      	bne.n	800103c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68da      	ldr	r2, [r3, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f042 0220 	orr.w	r2, r2, #32
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	e007      	b.n	800104c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	691a      	ldr	r2, [r3, #16]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0220 	orr.w	r2, r2, #32
 800104a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	e006      	b.n	800105e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001054:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
  }
}
 800105e:	4618      	mov	r0, r3
 8001060:	371c      	adds	r7, #28
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001078:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d002      	beq.n	8001086 <HAL_CAN_ActivateNotification+0x1e>
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d109      	bne.n	800109a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6959      	ldr	r1, [r3, #20]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	430a      	orrs	r2, r1
 8001094:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e006      	b.n	80010a8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
  }
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b08a      	sub	sp, #40	; 0x28
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80010ee:	6a3b      	ldr	r3, [r7, #32]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d07c      	beq.n	80011f2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d023      	beq.n	800114a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2201      	movs	r2, #1
 8001108:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff f957 	bl	80003c8 <HAL_CAN_TxMailbox0CompleteCallback>
 800111a:	e016      	b.n	800114a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
 800112e:	e00c      	b.n	800114a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
 8001142:	e002      	b.n	800114a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 f96b 	bl	8001420 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001150:	2b00      	cmp	r3, #0
 8001152:	d024      	beq.n	800119e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800115c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff f93d 	bl	80003e8 <HAL_CAN_TxMailbox1CompleteCallback>
 800116e:	e016      	b.n	800119e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	2b00      	cmp	r3, #0
 8001178:	d004      	beq.n	8001184 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
 8001182:	e00c      	b.n	800119e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800118a:	2b00      	cmp	r3, #0
 800118c:	d004      	beq.n	8001198 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
 8001196:	e002      	b.n	800119e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 f94a 	bl	8001432 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d024      	beq.n	80011f2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff f923 	bl	8000408 <HAL_CAN_TxMailbox2CompleteCallback>
 80011c2:	e016      	b.n	80011f2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d004      	beq.n	80011d8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
 80011d6:	e00c      	b.n	80011f2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d004      	beq.n	80011ec <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
 80011ea:	e002      	b.n	80011f2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 f929 	bl	8001444 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	f003 0308 	and.w	r3, r3, #8
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00c      	beq.n	8001216 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f003 0310 	and.w	r3, r3, #16
 8001202:	2b00      	cmp	r3, #0
 8001204:	d007      	beq.n	8001216 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800120c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2210      	movs	r2, #16
 8001214:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00b      	beq.n	8001238 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	2b00      	cmp	r3, #0
 8001228:	d006      	beq.n	8001238 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2208      	movs	r2, #8
 8001230:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f90f 	bl	8001456 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001238:	6a3b      	ldr	r3, [r7, #32]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d009      	beq.n	8001256 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d002      	beq.n	8001256 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff f8e9 	bl	8000428 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00c      	beq.n	800127a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	f003 0310 	and.w	r3, r3, #16
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001270:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2210      	movs	r2, #16
 8001278:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	f003 0320 	and.w	r3, r3, #32
 8001280:	2b00      	cmp	r3, #0
 8001282:	d00b      	beq.n	800129c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	2b00      	cmp	r3, #0
 800128c:	d006      	beq.n	800129c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2208      	movs	r2, #8
 8001294:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 f8ef 	bl	800147a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800129c:	6a3b      	ldr	r3, [r7, #32]
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d009      	beq.n	80012ba <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f8d7 	bl	8001468 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d00b      	beq.n	80012dc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d006      	beq.n	80012dc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2210      	movs	r2, #16
 80012d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 f8d8 	bl	800148c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00b      	beq.n	80012fe <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2208      	movs	r2, #8
 80012f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f000 f8d0 	bl	800149e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80012fe:	6a3b      	ldr	r3, [r7, #32]
 8001300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d07b      	beq.n	8001400 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	2b00      	cmp	r3, #0
 8001310:	d072      	beq.n	80013f8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001318:	2b00      	cmp	r3, #0
 800131a:	d008      	beq.n	800132e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800132e:	6a3b      	ldr	r3, [r7, #32]
 8001330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001334:	2b00      	cmp	r3, #0
 8001336:	d008      	beq.n	800134a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800134a:	6a3b      	ldr	r3, [r7, #32]
 800134c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001350:	2b00      	cmp	r3, #0
 8001352:	d008      	beq.n	8001366 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800136c:	2b00      	cmp	r3, #0
 800136e:	d043      	beq.n	80013f8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001376:	2b00      	cmp	r3, #0
 8001378:	d03e      	beq.n	80013f8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001380:	2b60      	cmp	r3, #96	; 0x60
 8001382:	d02b      	beq.n	80013dc <HAL_CAN_IRQHandler+0x32a>
 8001384:	2b60      	cmp	r3, #96	; 0x60
 8001386:	d82e      	bhi.n	80013e6 <HAL_CAN_IRQHandler+0x334>
 8001388:	2b50      	cmp	r3, #80	; 0x50
 800138a:	d022      	beq.n	80013d2 <HAL_CAN_IRQHandler+0x320>
 800138c:	2b50      	cmp	r3, #80	; 0x50
 800138e:	d82a      	bhi.n	80013e6 <HAL_CAN_IRQHandler+0x334>
 8001390:	2b40      	cmp	r3, #64	; 0x40
 8001392:	d019      	beq.n	80013c8 <HAL_CAN_IRQHandler+0x316>
 8001394:	2b40      	cmp	r3, #64	; 0x40
 8001396:	d826      	bhi.n	80013e6 <HAL_CAN_IRQHandler+0x334>
 8001398:	2b30      	cmp	r3, #48	; 0x30
 800139a:	d010      	beq.n	80013be <HAL_CAN_IRQHandler+0x30c>
 800139c:	2b30      	cmp	r3, #48	; 0x30
 800139e:	d822      	bhi.n	80013e6 <HAL_CAN_IRQHandler+0x334>
 80013a0:	2b10      	cmp	r3, #16
 80013a2:	d002      	beq.n	80013aa <HAL_CAN_IRQHandler+0x2f8>
 80013a4:	2b20      	cmp	r3, #32
 80013a6:	d005      	beq.n	80013b4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80013a8:	e01d      	b.n	80013e6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	f043 0308 	orr.w	r3, r3, #8
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013b2:	e019      	b.n	80013e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	f043 0310 	orr.w	r3, r3, #16
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013bc:	e014      	b.n	80013e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	f043 0320 	orr.w	r3, r3, #32
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013c6:	e00f      	b.n	80013e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013d0:	e00a      	b.n	80013e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013da:	e005      	b.n	80013e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013e4:	e000      	b.n	80013e8 <HAL_CAN_IRQHandler+0x336>
            break;
 80013e6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	699a      	ldr	r2, [r3, #24]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80013f6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2204      	movs	r2, #4
 80013fe:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	2b00      	cmp	r3, #0
 8001404:	d008      	beq.n	8001418 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff f828 	bl	8000468 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001418:	bf00      	nop
 800141a:	3728      	adds	r7, #40	; 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr

0800147a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e2:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	60d3      	str	r3, [r2, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0b      	blt.n	800153e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 021f 	and.w	r2, r3, #31
 800152c:	4906      	ldr	r1, [pc, #24]	; (8001548 <__NVIC_EnableIRQ+0x34>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2001      	movs	r0, #1
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	e000e100 	.word	0xe000e100

0800154c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	2b00      	cmp	r3, #0
 800155e:	db0a      	blt.n	8001576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	490c      	ldr	r1, [pc, #48]	; (8001598 <__NVIC_SetPriority+0x4c>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	0112      	lsls	r2, r2, #4
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	440b      	add	r3, r1
 8001570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001574:	e00a      	b.n	800158c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4908      	ldr	r1, [pc, #32]	; (800159c <__NVIC_SetPriority+0x50>)
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	3b04      	subs	r3, #4
 8001584:	0112      	lsls	r2, r2, #4
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	440b      	add	r3, r1
 800158a:	761a      	strb	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000e100 	.word	0xe000e100
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	; 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f1c3 0307 	rsb	r3, r3, #7
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	bf28      	it	cs
 80015be:	2304      	movcs	r3, #4
 80015c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3304      	adds	r3, #4
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d902      	bls.n	80015d0 <NVIC_EncodePriority+0x30>
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3b03      	subs	r3, #3
 80015ce:	e000      	b.n	80015d2 <NVIC_EncodePriority+0x32>
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	401a      	ands	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	43d9      	mvns	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	4313      	orrs	r3, r2
         );
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3724      	adds	r7, #36	; 0x24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001614:	d301      	bcc.n	800161a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001616:	2301      	movs	r3, #1
 8001618:	e00f      	b.n	800163a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <SysTick_Config+0x40>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001622:	210f      	movs	r1, #15
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f7ff ff90 	bl	800154c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <SysTick_Config+0x40>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001632:	4b04      	ldr	r3, [pc, #16]	; (8001644 <SysTick_Config+0x40>)
 8001634:	2207      	movs	r2, #7
 8001636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	e000e010 	.word	0xe000e010

08001648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff2d 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001670:	f7ff ff42 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 8001674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	f7ff ff90 	bl	80015a0 <NVIC_EncodePriority>
 8001680:	4602      	mov	r2, r0
 8001682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff5f 	bl	800154c <__NVIC_SetPriority>
}
 800168e:	bf00      	nop
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff35 	bl	8001514 <__NVIC_EnableIRQ>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffa2 	bl	8001604 <SysTick_Config>
 80016c0:	4603      	mov	r3, r0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b08b      	sub	sp, #44	; 0x2c
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016de:	e169      	b.n	80019b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016e0:	2201      	movs	r2, #1
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	f040 8158 	bne.w	80019ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4a9a      	ldr	r2, [pc, #616]	; (800196c <HAL_GPIO_Init+0x2a0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d05e      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
 8001708:	4a98      	ldr	r2, [pc, #608]	; (800196c <HAL_GPIO_Init+0x2a0>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d875      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 800170e:	4a98      	ldr	r2, [pc, #608]	; (8001970 <HAL_GPIO_Init+0x2a4>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d058      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
 8001714:	4a96      	ldr	r2, [pc, #600]	; (8001970 <HAL_GPIO_Init+0x2a4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d86f      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 800171a:	4a96      	ldr	r2, [pc, #600]	; (8001974 <HAL_GPIO_Init+0x2a8>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d052      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
 8001720:	4a94      	ldr	r2, [pc, #592]	; (8001974 <HAL_GPIO_Init+0x2a8>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d869      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 8001726:	4a94      	ldr	r2, [pc, #592]	; (8001978 <HAL_GPIO_Init+0x2ac>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d04c      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
 800172c:	4a92      	ldr	r2, [pc, #584]	; (8001978 <HAL_GPIO_Init+0x2ac>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d863      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 8001732:	4a92      	ldr	r2, [pc, #584]	; (800197c <HAL_GPIO_Init+0x2b0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d046      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
 8001738:	4a90      	ldr	r2, [pc, #576]	; (800197c <HAL_GPIO_Init+0x2b0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d85d      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 800173e:	2b12      	cmp	r3, #18
 8001740:	d82a      	bhi.n	8001798 <HAL_GPIO_Init+0xcc>
 8001742:	2b12      	cmp	r3, #18
 8001744:	d859      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 8001746:	a201      	add	r2, pc, #4	; (adr r2, 800174c <HAL_GPIO_Init+0x80>)
 8001748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174c:	080017c7 	.word	0x080017c7
 8001750:	080017a1 	.word	0x080017a1
 8001754:	080017b3 	.word	0x080017b3
 8001758:	080017f5 	.word	0x080017f5
 800175c:	080017fb 	.word	0x080017fb
 8001760:	080017fb 	.word	0x080017fb
 8001764:	080017fb 	.word	0x080017fb
 8001768:	080017fb 	.word	0x080017fb
 800176c:	080017fb 	.word	0x080017fb
 8001770:	080017fb 	.word	0x080017fb
 8001774:	080017fb 	.word	0x080017fb
 8001778:	080017fb 	.word	0x080017fb
 800177c:	080017fb 	.word	0x080017fb
 8001780:	080017fb 	.word	0x080017fb
 8001784:	080017fb 	.word	0x080017fb
 8001788:	080017fb 	.word	0x080017fb
 800178c:	080017fb 	.word	0x080017fb
 8001790:	080017a9 	.word	0x080017a9
 8001794:	080017bd 	.word	0x080017bd
 8001798:	4a79      	ldr	r2, [pc, #484]	; (8001980 <HAL_GPIO_Init+0x2b4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d013      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800179e:	e02c      	b.n	80017fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	623b      	str	r3, [r7, #32]
          break;
 80017a6:	e029      	b.n	80017fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	3304      	adds	r3, #4
 80017ae:	623b      	str	r3, [r7, #32]
          break;
 80017b0:	e024      	b.n	80017fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	3308      	adds	r3, #8
 80017b8:	623b      	str	r3, [r7, #32]
          break;
 80017ba:	e01f      	b.n	80017fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	330c      	adds	r3, #12
 80017c2:	623b      	str	r3, [r7, #32]
          break;
 80017c4:	e01a      	b.n	80017fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d102      	bne.n	80017d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ce:	2304      	movs	r3, #4
 80017d0:	623b      	str	r3, [r7, #32]
          break;
 80017d2:	e013      	b.n	80017fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d105      	bne.n	80017e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017dc:	2308      	movs	r3, #8
 80017de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	611a      	str	r2, [r3, #16]
          break;
 80017e6:	e009      	b.n	80017fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017e8:	2308      	movs	r3, #8
 80017ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	615a      	str	r2, [r3, #20]
          break;
 80017f2:	e003      	b.n	80017fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017f4:	2300      	movs	r3, #0
 80017f6:	623b      	str	r3, [r7, #32]
          break;
 80017f8:	e000      	b.n	80017fc <HAL_GPIO_Init+0x130>
          break;
 80017fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2bff      	cmp	r3, #255	; 0xff
 8001800:	d801      	bhi.n	8001806 <HAL_GPIO_Init+0x13a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	e001      	b.n	800180a <HAL_GPIO_Init+0x13e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3304      	adds	r3, #4
 800180a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2bff      	cmp	r3, #255	; 0xff
 8001810:	d802      	bhi.n	8001818 <HAL_GPIO_Init+0x14c>
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	e002      	b.n	800181e <HAL_GPIO_Init+0x152>
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	3b08      	subs	r3, #8
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	210f      	movs	r1, #15
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	401a      	ands	r2, r3
 8001830:	6a39      	ldr	r1, [r7, #32]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	431a      	orrs	r2, r3
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 80b1 	beq.w	80019ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800184c:	4b4d      	ldr	r3, [pc, #308]	; (8001984 <HAL_GPIO_Init+0x2b8>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a4c      	ldr	r2, [pc, #304]	; (8001984 <HAL_GPIO_Init+0x2b8>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6193      	str	r3, [r2, #24]
 8001858:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <HAL_GPIO_Init+0x2b8>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001864:	4a48      	ldr	r2, [pc, #288]	; (8001988 <HAL_GPIO_Init+0x2bc>)
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	089b      	lsrs	r3, r3, #2
 800186a:	3302      	adds	r3, #2
 800186c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001870:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	220f      	movs	r2, #15
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4013      	ands	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a40      	ldr	r2, [pc, #256]	; (800198c <HAL_GPIO_Init+0x2c0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d013      	beq.n	80018b8 <HAL_GPIO_Init+0x1ec>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a3f      	ldr	r2, [pc, #252]	; (8001990 <HAL_GPIO_Init+0x2c4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d00d      	beq.n	80018b4 <HAL_GPIO_Init+0x1e8>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a3e      	ldr	r2, [pc, #248]	; (8001994 <HAL_GPIO_Init+0x2c8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d007      	beq.n	80018b0 <HAL_GPIO_Init+0x1e4>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a3d      	ldr	r2, [pc, #244]	; (8001998 <HAL_GPIO_Init+0x2cc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d101      	bne.n	80018ac <HAL_GPIO_Init+0x1e0>
 80018a8:	2303      	movs	r3, #3
 80018aa:	e006      	b.n	80018ba <HAL_GPIO_Init+0x1ee>
 80018ac:	2304      	movs	r3, #4
 80018ae:	e004      	b.n	80018ba <HAL_GPIO_Init+0x1ee>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e002      	b.n	80018ba <HAL_GPIO_Init+0x1ee>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <HAL_GPIO_Init+0x1ee>
 80018b8:	2300      	movs	r3, #0
 80018ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018bc:	f002 0203 	and.w	r2, r2, #3
 80018c0:	0092      	lsls	r2, r2, #2
 80018c2:	4093      	lsls	r3, r2
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ca:	492f      	ldr	r1, [pc, #188]	; (8001988 <HAL_GPIO_Init+0x2bc>)
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	3302      	adds	r3, #2
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d006      	beq.n	80018f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018e4:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_GPIO_Init+0x2d0>)
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	492c      	ldr	r1, [pc, #176]	; (800199c <HAL_GPIO_Init+0x2d0>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	608b      	str	r3, [r1, #8]
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018f2:	4b2a      	ldr	r3, [pc, #168]	; (800199c <HAL_GPIO_Init+0x2d0>)
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	4928      	ldr	r1, [pc, #160]	; (800199c <HAL_GPIO_Init+0x2d0>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d006      	beq.n	800191a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800190c:	4b23      	ldr	r3, [pc, #140]	; (800199c <HAL_GPIO_Init+0x2d0>)
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	4922      	ldr	r1, [pc, #136]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	60cb      	str	r3, [r1, #12]
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800191a:	4b20      	ldr	r3, [pc, #128]	; (800199c <HAL_GPIO_Init+0x2d0>)
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	43db      	mvns	r3, r3
 8001922:	491e      	ldr	r1, [pc, #120]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001924:	4013      	ands	r3, r2
 8001926:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	4918      	ldr	r1, [pc, #96]	; (800199c <HAL_GPIO_Init+0x2d0>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	43db      	mvns	r3, r3
 800194a:	4914      	ldr	r1, [pc, #80]	; (800199c <HAL_GPIO_Init+0x2d0>)
 800194c:	4013      	ands	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d021      	beq.n	80019a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <HAL_GPIO_Init+0x2d0>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	490e      	ldr	r1, [pc, #56]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	600b      	str	r3, [r1, #0]
 8001968:	e021      	b.n	80019ae <HAL_GPIO_Init+0x2e2>
 800196a:	bf00      	nop
 800196c:	10320000 	.word	0x10320000
 8001970:	10310000 	.word	0x10310000
 8001974:	10220000 	.word	0x10220000
 8001978:	10210000 	.word	0x10210000
 800197c:	10120000 	.word	0x10120000
 8001980:	10110000 	.word	0x10110000
 8001984:	40021000 	.word	0x40021000
 8001988:	40010000 	.word	0x40010000
 800198c:	40010800 	.word	0x40010800
 8001990:	40010c00 	.word	0x40010c00
 8001994:	40011000 	.word	0x40011000
 8001998:	40011400 	.word	0x40011400
 800199c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_GPIO_Init+0x304>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	4909      	ldr	r1, [pc, #36]	; (80019d0 <HAL_GPIO_Init+0x304>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	3301      	adds	r3, #1
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	fa22 f303 	lsr.w	r3, r2, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f47f ae8e 	bne.w	80016e0 <HAL_GPIO_Init+0x14>
  }
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	372c      	adds	r7, #44	; 0x2c
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	40010400 	.word	0x40010400

080019d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e272      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8087 	beq.w	8001b02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019f4:	4b92      	ldr	r3, [pc, #584]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d00c      	beq.n	8001a1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a00:	4b8f      	ldr	r3, [pc, #572]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d112      	bne.n	8001a32 <HAL_RCC_OscConfig+0x5e>
 8001a0c:	4b8c      	ldr	r3, [pc, #560]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a18:	d10b      	bne.n	8001a32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1a:	4b89      	ldr	r3, [pc, #548]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d06c      	beq.n	8001b00 <HAL_RCC_OscConfig+0x12c>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d168      	bne.n	8001b00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e24c      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3a:	d106      	bne.n	8001a4a <HAL_RCC_OscConfig+0x76>
 8001a3c:	4b80      	ldr	r3, [pc, #512]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a7f      	ldr	r2, [pc, #508]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	e02e      	b.n	8001aa8 <HAL_RCC_OscConfig+0xd4>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x98>
 8001a52:	4b7b      	ldr	r3, [pc, #492]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a7a      	ldr	r2, [pc, #488]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b78      	ldr	r3, [pc, #480]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a77      	ldr	r2, [pc, #476]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e01d      	b.n	8001aa8 <HAL_RCC_OscConfig+0xd4>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a74:	d10c      	bne.n	8001a90 <HAL_RCC_OscConfig+0xbc>
 8001a76:	4b72      	ldr	r3, [pc, #456]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a71      	ldr	r2, [pc, #452]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4b6f      	ldr	r3, [pc, #444]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a6e      	ldr	r2, [pc, #440]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e00b      	b.n	8001aa8 <HAL_RCC_OscConfig+0xd4>
 8001a90:	4b6b      	ldr	r3, [pc, #428]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a6a      	ldr	r2, [pc, #424]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	4b68      	ldr	r3, [pc, #416]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a67      	ldr	r2, [pc, #412]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d013      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7fe fed8 	bl	8000864 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab8:	f7fe fed4 	bl	8000864 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	; 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e200      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	4b5d      	ldr	r3, [pc, #372]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0xe4>
 8001ad6:	e014      	b.n	8001b02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7fe fec4 	bl	8000864 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7fe fec0 	bl	8000864 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e1ec      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af2:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x10c>
 8001afe:	e000      	b.n	8001b02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d063      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b0e:	4b4c      	ldr	r3, [pc, #304]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00b      	beq.n	8001b32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b1a:	4b49      	ldr	r3, [pc, #292]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d11c      	bne.n	8001b60 <HAL_RCC_OscConfig+0x18c>
 8001b26:	4b46      	ldr	r3, [pc, #280]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d116      	bne.n	8001b60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b32:	4b43      	ldr	r3, [pc, #268]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_RCC_OscConfig+0x176>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d001      	beq.n	8001b4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e1c0      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	4939      	ldr	r1, [pc, #228]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5e:	e03a      	b.n	8001bd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d020      	beq.n	8001baa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b68:	4b36      	ldr	r3, [pc, #216]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6e:	f7fe fe79 	bl	8000864 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b76:	f7fe fe75 	bl	8000864 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e1a1      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b88:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f0      	beq.n	8001b76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b94:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4927      	ldr	r1, [pc, #156]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]
 8001ba8:	e015      	b.n	8001bd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001baa:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7fe fe58 	bl	8000864 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb8:	f7fe fe54 	bl	8000864 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e180      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bca:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d03a      	beq.n	8001c58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d019      	beq.n	8001c1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bea:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf0:	f7fe fe38 	bl	8000864 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf8:	f7fe fe34 	bl	8000864 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e160      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c16:	2001      	movs	r0, #1
 8001c18:	f000 face 	bl	80021b8 <RCC_Delay>
 8001c1c:	e01c      	b.n	8001c58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c24:	f7fe fe1e 	bl	8000864 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2a:	e00f      	b.n	8001c4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2c:	f7fe fe1a 	bl	8000864 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d908      	bls.n	8001c4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e146      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	42420000 	.word	0x42420000
 8001c48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c4c:	4b92      	ldr	r3, [pc, #584]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1e9      	bne.n	8001c2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 80a6 	beq.w	8001db2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c66:	2300      	movs	r3, #0
 8001c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6a:	4b8b      	ldr	r3, [pc, #556]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10d      	bne.n	8001c92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	4b88      	ldr	r3, [pc, #544]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	4a87      	ldr	r2, [pc, #540]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c80:	61d3      	str	r3, [r2, #28]
 8001c82:	4b85      	ldr	r3, [pc, #532]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c92:	4b82      	ldr	r3, [pc, #520]	; (8001e9c <HAL_RCC_OscConfig+0x4c8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d118      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c9e:	4b7f      	ldr	r3, [pc, #508]	; (8001e9c <HAL_RCC_OscConfig+0x4c8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a7e      	ldr	r2, [pc, #504]	; (8001e9c <HAL_RCC_OscConfig+0x4c8>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001caa:	f7fe fddb 	bl	8000864 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb2:	f7fe fdd7 	bl	8000864 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b64      	cmp	r3, #100	; 0x64
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e103      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc4:	4b75      	ldr	r3, [pc, #468]	; (8001e9c <HAL_RCC_OscConfig+0x4c8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x312>
 8001cd8:	4b6f      	ldr	r3, [pc, #444]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4a6e      	ldr	r2, [pc, #440]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6213      	str	r3, [r2, #32]
 8001ce4:	e02d      	b.n	8001d42 <HAL_RCC_OscConfig+0x36e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x334>
 8001cee:	4b6a      	ldr	r3, [pc, #424]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4a69      	ldr	r2, [pc, #420]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	6213      	str	r3, [r2, #32]
 8001cfa:	4b67      	ldr	r3, [pc, #412]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a66      	ldr	r2, [pc, #408]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	f023 0304 	bic.w	r3, r3, #4
 8001d04:	6213      	str	r3, [r2, #32]
 8001d06:	e01c      	b.n	8001d42 <HAL_RCC_OscConfig+0x36e>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b05      	cmp	r3, #5
 8001d0e:	d10c      	bne.n	8001d2a <HAL_RCC_OscConfig+0x356>
 8001d10:	4b61      	ldr	r3, [pc, #388]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4a60      	ldr	r2, [pc, #384]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	6213      	str	r3, [r2, #32]
 8001d1c:	4b5e      	ldr	r3, [pc, #376]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4a5d      	ldr	r2, [pc, #372]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6213      	str	r3, [r2, #32]
 8001d28:	e00b      	b.n	8001d42 <HAL_RCC_OscConfig+0x36e>
 8001d2a:	4b5b      	ldr	r3, [pc, #364]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	4a5a      	ldr	r2, [pc, #360]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	f023 0301 	bic.w	r3, r3, #1
 8001d34:	6213      	str	r3, [r2, #32]
 8001d36:	4b58      	ldr	r3, [pc, #352]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	4a57      	ldr	r2, [pc, #348]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	f023 0304 	bic.w	r3, r3, #4
 8001d40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d015      	beq.n	8001d76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4a:	f7fe fd8b 	bl	8000864 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7fe fd87 	bl	8000864 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e0b1      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d68:	4b4b      	ldr	r3, [pc, #300]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0ee      	beq.n	8001d52 <HAL_RCC_OscConfig+0x37e>
 8001d74:	e014      	b.n	8001da0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d76:	f7fe fd75 	bl	8000864 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7e:	f7fe fd71 	bl	8000864 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e09b      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d94:	4b40      	ldr	r3, [pc, #256]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1ee      	bne.n	8001d7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001da0:	7dfb      	ldrb	r3, [r7, #23]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d105      	bne.n	8001db2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da6:	4b3c      	ldr	r3, [pc, #240]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	4a3b      	ldr	r2, [pc, #236]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001db0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8087 	beq.w	8001eca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dbc:	4b36      	ldr	r3, [pc, #216]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d061      	beq.n	8001e8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d146      	bne.n	8001e5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd0:	4b33      	ldr	r3, [pc, #204]	; (8001ea0 <HAL_RCC_OscConfig+0x4cc>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7fe fd45 	bl	8000864 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dde:	f7fe fd41 	bl	8000864 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e06d      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df0:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1f0      	bne.n	8001dde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e04:	d108      	bne.n	8001e18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e06:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	4921      	ldr	r1, [pc, #132]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e18:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a19      	ldr	r1, [r3, #32]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	491b      	ldr	r1, [pc, #108]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e30:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <HAL_RCC_OscConfig+0x4cc>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7fe fd15 	bl	8000864 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7fe fd11 	bl	8000864 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e03d      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x46a>
 8001e5c:	e035      	b.n	8001eca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <HAL_RCC_OscConfig+0x4cc>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7fe fcfe 	bl	8000864 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7fe fcfa 	bl	8000864 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e026      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x498>
 8001e8a:	e01e      	b.n	8001eca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d107      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e019      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_RCC_OscConfig+0x500>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d001      	beq.n	8001eca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000

08001ed8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0d0      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eec:	4b6a      	ldr	r3, [pc, #424]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d910      	bls.n	8001f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b67      	ldr	r3, [pc, #412]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 0207 	bic.w	r2, r3, #7
 8001f02:	4965      	ldr	r1, [pc, #404]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	4b63      	ldr	r3, [pc, #396]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0b8      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d020      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f34:	4b59      	ldr	r3, [pc, #356]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4a58      	ldr	r2, [pc, #352]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f4c:	4b53      	ldr	r3, [pc, #332]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	4a52      	ldr	r2, [pc, #328]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f58:	4b50      	ldr	r3, [pc, #320]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	494d      	ldr	r1, [pc, #308]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d040      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d107      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	4b47      	ldr	r3, [pc, #284]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d115      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e07f      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d107      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f96:	4b41      	ldr	r3, [pc, #260]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e073      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa6:	4b3d      	ldr	r3, [pc, #244]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e06b      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb6:	4b39      	ldr	r3, [pc, #228]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f023 0203 	bic.w	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4936      	ldr	r1, [pc, #216]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc8:	f7fe fc4c 	bl	8000864 <HAL_GetTick>
 8001fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fce:	e00a      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd0:	f7fe fc48 	bl	8000864 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e053      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe6:	4b2d      	ldr	r3, [pc, #180]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 020c 	and.w	r2, r3, #12
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d1eb      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff8:	4b27      	ldr	r3, [pc, #156]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d210      	bcs.n	8002028 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002006:	4b24      	ldr	r3, [pc, #144]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 0207 	bic.w	r2, r3, #7
 800200e:	4922      	ldr	r1, [pc, #136]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002016:	4b20      	ldr	r3, [pc, #128]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d001      	beq.n	8002028 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e032      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002034:	4b19      	ldr	r3, [pc, #100]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4916      	ldr	r1, [pc, #88]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	4313      	orrs	r3, r2
 8002044:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d009      	beq.n	8002066 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002052:	4b12      	ldr	r3, [pc, #72]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	490e      	ldr	r1, [pc, #56]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002066:	f000 f821 	bl	80020ac <HAL_RCC_GetSysClockFreq>
 800206a:	4602      	mov	r2, r0
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	490a      	ldr	r1, [pc, #40]	; (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002078:	5ccb      	ldrb	r3, [r1, r3]
 800207a:	fa22 f303 	lsr.w	r3, r2, r3
 800207e:	4a09      	ldr	r2, [pc, #36]	; (80020a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fbaa 	bl	80007e0 <HAL_InitTick>

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40022000 	.word	0x40022000
 800209c:	40021000 	.word	0x40021000
 80020a0:	08002d58 	.word	0x08002d58
 80020a4:	20000000 	.word	0x20000000
 80020a8:	20000004 	.word	0x20000004

080020ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020c6:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <HAL_RCC_GetSysClockFreq+0x94>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d002      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0x30>
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d003      	beq.n	80020e2 <HAL_RCC_GetSysClockFreq+0x36>
 80020da:	e027      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_RCC_GetSysClockFreq+0x98>)
 80020de:	613b      	str	r3, [r7, #16]
      break;
 80020e0:	e027      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	0c9b      	lsrs	r3, r3, #18
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	4a17      	ldr	r2, [pc, #92]	; (8002148 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020ec:	5cd3      	ldrb	r3, [r2, r3]
 80020ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d010      	beq.n	800211c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <HAL_RCC_GetSysClockFreq+0x94>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	0c5b      	lsrs	r3, r3, #17
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	4a11      	ldr	r2, [pc, #68]	; (800214c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002106:	5cd3      	ldrb	r3, [r2, r3]
 8002108:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a0d      	ldr	r2, [pc, #52]	; (8002144 <HAL_RCC_GetSysClockFreq+0x98>)
 800210e:	fb03 f202 	mul.w	r2, r3, r2
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	fbb2 f3f3 	udiv	r3, r2, r3
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	e004      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a0c      	ldr	r2, [pc, #48]	; (8002150 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002120:	fb02 f303 	mul.w	r3, r2, r3
 8002124:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	613b      	str	r3, [r7, #16]
      break;
 800212a:	e002      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_RCC_GetSysClockFreq+0x98>)
 800212e:	613b      	str	r3, [r7, #16]
      break;
 8002130:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002132:	693b      	ldr	r3, [r7, #16]
}
 8002134:	4618      	mov	r0, r3
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	007a1200 	.word	0x007a1200
 8002148:	08002d70 	.word	0x08002d70
 800214c:	08002d80 	.word	0x08002d80
 8002150:	003d0900 	.word	0x003d0900

08002154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002158:	4b02      	ldr	r3, [pc, #8]	; (8002164 <HAL_RCC_GetHCLKFreq+0x10>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	20000000 	.word	0x20000000

08002168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800216c:	f7ff fff2 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	0a1b      	lsrs	r3, r3, #8
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4903      	ldr	r1, [pc, #12]	; (800218c <HAL_RCC_GetPCLK1Freq+0x24>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000
 800218c:	08002d68 	.word	0x08002d68

08002190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002194:	f7ff ffde 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 8002198:	4602      	mov	r2, r0
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	0adb      	lsrs	r3, r3, #11
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	4903      	ldr	r1, [pc, #12]	; (80021b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000
 80021b4:	08002d68 	.word	0x08002d68

080021b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021c0:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <RCC_Delay+0x34>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <RCC_Delay+0x38>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	0a5b      	lsrs	r3, r3, #9
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	fb02 f303 	mul.w	r3, r2, r3
 80021d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021d4:	bf00      	nop
  }
  while (Delay --);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1e5a      	subs	r2, r3, #1
 80021da:	60fa      	str	r2, [r7, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f9      	bne.n	80021d4 <RCC_Delay+0x1c>
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	20000000 	.word	0x20000000
 80021f0:	10624dd3 	.word	0x10624dd3

080021f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e042      	b.n	800228c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d106      	bne.n	8002220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7fe f9d0 	bl	80005c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2224      	movs	r2, #36	; 0x24
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f82b 	bl	8002294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800224c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695a      	ldr	r2, [r3, #20]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800225c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800226c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022ce:	f023 030c 	bic.w	r3, r3, #12
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	430b      	orrs	r3, r1
 80022da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699a      	ldr	r2, [r3, #24]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a2c      	ldr	r2, [pc, #176]	; (80023a8 <UART_SetConfig+0x114>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d103      	bne.n	8002304 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022fc:	f7ff ff48 	bl	8002190 <HAL_RCC_GetPCLK2Freq>
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	e002      	b.n	800230a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002304:	f7ff ff30 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 8002308:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	009a      	lsls	r2, r3, #2
 8002314:	441a      	add	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002320:	4a22      	ldr	r2, [pc, #136]	; (80023ac <UART_SetConfig+0x118>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	0119      	lsls	r1, r3, #4
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	009a      	lsls	r2, r3, #2
 8002334:	441a      	add	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002340:	4b1a      	ldr	r3, [pc, #104]	; (80023ac <UART_SetConfig+0x118>)
 8002342:	fba3 0302 	umull	r0, r3, r3, r2
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	2064      	movs	r0, #100	; 0x64
 800234a:	fb00 f303 	mul.w	r3, r0, r3
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	3332      	adds	r3, #50	; 0x32
 8002354:	4a15      	ldr	r2, [pc, #84]	; (80023ac <UART_SetConfig+0x118>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002360:	4419      	add	r1, r3
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	009a      	lsls	r2, r3, #2
 800236c:	441a      	add	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	fbb2 f2f3 	udiv	r2, r2, r3
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <UART_SetConfig+0x118>)
 800237a:	fba3 0302 	umull	r0, r3, r3, r2
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2064      	movs	r0, #100	; 0x64
 8002382:	fb00 f303 	mul.w	r3, r0, r3
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	3332      	adds	r3, #50	; 0x32
 800238c:	4a07      	ldr	r2, [pc, #28]	; (80023ac <UART_SetConfig+0x118>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	f003 020f 	and.w	r2, r3, #15
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	440a      	add	r2, r1
 800239e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40013800 	.word	0x40013800
 80023ac:	51eb851f 	.word	0x51eb851f

080023b0 <__errno>:
 80023b0:	4b01      	ldr	r3, [pc, #4]	; (80023b8 <__errno+0x8>)
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	2000000c 	.word	0x2000000c

080023bc <__libc_init_array>:
 80023bc:	b570      	push	{r4, r5, r6, lr}
 80023be:	2600      	movs	r6, #0
 80023c0:	4d0c      	ldr	r5, [pc, #48]	; (80023f4 <__libc_init_array+0x38>)
 80023c2:	4c0d      	ldr	r4, [pc, #52]	; (80023f8 <__libc_init_array+0x3c>)
 80023c4:	1b64      	subs	r4, r4, r5
 80023c6:	10a4      	asrs	r4, r4, #2
 80023c8:	42a6      	cmp	r6, r4
 80023ca:	d109      	bne.n	80023e0 <__libc_init_array+0x24>
 80023cc:	f000 fc9c 	bl	8002d08 <_init>
 80023d0:	2600      	movs	r6, #0
 80023d2:	4d0a      	ldr	r5, [pc, #40]	; (80023fc <__libc_init_array+0x40>)
 80023d4:	4c0a      	ldr	r4, [pc, #40]	; (8002400 <__libc_init_array+0x44>)
 80023d6:	1b64      	subs	r4, r4, r5
 80023d8:	10a4      	asrs	r4, r4, #2
 80023da:	42a6      	cmp	r6, r4
 80023dc:	d105      	bne.n	80023ea <__libc_init_array+0x2e>
 80023de:	bd70      	pop	{r4, r5, r6, pc}
 80023e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80023e4:	4798      	blx	r3
 80023e6:	3601      	adds	r6, #1
 80023e8:	e7ee      	b.n	80023c8 <__libc_init_array+0xc>
 80023ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80023ee:	4798      	blx	r3
 80023f0:	3601      	adds	r6, #1
 80023f2:	e7f2      	b.n	80023da <__libc_init_array+0x1e>
 80023f4:	08002db8 	.word	0x08002db8
 80023f8:	08002db8 	.word	0x08002db8
 80023fc:	08002db8 	.word	0x08002db8
 8002400:	08002dbc 	.word	0x08002dbc

08002404 <memset>:
 8002404:	4603      	mov	r3, r0
 8002406:	4402      	add	r2, r0
 8002408:	4293      	cmp	r3, r2
 800240a:	d100      	bne.n	800240e <memset+0xa>
 800240c:	4770      	bx	lr
 800240e:	f803 1b01 	strb.w	r1, [r3], #1
 8002412:	e7f9      	b.n	8002408 <memset+0x4>

08002414 <siprintf>:
 8002414:	b40e      	push	{r1, r2, r3}
 8002416:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800241a:	b500      	push	{lr}
 800241c:	b09c      	sub	sp, #112	; 0x70
 800241e:	ab1d      	add	r3, sp, #116	; 0x74
 8002420:	9002      	str	r0, [sp, #8]
 8002422:	9006      	str	r0, [sp, #24]
 8002424:	9107      	str	r1, [sp, #28]
 8002426:	9104      	str	r1, [sp, #16]
 8002428:	4808      	ldr	r0, [pc, #32]	; (800244c <siprintf+0x38>)
 800242a:	4909      	ldr	r1, [pc, #36]	; (8002450 <siprintf+0x3c>)
 800242c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002430:	9105      	str	r1, [sp, #20]
 8002432:	6800      	ldr	r0, [r0, #0]
 8002434:	a902      	add	r1, sp, #8
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	f000 f868 	bl	800250c <_svfiprintf_r>
 800243c:	2200      	movs	r2, #0
 800243e:	9b02      	ldr	r3, [sp, #8]
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	b01c      	add	sp, #112	; 0x70
 8002444:	f85d eb04 	ldr.w	lr, [sp], #4
 8002448:	b003      	add	sp, #12
 800244a:	4770      	bx	lr
 800244c:	2000000c 	.word	0x2000000c
 8002450:	ffff0208 	.word	0xffff0208

08002454 <__ssputs_r>:
 8002454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002458:	688e      	ldr	r6, [r1, #8]
 800245a:	4682      	mov	sl, r0
 800245c:	429e      	cmp	r6, r3
 800245e:	460c      	mov	r4, r1
 8002460:	4690      	mov	r8, r2
 8002462:	461f      	mov	r7, r3
 8002464:	d838      	bhi.n	80024d8 <__ssputs_r+0x84>
 8002466:	898a      	ldrh	r2, [r1, #12]
 8002468:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800246c:	d032      	beq.n	80024d4 <__ssputs_r+0x80>
 800246e:	6825      	ldr	r5, [r4, #0]
 8002470:	6909      	ldr	r1, [r1, #16]
 8002472:	3301      	adds	r3, #1
 8002474:	eba5 0901 	sub.w	r9, r5, r1
 8002478:	6965      	ldr	r5, [r4, #20]
 800247a:	444b      	add	r3, r9
 800247c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002480:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002484:	106d      	asrs	r5, r5, #1
 8002486:	429d      	cmp	r5, r3
 8002488:	bf38      	it	cc
 800248a:	461d      	movcc	r5, r3
 800248c:	0553      	lsls	r3, r2, #21
 800248e:	d531      	bpl.n	80024f4 <__ssputs_r+0xa0>
 8002490:	4629      	mov	r1, r5
 8002492:	f000 fb6f 	bl	8002b74 <_malloc_r>
 8002496:	4606      	mov	r6, r0
 8002498:	b950      	cbnz	r0, 80024b0 <__ssputs_r+0x5c>
 800249a:	230c      	movs	r3, #12
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	f8ca 3000 	str.w	r3, [sl]
 80024a4:	89a3      	ldrh	r3, [r4, #12]
 80024a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024aa:	81a3      	strh	r3, [r4, #12]
 80024ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024b0:	464a      	mov	r2, r9
 80024b2:	6921      	ldr	r1, [r4, #16]
 80024b4:	f000 face 	bl	8002a54 <memcpy>
 80024b8:	89a3      	ldrh	r3, [r4, #12]
 80024ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80024be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c2:	81a3      	strh	r3, [r4, #12]
 80024c4:	6126      	str	r6, [r4, #16]
 80024c6:	444e      	add	r6, r9
 80024c8:	6026      	str	r6, [r4, #0]
 80024ca:	463e      	mov	r6, r7
 80024cc:	6165      	str	r5, [r4, #20]
 80024ce:	eba5 0509 	sub.w	r5, r5, r9
 80024d2:	60a5      	str	r5, [r4, #8]
 80024d4:	42be      	cmp	r6, r7
 80024d6:	d900      	bls.n	80024da <__ssputs_r+0x86>
 80024d8:	463e      	mov	r6, r7
 80024da:	4632      	mov	r2, r6
 80024dc:	4641      	mov	r1, r8
 80024de:	6820      	ldr	r0, [r4, #0]
 80024e0:	f000 fac6 	bl	8002a70 <memmove>
 80024e4:	68a3      	ldr	r3, [r4, #8]
 80024e6:	2000      	movs	r0, #0
 80024e8:	1b9b      	subs	r3, r3, r6
 80024ea:	60a3      	str	r3, [r4, #8]
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	4433      	add	r3, r6
 80024f0:	6023      	str	r3, [r4, #0]
 80024f2:	e7db      	b.n	80024ac <__ssputs_r+0x58>
 80024f4:	462a      	mov	r2, r5
 80024f6:	f000 fbb1 	bl	8002c5c <_realloc_r>
 80024fa:	4606      	mov	r6, r0
 80024fc:	2800      	cmp	r0, #0
 80024fe:	d1e1      	bne.n	80024c4 <__ssputs_r+0x70>
 8002500:	4650      	mov	r0, sl
 8002502:	6921      	ldr	r1, [r4, #16]
 8002504:	f000 face 	bl	8002aa4 <_free_r>
 8002508:	e7c7      	b.n	800249a <__ssputs_r+0x46>
	...

0800250c <_svfiprintf_r>:
 800250c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002510:	4698      	mov	r8, r3
 8002512:	898b      	ldrh	r3, [r1, #12]
 8002514:	4607      	mov	r7, r0
 8002516:	061b      	lsls	r3, r3, #24
 8002518:	460d      	mov	r5, r1
 800251a:	4614      	mov	r4, r2
 800251c:	b09d      	sub	sp, #116	; 0x74
 800251e:	d50e      	bpl.n	800253e <_svfiprintf_r+0x32>
 8002520:	690b      	ldr	r3, [r1, #16]
 8002522:	b963      	cbnz	r3, 800253e <_svfiprintf_r+0x32>
 8002524:	2140      	movs	r1, #64	; 0x40
 8002526:	f000 fb25 	bl	8002b74 <_malloc_r>
 800252a:	6028      	str	r0, [r5, #0]
 800252c:	6128      	str	r0, [r5, #16]
 800252e:	b920      	cbnz	r0, 800253a <_svfiprintf_r+0x2e>
 8002530:	230c      	movs	r3, #12
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	f04f 30ff 	mov.w	r0, #4294967295
 8002538:	e0d1      	b.n	80026de <_svfiprintf_r+0x1d2>
 800253a:	2340      	movs	r3, #64	; 0x40
 800253c:	616b      	str	r3, [r5, #20]
 800253e:	2300      	movs	r3, #0
 8002540:	9309      	str	r3, [sp, #36]	; 0x24
 8002542:	2320      	movs	r3, #32
 8002544:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002548:	2330      	movs	r3, #48	; 0x30
 800254a:	f04f 0901 	mov.w	r9, #1
 800254e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002552:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80026f8 <_svfiprintf_r+0x1ec>
 8002556:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800255a:	4623      	mov	r3, r4
 800255c:	469a      	mov	sl, r3
 800255e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002562:	b10a      	cbz	r2, 8002568 <_svfiprintf_r+0x5c>
 8002564:	2a25      	cmp	r2, #37	; 0x25
 8002566:	d1f9      	bne.n	800255c <_svfiprintf_r+0x50>
 8002568:	ebba 0b04 	subs.w	fp, sl, r4
 800256c:	d00b      	beq.n	8002586 <_svfiprintf_r+0x7a>
 800256e:	465b      	mov	r3, fp
 8002570:	4622      	mov	r2, r4
 8002572:	4629      	mov	r1, r5
 8002574:	4638      	mov	r0, r7
 8002576:	f7ff ff6d 	bl	8002454 <__ssputs_r>
 800257a:	3001      	adds	r0, #1
 800257c:	f000 80aa 	beq.w	80026d4 <_svfiprintf_r+0x1c8>
 8002580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002582:	445a      	add	r2, fp
 8002584:	9209      	str	r2, [sp, #36]	; 0x24
 8002586:	f89a 3000 	ldrb.w	r3, [sl]
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 80a2 	beq.w	80026d4 <_svfiprintf_r+0x1c8>
 8002590:	2300      	movs	r3, #0
 8002592:	f04f 32ff 	mov.w	r2, #4294967295
 8002596:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800259a:	f10a 0a01 	add.w	sl, sl, #1
 800259e:	9304      	str	r3, [sp, #16]
 80025a0:	9307      	str	r3, [sp, #28]
 80025a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025a6:	931a      	str	r3, [sp, #104]	; 0x68
 80025a8:	4654      	mov	r4, sl
 80025aa:	2205      	movs	r2, #5
 80025ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025b0:	4851      	ldr	r0, [pc, #324]	; (80026f8 <_svfiprintf_r+0x1ec>)
 80025b2:	f000 fa41 	bl	8002a38 <memchr>
 80025b6:	9a04      	ldr	r2, [sp, #16]
 80025b8:	b9d8      	cbnz	r0, 80025f2 <_svfiprintf_r+0xe6>
 80025ba:	06d0      	lsls	r0, r2, #27
 80025bc:	bf44      	itt	mi
 80025be:	2320      	movmi	r3, #32
 80025c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025c4:	0711      	lsls	r1, r2, #28
 80025c6:	bf44      	itt	mi
 80025c8:	232b      	movmi	r3, #43	; 0x2b
 80025ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025ce:	f89a 3000 	ldrb.w	r3, [sl]
 80025d2:	2b2a      	cmp	r3, #42	; 0x2a
 80025d4:	d015      	beq.n	8002602 <_svfiprintf_r+0xf6>
 80025d6:	4654      	mov	r4, sl
 80025d8:	2000      	movs	r0, #0
 80025da:	f04f 0c0a 	mov.w	ip, #10
 80025de:	9a07      	ldr	r2, [sp, #28]
 80025e0:	4621      	mov	r1, r4
 80025e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025e6:	3b30      	subs	r3, #48	; 0x30
 80025e8:	2b09      	cmp	r3, #9
 80025ea:	d94e      	bls.n	800268a <_svfiprintf_r+0x17e>
 80025ec:	b1b0      	cbz	r0, 800261c <_svfiprintf_r+0x110>
 80025ee:	9207      	str	r2, [sp, #28]
 80025f0:	e014      	b.n	800261c <_svfiprintf_r+0x110>
 80025f2:	eba0 0308 	sub.w	r3, r0, r8
 80025f6:	fa09 f303 	lsl.w	r3, r9, r3
 80025fa:	4313      	orrs	r3, r2
 80025fc:	46a2      	mov	sl, r4
 80025fe:	9304      	str	r3, [sp, #16]
 8002600:	e7d2      	b.n	80025a8 <_svfiprintf_r+0x9c>
 8002602:	9b03      	ldr	r3, [sp, #12]
 8002604:	1d19      	adds	r1, r3, #4
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	9103      	str	r1, [sp, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	bfbb      	ittet	lt
 800260e:	425b      	neglt	r3, r3
 8002610:	f042 0202 	orrlt.w	r2, r2, #2
 8002614:	9307      	strge	r3, [sp, #28]
 8002616:	9307      	strlt	r3, [sp, #28]
 8002618:	bfb8      	it	lt
 800261a:	9204      	strlt	r2, [sp, #16]
 800261c:	7823      	ldrb	r3, [r4, #0]
 800261e:	2b2e      	cmp	r3, #46	; 0x2e
 8002620:	d10c      	bne.n	800263c <_svfiprintf_r+0x130>
 8002622:	7863      	ldrb	r3, [r4, #1]
 8002624:	2b2a      	cmp	r3, #42	; 0x2a
 8002626:	d135      	bne.n	8002694 <_svfiprintf_r+0x188>
 8002628:	9b03      	ldr	r3, [sp, #12]
 800262a:	3402      	adds	r4, #2
 800262c:	1d1a      	adds	r2, r3, #4
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	9203      	str	r2, [sp, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	bfb8      	it	lt
 8002636:	f04f 33ff 	movlt.w	r3, #4294967295
 800263a:	9305      	str	r3, [sp, #20]
 800263c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80026fc <_svfiprintf_r+0x1f0>
 8002640:	2203      	movs	r2, #3
 8002642:	4650      	mov	r0, sl
 8002644:	7821      	ldrb	r1, [r4, #0]
 8002646:	f000 f9f7 	bl	8002a38 <memchr>
 800264a:	b140      	cbz	r0, 800265e <_svfiprintf_r+0x152>
 800264c:	2340      	movs	r3, #64	; 0x40
 800264e:	eba0 000a 	sub.w	r0, r0, sl
 8002652:	fa03 f000 	lsl.w	r0, r3, r0
 8002656:	9b04      	ldr	r3, [sp, #16]
 8002658:	3401      	adds	r4, #1
 800265a:	4303      	orrs	r3, r0
 800265c:	9304      	str	r3, [sp, #16]
 800265e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002662:	2206      	movs	r2, #6
 8002664:	4826      	ldr	r0, [pc, #152]	; (8002700 <_svfiprintf_r+0x1f4>)
 8002666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800266a:	f000 f9e5 	bl	8002a38 <memchr>
 800266e:	2800      	cmp	r0, #0
 8002670:	d038      	beq.n	80026e4 <_svfiprintf_r+0x1d8>
 8002672:	4b24      	ldr	r3, [pc, #144]	; (8002704 <_svfiprintf_r+0x1f8>)
 8002674:	bb1b      	cbnz	r3, 80026be <_svfiprintf_r+0x1b2>
 8002676:	9b03      	ldr	r3, [sp, #12]
 8002678:	3307      	adds	r3, #7
 800267a:	f023 0307 	bic.w	r3, r3, #7
 800267e:	3308      	adds	r3, #8
 8002680:	9303      	str	r3, [sp, #12]
 8002682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002684:	4433      	add	r3, r6
 8002686:	9309      	str	r3, [sp, #36]	; 0x24
 8002688:	e767      	b.n	800255a <_svfiprintf_r+0x4e>
 800268a:	460c      	mov	r4, r1
 800268c:	2001      	movs	r0, #1
 800268e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002692:	e7a5      	b.n	80025e0 <_svfiprintf_r+0xd4>
 8002694:	2300      	movs	r3, #0
 8002696:	f04f 0c0a 	mov.w	ip, #10
 800269a:	4619      	mov	r1, r3
 800269c:	3401      	adds	r4, #1
 800269e:	9305      	str	r3, [sp, #20]
 80026a0:	4620      	mov	r0, r4
 80026a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026a6:	3a30      	subs	r2, #48	; 0x30
 80026a8:	2a09      	cmp	r2, #9
 80026aa:	d903      	bls.n	80026b4 <_svfiprintf_r+0x1a8>
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0c5      	beq.n	800263c <_svfiprintf_r+0x130>
 80026b0:	9105      	str	r1, [sp, #20]
 80026b2:	e7c3      	b.n	800263c <_svfiprintf_r+0x130>
 80026b4:	4604      	mov	r4, r0
 80026b6:	2301      	movs	r3, #1
 80026b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80026bc:	e7f0      	b.n	80026a0 <_svfiprintf_r+0x194>
 80026be:	ab03      	add	r3, sp, #12
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	462a      	mov	r2, r5
 80026c4:	4638      	mov	r0, r7
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <_svfiprintf_r+0x1fc>)
 80026c8:	a904      	add	r1, sp, #16
 80026ca:	f3af 8000 	nop.w
 80026ce:	1c42      	adds	r2, r0, #1
 80026d0:	4606      	mov	r6, r0
 80026d2:	d1d6      	bne.n	8002682 <_svfiprintf_r+0x176>
 80026d4:	89ab      	ldrh	r3, [r5, #12]
 80026d6:	065b      	lsls	r3, r3, #25
 80026d8:	f53f af2c 	bmi.w	8002534 <_svfiprintf_r+0x28>
 80026dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026de:	b01d      	add	sp, #116	; 0x74
 80026e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026e4:	ab03      	add	r3, sp, #12
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	462a      	mov	r2, r5
 80026ea:	4638      	mov	r0, r7
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <_svfiprintf_r+0x1fc>)
 80026ee:	a904      	add	r1, sp, #16
 80026f0:	f000 f87c 	bl	80027ec <_printf_i>
 80026f4:	e7eb      	b.n	80026ce <_svfiprintf_r+0x1c2>
 80026f6:	bf00      	nop
 80026f8:	08002d82 	.word	0x08002d82
 80026fc:	08002d88 	.word	0x08002d88
 8002700:	08002d8c 	.word	0x08002d8c
 8002704:	00000000 	.word	0x00000000
 8002708:	08002455 	.word	0x08002455

0800270c <_printf_common>:
 800270c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002710:	4616      	mov	r6, r2
 8002712:	4699      	mov	r9, r3
 8002714:	688a      	ldr	r2, [r1, #8]
 8002716:	690b      	ldr	r3, [r1, #16]
 8002718:	4607      	mov	r7, r0
 800271a:	4293      	cmp	r3, r2
 800271c:	bfb8      	it	lt
 800271e:	4613      	movlt	r3, r2
 8002720:	6033      	str	r3, [r6, #0]
 8002722:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002726:	460c      	mov	r4, r1
 8002728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800272c:	b10a      	cbz	r2, 8002732 <_printf_common+0x26>
 800272e:	3301      	adds	r3, #1
 8002730:	6033      	str	r3, [r6, #0]
 8002732:	6823      	ldr	r3, [r4, #0]
 8002734:	0699      	lsls	r1, r3, #26
 8002736:	bf42      	ittt	mi
 8002738:	6833      	ldrmi	r3, [r6, #0]
 800273a:	3302      	addmi	r3, #2
 800273c:	6033      	strmi	r3, [r6, #0]
 800273e:	6825      	ldr	r5, [r4, #0]
 8002740:	f015 0506 	ands.w	r5, r5, #6
 8002744:	d106      	bne.n	8002754 <_printf_common+0x48>
 8002746:	f104 0a19 	add.w	sl, r4, #25
 800274a:	68e3      	ldr	r3, [r4, #12]
 800274c:	6832      	ldr	r2, [r6, #0]
 800274e:	1a9b      	subs	r3, r3, r2
 8002750:	42ab      	cmp	r3, r5
 8002752:	dc28      	bgt.n	80027a6 <_printf_common+0x9a>
 8002754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002758:	1e13      	subs	r3, r2, #0
 800275a:	6822      	ldr	r2, [r4, #0]
 800275c:	bf18      	it	ne
 800275e:	2301      	movne	r3, #1
 8002760:	0692      	lsls	r2, r2, #26
 8002762:	d42d      	bmi.n	80027c0 <_printf_common+0xb4>
 8002764:	4649      	mov	r1, r9
 8002766:	4638      	mov	r0, r7
 8002768:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800276c:	47c0      	blx	r8
 800276e:	3001      	adds	r0, #1
 8002770:	d020      	beq.n	80027b4 <_printf_common+0xa8>
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	68e5      	ldr	r5, [r4, #12]
 8002776:	f003 0306 	and.w	r3, r3, #6
 800277a:	2b04      	cmp	r3, #4
 800277c:	bf18      	it	ne
 800277e:	2500      	movne	r5, #0
 8002780:	6832      	ldr	r2, [r6, #0]
 8002782:	f04f 0600 	mov.w	r6, #0
 8002786:	68a3      	ldr	r3, [r4, #8]
 8002788:	bf08      	it	eq
 800278a:	1aad      	subeq	r5, r5, r2
 800278c:	6922      	ldr	r2, [r4, #16]
 800278e:	bf08      	it	eq
 8002790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002794:	4293      	cmp	r3, r2
 8002796:	bfc4      	itt	gt
 8002798:	1a9b      	subgt	r3, r3, r2
 800279a:	18ed      	addgt	r5, r5, r3
 800279c:	341a      	adds	r4, #26
 800279e:	42b5      	cmp	r5, r6
 80027a0:	d11a      	bne.n	80027d8 <_printf_common+0xcc>
 80027a2:	2000      	movs	r0, #0
 80027a4:	e008      	b.n	80027b8 <_printf_common+0xac>
 80027a6:	2301      	movs	r3, #1
 80027a8:	4652      	mov	r2, sl
 80027aa:	4649      	mov	r1, r9
 80027ac:	4638      	mov	r0, r7
 80027ae:	47c0      	blx	r8
 80027b0:	3001      	adds	r0, #1
 80027b2:	d103      	bne.n	80027bc <_printf_common+0xb0>
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295
 80027b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027bc:	3501      	adds	r5, #1
 80027be:	e7c4      	b.n	800274a <_printf_common+0x3e>
 80027c0:	2030      	movs	r0, #48	; 0x30
 80027c2:	18e1      	adds	r1, r4, r3
 80027c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80027ce:	4422      	add	r2, r4
 80027d0:	3302      	adds	r3, #2
 80027d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80027d6:	e7c5      	b.n	8002764 <_printf_common+0x58>
 80027d8:	2301      	movs	r3, #1
 80027da:	4622      	mov	r2, r4
 80027dc:	4649      	mov	r1, r9
 80027de:	4638      	mov	r0, r7
 80027e0:	47c0      	blx	r8
 80027e2:	3001      	adds	r0, #1
 80027e4:	d0e6      	beq.n	80027b4 <_printf_common+0xa8>
 80027e6:	3601      	adds	r6, #1
 80027e8:	e7d9      	b.n	800279e <_printf_common+0x92>
	...

080027ec <_printf_i>:
 80027ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027f0:	7e0f      	ldrb	r7, [r1, #24]
 80027f2:	4691      	mov	r9, r2
 80027f4:	2f78      	cmp	r7, #120	; 0x78
 80027f6:	4680      	mov	r8, r0
 80027f8:	460c      	mov	r4, r1
 80027fa:	469a      	mov	sl, r3
 80027fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80027fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002802:	d807      	bhi.n	8002814 <_printf_i+0x28>
 8002804:	2f62      	cmp	r7, #98	; 0x62
 8002806:	d80a      	bhi.n	800281e <_printf_i+0x32>
 8002808:	2f00      	cmp	r7, #0
 800280a:	f000 80d9 	beq.w	80029c0 <_printf_i+0x1d4>
 800280e:	2f58      	cmp	r7, #88	; 0x58
 8002810:	f000 80a4 	beq.w	800295c <_printf_i+0x170>
 8002814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002818:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800281c:	e03a      	b.n	8002894 <_printf_i+0xa8>
 800281e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002822:	2b15      	cmp	r3, #21
 8002824:	d8f6      	bhi.n	8002814 <_printf_i+0x28>
 8002826:	a101      	add	r1, pc, #4	; (adr r1, 800282c <_printf_i+0x40>)
 8002828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800282c:	08002885 	.word	0x08002885
 8002830:	08002899 	.word	0x08002899
 8002834:	08002815 	.word	0x08002815
 8002838:	08002815 	.word	0x08002815
 800283c:	08002815 	.word	0x08002815
 8002840:	08002815 	.word	0x08002815
 8002844:	08002899 	.word	0x08002899
 8002848:	08002815 	.word	0x08002815
 800284c:	08002815 	.word	0x08002815
 8002850:	08002815 	.word	0x08002815
 8002854:	08002815 	.word	0x08002815
 8002858:	080029a7 	.word	0x080029a7
 800285c:	080028c9 	.word	0x080028c9
 8002860:	08002989 	.word	0x08002989
 8002864:	08002815 	.word	0x08002815
 8002868:	08002815 	.word	0x08002815
 800286c:	080029c9 	.word	0x080029c9
 8002870:	08002815 	.word	0x08002815
 8002874:	080028c9 	.word	0x080028c9
 8002878:	08002815 	.word	0x08002815
 800287c:	08002815 	.word	0x08002815
 8002880:	08002991 	.word	0x08002991
 8002884:	682b      	ldr	r3, [r5, #0]
 8002886:	1d1a      	adds	r2, r3, #4
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	602a      	str	r2, [r5, #0]
 800288c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002894:	2301      	movs	r3, #1
 8002896:	e0a4      	b.n	80029e2 <_printf_i+0x1f6>
 8002898:	6820      	ldr	r0, [r4, #0]
 800289a:	6829      	ldr	r1, [r5, #0]
 800289c:	0606      	lsls	r6, r0, #24
 800289e:	f101 0304 	add.w	r3, r1, #4
 80028a2:	d50a      	bpl.n	80028ba <_printf_i+0xce>
 80028a4:	680e      	ldr	r6, [r1, #0]
 80028a6:	602b      	str	r3, [r5, #0]
 80028a8:	2e00      	cmp	r6, #0
 80028aa:	da03      	bge.n	80028b4 <_printf_i+0xc8>
 80028ac:	232d      	movs	r3, #45	; 0x2d
 80028ae:	4276      	negs	r6, r6
 80028b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028b4:	230a      	movs	r3, #10
 80028b6:	485e      	ldr	r0, [pc, #376]	; (8002a30 <_printf_i+0x244>)
 80028b8:	e019      	b.n	80028ee <_printf_i+0x102>
 80028ba:	680e      	ldr	r6, [r1, #0]
 80028bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80028c0:	602b      	str	r3, [r5, #0]
 80028c2:	bf18      	it	ne
 80028c4:	b236      	sxthne	r6, r6
 80028c6:	e7ef      	b.n	80028a8 <_printf_i+0xbc>
 80028c8:	682b      	ldr	r3, [r5, #0]
 80028ca:	6820      	ldr	r0, [r4, #0]
 80028cc:	1d19      	adds	r1, r3, #4
 80028ce:	6029      	str	r1, [r5, #0]
 80028d0:	0601      	lsls	r1, r0, #24
 80028d2:	d501      	bpl.n	80028d8 <_printf_i+0xec>
 80028d4:	681e      	ldr	r6, [r3, #0]
 80028d6:	e002      	b.n	80028de <_printf_i+0xf2>
 80028d8:	0646      	lsls	r6, r0, #25
 80028da:	d5fb      	bpl.n	80028d4 <_printf_i+0xe8>
 80028dc:	881e      	ldrh	r6, [r3, #0]
 80028de:	2f6f      	cmp	r7, #111	; 0x6f
 80028e0:	bf0c      	ite	eq
 80028e2:	2308      	moveq	r3, #8
 80028e4:	230a      	movne	r3, #10
 80028e6:	4852      	ldr	r0, [pc, #328]	; (8002a30 <_printf_i+0x244>)
 80028e8:	2100      	movs	r1, #0
 80028ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80028ee:	6865      	ldr	r5, [r4, #4]
 80028f0:	2d00      	cmp	r5, #0
 80028f2:	bfa8      	it	ge
 80028f4:	6821      	ldrge	r1, [r4, #0]
 80028f6:	60a5      	str	r5, [r4, #8]
 80028f8:	bfa4      	itt	ge
 80028fa:	f021 0104 	bicge.w	r1, r1, #4
 80028fe:	6021      	strge	r1, [r4, #0]
 8002900:	b90e      	cbnz	r6, 8002906 <_printf_i+0x11a>
 8002902:	2d00      	cmp	r5, #0
 8002904:	d04d      	beq.n	80029a2 <_printf_i+0x1b6>
 8002906:	4615      	mov	r5, r2
 8002908:	fbb6 f1f3 	udiv	r1, r6, r3
 800290c:	fb03 6711 	mls	r7, r3, r1, r6
 8002910:	5dc7      	ldrb	r7, [r0, r7]
 8002912:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002916:	4637      	mov	r7, r6
 8002918:	42bb      	cmp	r3, r7
 800291a:	460e      	mov	r6, r1
 800291c:	d9f4      	bls.n	8002908 <_printf_i+0x11c>
 800291e:	2b08      	cmp	r3, #8
 8002920:	d10b      	bne.n	800293a <_printf_i+0x14e>
 8002922:	6823      	ldr	r3, [r4, #0]
 8002924:	07de      	lsls	r6, r3, #31
 8002926:	d508      	bpl.n	800293a <_printf_i+0x14e>
 8002928:	6923      	ldr	r3, [r4, #16]
 800292a:	6861      	ldr	r1, [r4, #4]
 800292c:	4299      	cmp	r1, r3
 800292e:	bfde      	ittt	le
 8002930:	2330      	movle	r3, #48	; 0x30
 8002932:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002936:	f105 35ff 	addle.w	r5, r5, #4294967295
 800293a:	1b52      	subs	r2, r2, r5
 800293c:	6122      	str	r2, [r4, #16]
 800293e:	464b      	mov	r3, r9
 8002940:	4621      	mov	r1, r4
 8002942:	4640      	mov	r0, r8
 8002944:	f8cd a000 	str.w	sl, [sp]
 8002948:	aa03      	add	r2, sp, #12
 800294a:	f7ff fedf 	bl	800270c <_printf_common>
 800294e:	3001      	adds	r0, #1
 8002950:	d14c      	bne.n	80029ec <_printf_i+0x200>
 8002952:	f04f 30ff 	mov.w	r0, #4294967295
 8002956:	b004      	add	sp, #16
 8002958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800295c:	4834      	ldr	r0, [pc, #208]	; (8002a30 <_printf_i+0x244>)
 800295e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002962:	6829      	ldr	r1, [r5, #0]
 8002964:	6823      	ldr	r3, [r4, #0]
 8002966:	f851 6b04 	ldr.w	r6, [r1], #4
 800296a:	6029      	str	r1, [r5, #0]
 800296c:	061d      	lsls	r5, r3, #24
 800296e:	d514      	bpl.n	800299a <_printf_i+0x1ae>
 8002970:	07df      	lsls	r7, r3, #31
 8002972:	bf44      	itt	mi
 8002974:	f043 0320 	orrmi.w	r3, r3, #32
 8002978:	6023      	strmi	r3, [r4, #0]
 800297a:	b91e      	cbnz	r6, 8002984 <_printf_i+0x198>
 800297c:	6823      	ldr	r3, [r4, #0]
 800297e:	f023 0320 	bic.w	r3, r3, #32
 8002982:	6023      	str	r3, [r4, #0]
 8002984:	2310      	movs	r3, #16
 8002986:	e7af      	b.n	80028e8 <_printf_i+0xfc>
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	f043 0320 	orr.w	r3, r3, #32
 800298e:	6023      	str	r3, [r4, #0]
 8002990:	2378      	movs	r3, #120	; 0x78
 8002992:	4828      	ldr	r0, [pc, #160]	; (8002a34 <_printf_i+0x248>)
 8002994:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002998:	e7e3      	b.n	8002962 <_printf_i+0x176>
 800299a:	0659      	lsls	r1, r3, #25
 800299c:	bf48      	it	mi
 800299e:	b2b6      	uxthmi	r6, r6
 80029a0:	e7e6      	b.n	8002970 <_printf_i+0x184>
 80029a2:	4615      	mov	r5, r2
 80029a4:	e7bb      	b.n	800291e <_printf_i+0x132>
 80029a6:	682b      	ldr	r3, [r5, #0]
 80029a8:	6826      	ldr	r6, [r4, #0]
 80029aa:	1d18      	adds	r0, r3, #4
 80029ac:	6961      	ldr	r1, [r4, #20]
 80029ae:	6028      	str	r0, [r5, #0]
 80029b0:	0635      	lsls	r5, r6, #24
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	d501      	bpl.n	80029ba <_printf_i+0x1ce>
 80029b6:	6019      	str	r1, [r3, #0]
 80029b8:	e002      	b.n	80029c0 <_printf_i+0x1d4>
 80029ba:	0670      	lsls	r0, r6, #25
 80029bc:	d5fb      	bpl.n	80029b6 <_printf_i+0x1ca>
 80029be:	8019      	strh	r1, [r3, #0]
 80029c0:	2300      	movs	r3, #0
 80029c2:	4615      	mov	r5, r2
 80029c4:	6123      	str	r3, [r4, #16]
 80029c6:	e7ba      	b.n	800293e <_printf_i+0x152>
 80029c8:	682b      	ldr	r3, [r5, #0]
 80029ca:	2100      	movs	r1, #0
 80029cc:	1d1a      	adds	r2, r3, #4
 80029ce:	602a      	str	r2, [r5, #0]
 80029d0:	681d      	ldr	r5, [r3, #0]
 80029d2:	6862      	ldr	r2, [r4, #4]
 80029d4:	4628      	mov	r0, r5
 80029d6:	f000 f82f 	bl	8002a38 <memchr>
 80029da:	b108      	cbz	r0, 80029e0 <_printf_i+0x1f4>
 80029dc:	1b40      	subs	r0, r0, r5
 80029de:	6060      	str	r0, [r4, #4]
 80029e0:	6863      	ldr	r3, [r4, #4]
 80029e2:	6123      	str	r3, [r4, #16]
 80029e4:	2300      	movs	r3, #0
 80029e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029ea:	e7a8      	b.n	800293e <_printf_i+0x152>
 80029ec:	462a      	mov	r2, r5
 80029ee:	4649      	mov	r1, r9
 80029f0:	4640      	mov	r0, r8
 80029f2:	6923      	ldr	r3, [r4, #16]
 80029f4:	47d0      	blx	sl
 80029f6:	3001      	adds	r0, #1
 80029f8:	d0ab      	beq.n	8002952 <_printf_i+0x166>
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	079b      	lsls	r3, r3, #30
 80029fe:	d413      	bmi.n	8002a28 <_printf_i+0x23c>
 8002a00:	68e0      	ldr	r0, [r4, #12]
 8002a02:	9b03      	ldr	r3, [sp, #12]
 8002a04:	4298      	cmp	r0, r3
 8002a06:	bfb8      	it	lt
 8002a08:	4618      	movlt	r0, r3
 8002a0a:	e7a4      	b.n	8002956 <_printf_i+0x16a>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	4632      	mov	r2, r6
 8002a10:	4649      	mov	r1, r9
 8002a12:	4640      	mov	r0, r8
 8002a14:	47d0      	blx	sl
 8002a16:	3001      	adds	r0, #1
 8002a18:	d09b      	beq.n	8002952 <_printf_i+0x166>
 8002a1a:	3501      	adds	r5, #1
 8002a1c:	68e3      	ldr	r3, [r4, #12]
 8002a1e:	9903      	ldr	r1, [sp, #12]
 8002a20:	1a5b      	subs	r3, r3, r1
 8002a22:	42ab      	cmp	r3, r5
 8002a24:	dcf2      	bgt.n	8002a0c <_printf_i+0x220>
 8002a26:	e7eb      	b.n	8002a00 <_printf_i+0x214>
 8002a28:	2500      	movs	r5, #0
 8002a2a:	f104 0619 	add.w	r6, r4, #25
 8002a2e:	e7f5      	b.n	8002a1c <_printf_i+0x230>
 8002a30:	08002d93 	.word	0x08002d93
 8002a34:	08002da4 	.word	0x08002da4

08002a38 <memchr>:
 8002a38:	4603      	mov	r3, r0
 8002a3a:	b510      	push	{r4, lr}
 8002a3c:	b2c9      	uxtb	r1, r1
 8002a3e:	4402      	add	r2, r0
 8002a40:	4293      	cmp	r3, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	d101      	bne.n	8002a4a <memchr+0x12>
 8002a46:	2000      	movs	r0, #0
 8002a48:	e003      	b.n	8002a52 <memchr+0x1a>
 8002a4a:	7804      	ldrb	r4, [r0, #0]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	428c      	cmp	r4, r1
 8002a50:	d1f6      	bne.n	8002a40 <memchr+0x8>
 8002a52:	bd10      	pop	{r4, pc}

08002a54 <memcpy>:
 8002a54:	440a      	add	r2, r1
 8002a56:	4291      	cmp	r1, r2
 8002a58:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a5c:	d100      	bne.n	8002a60 <memcpy+0xc>
 8002a5e:	4770      	bx	lr
 8002a60:	b510      	push	{r4, lr}
 8002a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a66:	4291      	cmp	r1, r2
 8002a68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a6c:	d1f9      	bne.n	8002a62 <memcpy+0xe>
 8002a6e:	bd10      	pop	{r4, pc}

08002a70 <memmove>:
 8002a70:	4288      	cmp	r0, r1
 8002a72:	b510      	push	{r4, lr}
 8002a74:	eb01 0402 	add.w	r4, r1, r2
 8002a78:	d902      	bls.n	8002a80 <memmove+0x10>
 8002a7a:	4284      	cmp	r4, r0
 8002a7c:	4623      	mov	r3, r4
 8002a7e:	d807      	bhi.n	8002a90 <memmove+0x20>
 8002a80:	1e43      	subs	r3, r0, #1
 8002a82:	42a1      	cmp	r1, r4
 8002a84:	d008      	beq.n	8002a98 <memmove+0x28>
 8002a86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a8e:	e7f8      	b.n	8002a82 <memmove+0x12>
 8002a90:	4601      	mov	r1, r0
 8002a92:	4402      	add	r2, r0
 8002a94:	428a      	cmp	r2, r1
 8002a96:	d100      	bne.n	8002a9a <memmove+0x2a>
 8002a98:	bd10      	pop	{r4, pc}
 8002a9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002aa2:	e7f7      	b.n	8002a94 <memmove+0x24>

08002aa4 <_free_r>:
 8002aa4:	b538      	push	{r3, r4, r5, lr}
 8002aa6:	4605      	mov	r5, r0
 8002aa8:	2900      	cmp	r1, #0
 8002aaa:	d040      	beq.n	8002b2e <_free_r+0x8a>
 8002aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ab0:	1f0c      	subs	r4, r1, #4
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	bfb8      	it	lt
 8002ab6:	18e4      	addlt	r4, r4, r3
 8002ab8:	f000 f910 	bl	8002cdc <__malloc_lock>
 8002abc:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <_free_r+0x8c>)
 8002abe:	6813      	ldr	r3, [r2, #0]
 8002ac0:	b933      	cbnz	r3, 8002ad0 <_free_r+0x2c>
 8002ac2:	6063      	str	r3, [r4, #4]
 8002ac4:	6014      	str	r4, [r2, #0]
 8002ac6:	4628      	mov	r0, r5
 8002ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002acc:	f000 b90c 	b.w	8002ce8 <__malloc_unlock>
 8002ad0:	42a3      	cmp	r3, r4
 8002ad2:	d908      	bls.n	8002ae6 <_free_r+0x42>
 8002ad4:	6820      	ldr	r0, [r4, #0]
 8002ad6:	1821      	adds	r1, r4, r0
 8002ad8:	428b      	cmp	r3, r1
 8002ada:	bf01      	itttt	eq
 8002adc:	6819      	ldreq	r1, [r3, #0]
 8002ade:	685b      	ldreq	r3, [r3, #4]
 8002ae0:	1809      	addeq	r1, r1, r0
 8002ae2:	6021      	streq	r1, [r4, #0]
 8002ae4:	e7ed      	b.n	8002ac2 <_free_r+0x1e>
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	b10b      	cbz	r3, 8002af0 <_free_r+0x4c>
 8002aec:	42a3      	cmp	r3, r4
 8002aee:	d9fa      	bls.n	8002ae6 <_free_r+0x42>
 8002af0:	6811      	ldr	r1, [r2, #0]
 8002af2:	1850      	adds	r0, r2, r1
 8002af4:	42a0      	cmp	r0, r4
 8002af6:	d10b      	bne.n	8002b10 <_free_r+0x6c>
 8002af8:	6820      	ldr	r0, [r4, #0]
 8002afa:	4401      	add	r1, r0
 8002afc:	1850      	adds	r0, r2, r1
 8002afe:	4283      	cmp	r3, r0
 8002b00:	6011      	str	r1, [r2, #0]
 8002b02:	d1e0      	bne.n	8002ac6 <_free_r+0x22>
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4401      	add	r1, r0
 8002b0a:	6011      	str	r1, [r2, #0]
 8002b0c:	6053      	str	r3, [r2, #4]
 8002b0e:	e7da      	b.n	8002ac6 <_free_r+0x22>
 8002b10:	d902      	bls.n	8002b18 <_free_r+0x74>
 8002b12:	230c      	movs	r3, #12
 8002b14:	602b      	str	r3, [r5, #0]
 8002b16:	e7d6      	b.n	8002ac6 <_free_r+0x22>
 8002b18:	6820      	ldr	r0, [r4, #0]
 8002b1a:	1821      	adds	r1, r4, r0
 8002b1c:	428b      	cmp	r3, r1
 8002b1e:	bf01      	itttt	eq
 8002b20:	6819      	ldreq	r1, [r3, #0]
 8002b22:	685b      	ldreq	r3, [r3, #4]
 8002b24:	1809      	addeq	r1, r1, r0
 8002b26:	6021      	streq	r1, [r4, #0]
 8002b28:	6063      	str	r3, [r4, #4]
 8002b2a:	6054      	str	r4, [r2, #4]
 8002b2c:	e7cb      	b.n	8002ac6 <_free_r+0x22>
 8002b2e:	bd38      	pop	{r3, r4, r5, pc}
 8002b30:	20000104 	.word	0x20000104

08002b34 <sbrk_aligned>:
 8002b34:	b570      	push	{r4, r5, r6, lr}
 8002b36:	4e0e      	ldr	r6, [pc, #56]	; (8002b70 <sbrk_aligned+0x3c>)
 8002b38:	460c      	mov	r4, r1
 8002b3a:	6831      	ldr	r1, [r6, #0]
 8002b3c:	4605      	mov	r5, r0
 8002b3e:	b911      	cbnz	r1, 8002b46 <sbrk_aligned+0x12>
 8002b40:	f000 f8bc 	bl	8002cbc <_sbrk_r>
 8002b44:	6030      	str	r0, [r6, #0]
 8002b46:	4621      	mov	r1, r4
 8002b48:	4628      	mov	r0, r5
 8002b4a:	f000 f8b7 	bl	8002cbc <_sbrk_r>
 8002b4e:	1c43      	adds	r3, r0, #1
 8002b50:	d00a      	beq.n	8002b68 <sbrk_aligned+0x34>
 8002b52:	1cc4      	adds	r4, r0, #3
 8002b54:	f024 0403 	bic.w	r4, r4, #3
 8002b58:	42a0      	cmp	r0, r4
 8002b5a:	d007      	beq.n	8002b6c <sbrk_aligned+0x38>
 8002b5c:	1a21      	subs	r1, r4, r0
 8002b5e:	4628      	mov	r0, r5
 8002b60:	f000 f8ac 	bl	8002cbc <_sbrk_r>
 8002b64:	3001      	adds	r0, #1
 8002b66:	d101      	bne.n	8002b6c <sbrk_aligned+0x38>
 8002b68:	f04f 34ff 	mov.w	r4, #4294967295
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	bd70      	pop	{r4, r5, r6, pc}
 8002b70:	20000108 	.word	0x20000108

08002b74 <_malloc_r>:
 8002b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b78:	1ccd      	adds	r5, r1, #3
 8002b7a:	f025 0503 	bic.w	r5, r5, #3
 8002b7e:	3508      	adds	r5, #8
 8002b80:	2d0c      	cmp	r5, #12
 8002b82:	bf38      	it	cc
 8002b84:	250c      	movcc	r5, #12
 8002b86:	2d00      	cmp	r5, #0
 8002b88:	4607      	mov	r7, r0
 8002b8a:	db01      	blt.n	8002b90 <_malloc_r+0x1c>
 8002b8c:	42a9      	cmp	r1, r5
 8002b8e:	d905      	bls.n	8002b9c <_malloc_r+0x28>
 8002b90:	230c      	movs	r3, #12
 8002b92:	2600      	movs	r6, #0
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	4630      	mov	r0, r6
 8002b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b9c:	4e2e      	ldr	r6, [pc, #184]	; (8002c58 <_malloc_r+0xe4>)
 8002b9e:	f000 f89d 	bl	8002cdc <__malloc_lock>
 8002ba2:	6833      	ldr	r3, [r6, #0]
 8002ba4:	461c      	mov	r4, r3
 8002ba6:	bb34      	cbnz	r4, 8002bf6 <_malloc_r+0x82>
 8002ba8:	4629      	mov	r1, r5
 8002baa:	4638      	mov	r0, r7
 8002bac:	f7ff ffc2 	bl	8002b34 <sbrk_aligned>
 8002bb0:	1c43      	adds	r3, r0, #1
 8002bb2:	4604      	mov	r4, r0
 8002bb4:	d14d      	bne.n	8002c52 <_malloc_r+0xde>
 8002bb6:	6834      	ldr	r4, [r6, #0]
 8002bb8:	4626      	mov	r6, r4
 8002bba:	2e00      	cmp	r6, #0
 8002bbc:	d140      	bne.n	8002c40 <_malloc_r+0xcc>
 8002bbe:	6823      	ldr	r3, [r4, #0]
 8002bc0:	4631      	mov	r1, r6
 8002bc2:	4638      	mov	r0, r7
 8002bc4:	eb04 0803 	add.w	r8, r4, r3
 8002bc8:	f000 f878 	bl	8002cbc <_sbrk_r>
 8002bcc:	4580      	cmp	r8, r0
 8002bce:	d13a      	bne.n	8002c46 <_malloc_r+0xd2>
 8002bd0:	6821      	ldr	r1, [r4, #0]
 8002bd2:	3503      	adds	r5, #3
 8002bd4:	1a6d      	subs	r5, r5, r1
 8002bd6:	f025 0503 	bic.w	r5, r5, #3
 8002bda:	3508      	adds	r5, #8
 8002bdc:	2d0c      	cmp	r5, #12
 8002bde:	bf38      	it	cc
 8002be0:	250c      	movcc	r5, #12
 8002be2:	4638      	mov	r0, r7
 8002be4:	4629      	mov	r1, r5
 8002be6:	f7ff ffa5 	bl	8002b34 <sbrk_aligned>
 8002bea:	3001      	adds	r0, #1
 8002bec:	d02b      	beq.n	8002c46 <_malloc_r+0xd2>
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	442b      	add	r3, r5
 8002bf2:	6023      	str	r3, [r4, #0]
 8002bf4:	e00e      	b.n	8002c14 <_malloc_r+0xa0>
 8002bf6:	6822      	ldr	r2, [r4, #0]
 8002bf8:	1b52      	subs	r2, r2, r5
 8002bfa:	d41e      	bmi.n	8002c3a <_malloc_r+0xc6>
 8002bfc:	2a0b      	cmp	r2, #11
 8002bfe:	d916      	bls.n	8002c2e <_malloc_r+0xba>
 8002c00:	1961      	adds	r1, r4, r5
 8002c02:	42a3      	cmp	r3, r4
 8002c04:	6025      	str	r5, [r4, #0]
 8002c06:	bf18      	it	ne
 8002c08:	6059      	strne	r1, [r3, #4]
 8002c0a:	6863      	ldr	r3, [r4, #4]
 8002c0c:	bf08      	it	eq
 8002c0e:	6031      	streq	r1, [r6, #0]
 8002c10:	5162      	str	r2, [r4, r5]
 8002c12:	604b      	str	r3, [r1, #4]
 8002c14:	4638      	mov	r0, r7
 8002c16:	f104 060b 	add.w	r6, r4, #11
 8002c1a:	f000 f865 	bl	8002ce8 <__malloc_unlock>
 8002c1e:	f026 0607 	bic.w	r6, r6, #7
 8002c22:	1d23      	adds	r3, r4, #4
 8002c24:	1af2      	subs	r2, r6, r3
 8002c26:	d0b6      	beq.n	8002b96 <_malloc_r+0x22>
 8002c28:	1b9b      	subs	r3, r3, r6
 8002c2a:	50a3      	str	r3, [r4, r2]
 8002c2c:	e7b3      	b.n	8002b96 <_malloc_r+0x22>
 8002c2e:	6862      	ldr	r2, [r4, #4]
 8002c30:	42a3      	cmp	r3, r4
 8002c32:	bf0c      	ite	eq
 8002c34:	6032      	streq	r2, [r6, #0]
 8002c36:	605a      	strne	r2, [r3, #4]
 8002c38:	e7ec      	b.n	8002c14 <_malloc_r+0xa0>
 8002c3a:	4623      	mov	r3, r4
 8002c3c:	6864      	ldr	r4, [r4, #4]
 8002c3e:	e7b2      	b.n	8002ba6 <_malloc_r+0x32>
 8002c40:	4634      	mov	r4, r6
 8002c42:	6876      	ldr	r6, [r6, #4]
 8002c44:	e7b9      	b.n	8002bba <_malloc_r+0x46>
 8002c46:	230c      	movs	r3, #12
 8002c48:	4638      	mov	r0, r7
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	f000 f84c 	bl	8002ce8 <__malloc_unlock>
 8002c50:	e7a1      	b.n	8002b96 <_malloc_r+0x22>
 8002c52:	6025      	str	r5, [r4, #0]
 8002c54:	e7de      	b.n	8002c14 <_malloc_r+0xa0>
 8002c56:	bf00      	nop
 8002c58:	20000104 	.word	0x20000104

08002c5c <_realloc_r>:
 8002c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c60:	4680      	mov	r8, r0
 8002c62:	4614      	mov	r4, r2
 8002c64:	460e      	mov	r6, r1
 8002c66:	b921      	cbnz	r1, 8002c72 <_realloc_r+0x16>
 8002c68:	4611      	mov	r1, r2
 8002c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c6e:	f7ff bf81 	b.w	8002b74 <_malloc_r>
 8002c72:	b92a      	cbnz	r2, 8002c80 <_realloc_r+0x24>
 8002c74:	f7ff ff16 	bl	8002aa4 <_free_r>
 8002c78:	4625      	mov	r5, r4
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c80:	f000 f838 	bl	8002cf4 <_malloc_usable_size_r>
 8002c84:	4284      	cmp	r4, r0
 8002c86:	4607      	mov	r7, r0
 8002c88:	d802      	bhi.n	8002c90 <_realloc_r+0x34>
 8002c8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002c8e:	d812      	bhi.n	8002cb6 <_realloc_r+0x5a>
 8002c90:	4621      	mov	r1, r4
 8002c92:	4640      	mov	r0, r8
 8002c94:	f7ff ff6e 	bl	8002b74 <_malloc_r>
 8002c98:	4605      	mov	r5, r0
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	d0ed      	beq.n	8002c7a <_realloc_r+0x1e>
 8002c9e:	42bc      	cmp	r4, r7
 8002ca0:	4622      	mov	r2, r4
 8002ca2:	4631      	mov	r1, r6
 8002ca4:	bf28      	it	cs
 8002ca6:	463a      	movcs	r2, r7
 8002ca8:	f7ff fed4 	bl	8002a54 <memcpy>
 8002cac:	4631      	mov	r1, r6
 8002cae:	4640      	mov	r0, r8
 8002cb0:	f7ff fef8 	bl	8002aa4 <_free_r>
 8002cb4:	e7e1      	b.n	8002c7a <_realloc_r+0x1e>
 8002cb6:	4635      	mov	r5, r6
 8002cb8:	e7df      	b.n	8002c7a <_realloc_r+0x1e>
	...

08002cbc <_sbrk_r>:
 8002cbc:	b538      	push	{r3, r4, r5, lr}
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	4d05      	ldr	r5, [pc, #20]	; (8002cd8 <_sbrk_r+0x1c>)
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	4608      	mov	r0, r1
 8002cc6:	602b      	str	r3, [r5, #0]
 8002cc8:	f7fd fd12 	bl	80006f0 <_sbrk>
 8002ccc:	1c43      	adds	r3, r0, #1
 8002cce:	d102      	bne.n	8002cd6 <_sbrk_r+0x1a>
 8002cd0:	682b      	ldr	r3, [r5, #0]
 8002cd2:	b103      	cbz	r3, 8002cd6 <_sbrk_r+0x1a>
 8002cd4:	6023      	str	r3, [r4, #0]
 8002cd6:	bd38      	pop	{r3, r4, r5, pc}
 8002cd8:	2000010c 	.word	0x2000010c

08002cdc <__malloc_lock>:
 8002cdc:	4801      	ldr	r0, [pc, #4]	; (8002ce4 <__malloc_lock+0x8>)
 8002cde:	f000 b811 	b.w	8002d04 <__retarget_lock_acquire_recursive>
 8002ce2:	bf00      	nop
 8002ce4:	20000110 	.word	0x20000110

08002ce8 <__malloc_unlock>:
 8002ce8:	4801      	ldr	r0, [pc, #4]	; (8002cf0 <__malloc_unlock+0x8>)
 8002cea:	f000 b80c 	b.w	8002d06 <__retarget_lock_release_recursive>
 8002cee:	bf00      	nop
 8002cf0:	20000110 	.word	0x20000110

08002cf4 <_malloc_usable_size_r>:
 8002cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cf8:	1f18      	subs	r0, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bfbc      	itt	lt
 8002cfe:	580b      	ldrlt	r3, [r1, r0]
 8002d00:	18c0      	addlt	r0, r0, r3
 8002d02:	4770      	bx	lr

08002d04 <__retarget_lock_acquire_recursive>:
 8002d04:	4770      	bx	lr

08002d06 <__retarget_lock_release_recursive>:
 8002d06:	4770      	bx	lr

08002d08 <_init>:
 8002d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0a:	bf00      	nop
 8002d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0e:	bc08      	pop	{r3}
 8002d10:	469e      	mov	lr, r3
 8002d12:	4770      	bx	lr

08002d14 <_fini>:
 8002d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d16:	bf00      	nop
 8002d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1a:	bc08      	pop	{r3}
 8002d1c:	469e      	mov	lr, r3
 8002d1e:	4770      	bx	lr
