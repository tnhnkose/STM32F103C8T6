
TesterDeviceFirmware1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004edc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004fec  08004fec  00014fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005064  08005064  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005064  08005064  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005064  08005064  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005064  08005064  00015064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005068  08005068  00015068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800506c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  08005078  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08005078  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b938  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001918  00000000  00000000  0002b96d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002d288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002dcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016823  00000000  00000000  0002e698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c17a  00000000  00000000  00044ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000831d4  00000000  00000000  00051035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4209  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d38  00000000  00000000  000d425c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004fd4 	.word	0x08004fd4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08004fd4 	.word	0x08004fd4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_fmul>:
 80003b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003bc:	bf1e      	ittt	ne
 80003be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003c2:	ea92 0f0c 	teqne	r2, ip
 80003c6:	ea93 0f0c 	teqne	r3, ip
 80003ca:	d06f      	beq.n	80004ac <__aeabi_fmul+0xf8>
 80003cc:	441a      	add	r2, r3
 80003ce:	ea80 0c01 	eor.w	ip, r0, r1
 80003d2:	0240      	lsls	r0, r0, #9
 80003d4:	bf18      	it	ne
 80003d6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003da:	d01e      	beq.n	800041a <__aeabi_fmul+0x66>
 80003dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003e0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003e4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003e8:	fba0 3101 	umull	r3, r1, r0, r1
 80003ec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003f0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003f4:	bf3e      	ittt	cc
 80003f6:	0049      	lslcc	r1, r1, #1
 80003f8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003fc:	005b      	lslcc	r3, r3, #1
 80003fe:	ea40 0001 	orr.w	r0, r0, r1
 8000402:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000406:	2afd      	cmp	r2, #253	; 0xfd
 8000408:	d81d      	bhi.n	8000446 <__aeabi_fmul+0x92>
 800040a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800040e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000412:	bf08      	it	eq
 8000414:	f020 0001 	biceq.w	r0, r0, #1
 8000418:	4770      	bx	lr
 800041a:	f090 0f00 	teq	r0, #0
 800041e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000422:	bf08      	it	eq
 8000424:	0249      	lsleq	r1, r1, #9
 8000426:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800042a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800042e:	3a7f      	subs	r2, #127	; 0x7f
 8000430:	bfc2      	ittt	gt
 8000432:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000436:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800043a:	4770      	bxgt	lr
 800043c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000440:	f04f 0300 	mov.w	r3, #0
 8000444:	3a01      	subs	r2, #1
 8000446:	dc5d      	bgt.n	8000504 <__aeabi_fmul+0x150>
 8000448:	f112 0f19 	cmn.w	r2, #25
 800044c:	bfdc      	itt	le
 800044e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000452:	4770      	bxle	lr
 8000454:	f1c2 0200 	rsb	r2, r2, #0
 8000458:	0041      	lsls	r1, r0, #1
 800045a:	fa21 f102 	lsr.w	r1, r1, r2
 800045e:	f1c2 0220 	rsb	r2, r2, #32
 8000462:	fa00 fc02 	lsl.w	ip, r0, r2
 8000466:	ea5f 0031 	movs.w	r0, r1, rrx
 800046a:	f140 0000 	adc.w	r0, r0, #0
 800046e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000472:	bf08      	it	eq
 8000474:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000478:	4770      	bx	lr
 800047a:	f092 0f00 	teq	r2, #0
 800047e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000482:	bf02      	ittt	eq
 8000484:	0040      	lsleq	r0, r0, #1
 8000486:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800048a:	3a01      	subeq	r2, #1
 800048c:	d0f9      	beq.n	8000482 <__aeabi_fmul+0xce>
 800048e:	ea40 000c 	orr.w	r0, r0, ip
 8000492:	f093 0f00 	teq	r3, #0
 8000496:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800049a:	bf02      	ittt	eq
 800049c:	0049      	lsleq	r1, r1, #1
 800049e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80004a2:	3b01      	subeq	r3, #1
 80004a4:	d0f9      	beq.n	800049a <__aeabi_fmul+0xe6>
 80004a6:	ea41 010c 	orr.w	r1, r1, ip
 80004aa:	e78f      	b.n	80003cc <__aeabi_fmul+0x18>
 80004ac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	bf18      	it	ne
 80004b6:	ea93 0f0c 	teqne	r3, ip
 80004ba:	d00a      	beq.n	80004d2 <__aeabi_fmul+0x11e>
 80004bc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004c0:	bf18      	it	ne
 80004c2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004c6:	d1d8      	bne.n	800047a <__aeabi_fmul+0xc6>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004d0:	4770      	bx	lr
 80004d2:	f090 0f00 	teq	r0, #0
 80004d6:	bf17      	itett	ne
 80004d8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004dc:	4608      	moveq	r0, r1
 80004de:	f091 0f00 	teqne	r1, #0
 80004e2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004e6:	d014      	beq.n	8000512 <__aeabi_fmul+0x15e>
 80004e8:	ea92 0f0c 	teq	r2, ip
 80004ec:	d101      	bne.n	80004f2 <__aeabi_fmul+0x13e>
 80004ee:	0242      	lsls	r2, r0, #9
 80004f0:	d10f      	bne.n	8000512 <__aeabi_fmul+0x15e>
 80004f2:	ea93 0f0c 	teq	r3, ip
 80004f6:	d103      	bne.n	8000500 <__aeabi_fmul+0x14c>
 80004f8:	024b      	lsls	r3, r1, #9
 80004fa:	bf18      	it	ne
 80004fc:	4608      	movne	r0, r1
 80004fe:	d108      	bne.n	8000512 <__aeabi_fmul+0x15e>
 8000500:	ea80 0001 	eor.w	r0, r0, r1
 8000504:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000508:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800050c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000510:	4770      	bx	lr
 8000512:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000516:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800051a:	4770      	bx	lr

0800051c <__aeabi_drsub>:
 800051c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e002      	b.n	8000528 <__adddf3>
 8000522:	bf00      	nop

08000524 <__aeabi_dsub>:
 8000524:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000528 <__adddf3>:
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800052e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000532:	ea94 0f05 	teq	r4, r5
 8000536:	bf08      	it	eq
 8000538:	ea90 0f02 	teqeq	r0, r2
 800053c:	bf1f      	itttt	ne
 800053e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000542:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000546:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800054a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800054e:	f000 80e2 	beq.w	8000716 <__adddf3+0x1ee>
 8000552:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000556:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800055a:	bfb8      	it	lt
 800055c:	426d      	neglt	r5, r5
 800055e:	dd0c      	ble.n	800057a <__adddf3+0x52>
 8000560:	442c      	add	r4, r5
 8000562:	ea80 0202 	eor.w	r2, r0, r2
 8000566:	ea81 0303 	eor.w	r3, r1, r3
 800056a:	ea82 0000 	eor.w	r0, r2, r0
 800056e:	ea83 0101 	eor.w	r1, r3, r1
 8000572:	ea80 0202 	eor.w	r2, r0, r2
 8000576:	ea81 0303 	eor.w	r3, r1, r3
 800057a:	2d36      	cmp	r5, #54	; 0x36
 800057c:	bf88      	it	hi
 800057e:	bd30      	pophi	{r4, r5, pc}
 8000580:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000584:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000588:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800058c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000590:	d002      	beq.n	8000598 <__adddf3+0x70>
 8000592:	4240      	negs	r0, r0
 8000594:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000598:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800059c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005a4:	d002      	beq.n	80005ac <__adddf3+0x84>
 80005a6:	4252      	negs	r2, r2
 80005a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005ac:	ea94 0f05 	teq	r4, r5
 80005b0:	f000 80a7 	beq.w	8000702 <__adddf3+0x1da>
 80005b4:	f1a4 0401 	sub.w	r4, r4, #1
 80005b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80005bc:	db0d      	blt.n	80005da <__adddf3+0xb2>
 80005be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005c2:	fa22 f205 	lsr.w	r2, r2, r5
 80005c6:	1880      	adds	r0, r0, r2
 80005c8:	f141 0100 	adc.w	r1, r1, #0
 80005cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80005d0:	1880      	adds	r0, r0, r2
 80005d2:	fa43 f305 	asr.w	r3, r3, r5
 80005d6:	4159      	adcs	r1, r3
 80005d8:	e00e      	b.n	80005f8 <__adddf3+0xd0>
 80005da:	f1a5 0520 	sub.w	r5, r5, #32
 80005de:	f10e 0e20 	add.w	lr, lr, #32
 80005e2:	2a01      	cmp	r2, #1
 80005e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e8:	bf28      	it	cs
 80005ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005ee:	fa43 f305 	asr.w	r3, r3, r5
 80005f2:	18c0      	adds	r0, r0, r3
 80005f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	d507      	bpl.n	800060e <__adddf3+0xe6>
 80005fe:	f04f 0e00 	mov.w	lr, #0
 8000602:	f1dc 0c00 	rsbs	ip, ip, #0
 8000606:	eb7e 0000 	sbcs.w	r0, lr, r0
 800060a:	eb6e 0101 	sbc.w	r1, lr, r1
 800060e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000612:	d31b      	bcc.n	800064c <__adddf3+0x124>
 8000614:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000618:	d30c      	bcc.n	8000634 <__adddf3+0x10c>
 800061a:	0849      	lsrs	r1, r1, #1
 800061c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000620:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000624:	f104 0401 	add.w	r4, r4, #1
 8000628:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800062c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000630:	f080 809a 	bcs.w	8000768 <__adddf3+0x240>
 8000634:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800063e:	f150 0000 	adcs.w	r0, r0, #0
 8000642:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000646:	ea41 0105 	orr.w	r1, r1, r5
 800064a:	bd30      	pop	{r4, r5, pc}
 800064c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000650:	4140      	adcs	r0, r0
 8000652:	eb41 0101 	adc.w	r1, r1, r1
 8000656:	3c01      	subs	r4, #1
 8000658:	bf28      	it	cs
 800065a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800065e:	d2e9      	bcs.n	8000634 <__adddf3+0x10c>
 8000660:	f091 0f00 	teq	r1, #0
 8000664:	bf04      	itt	eq
 8000666:	4601      	moveq	r1, r0
 8000668:	2000      	moveq	r0, #0
 800066a:	fab1 f381 	clz	r3, r1
 800066e:	bf08      	it	eq
 8000670:	3320      	addeq	r3, #32
 8000672:	f1a3 030b 	sub.w	r3, r3, #11
 8000676:	f1b3 0220 	subs.w	r2, r3, #32
 800067a:	da0c      	bge.n	8000696 <__adddf3+0x16e>
 800067c:	320c      	adds	r2, #12
 800067e:	dd08      	ble.n	8000692 <__adddf3+0x16a>
 8000680:	f102 0c14 	add.w	ip, r2, #20
 8000684:	f1c2 020c 	rsb	r2, r2, #12
 8000688:	fa01 f00c 	lsl.w	r0, r1, ip
 800068c:	fa21 f102 	lsr.w	r1, r1, r2
 8000690:	e00c      	b.n	80006ac <__adddf3+0x184>
 8000692:	f102 0214 	add.w	r2, r2, #20
 8000696:	bfd8      	it	le
 8000698:	f1c2 0c20 	rsble	ip, r2, #32
 800069c:	fa01 f102 	lsl.w	r1, r1, r2
 80006a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006a4:	bfdc      	itt	le
 80006a6:	ea41 010c 	orrle.w	r1, r1, ip
 80006aa:	4090      	lslle	r0, r2
 80006ac:	1ae4      	subs	r4, r4, r3
 80006ae:	bfa2      	ittt	ge
 80006b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006b4:	4329      	orrge	r1, r5
 80006b6:	bd30      	popge	{r4, r5, pc}
 80006b8:	ea6f 0404 	mvn.w	r4, r4
 80006bc:	3c1f      	subs	r4, #31
 80006be:	da1c      	bge.n	80006fa <__adddf3+0x1d2>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc0e      	bgt.n	80006e2 <__adddf3+0x1ba>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0220 	rsb	r2, r4, #32
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f302 	lsl.w	r3, r1, r2
 80006d4:	ea40 0003 	orr.w	r0, r0, r3
 80006d8:	fa21 f304 	lsr.w	r3, r1, r4
 80006dc:	ea45 0103 	orr.w	r1, r5, r3
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	f1c4 040c 	rsb	r4, r4, #12
 80006e6:	f1c4 0220 	rsb	r2, r4, #32
 80006ea:	fa20 f002 	lsr.w	r0, r0, r2
 80006ee:	fa01 f304 	lsl.w	r3, r1, r4
 80006f2:	ea40 0003 	orr.w	r0, r0, r3
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	fa21 f004 	lsr.w	r0, r1, r4
 80006fe:	4629      	mov	r1, r5
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	f094 0f00 	teq	r4, #0
 8000706:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800070a:	bf06      	itte	eq
 800070c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000710:	3401      	addeq	r4, #1
 8000712:	3d01      	subne	r5, #1
 8000714:	e74e      	b.n	80005b4 <__adddf3+0x8c>
 8000716:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800071a:	bf18      	it	ne
 800071c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000720:	d029      	beq.n	8000776 <__adddf3+0x24e>
 8000722:	ea94 0f05 	teq	r4, r5
 8000726:	bf08      	it	eq
 8000728:	ea90 0f02 	teqeq	r0, r2
 800072c:	d005      	beq.n	800073a <__adddf3+0x212>
 800072e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000732:	bf04      	itt	eq
 8000734:	4619      	moveq	r1, r3
 8000736:	4610      	moveq	r0, r2
 8000738:	bd30      	pop	{r4, r5, pc}
 800073a:	ea91 0f03 	teq	r1, r3
 800073e:	bf1e      	ittt	ne
 8000740:	2100      	movne	r1, #0
 8000742:	2000      	movne	r0, #0
 8000744:	bd30      	popne	{r4, r5, pc}
 8000746:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800074a:	d105      	bne.n	8000758 <__adddf3+0x230>
 800074c:	0040      	lsls	r0, r0, #1
 800074e:	4149      	adcs	r1, r1
 8000750:	bf28      	it	cs
 8000752:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd30      	pop	{r4, r5, pc}
 8000758:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800075c:	bf3c      	itt	cc
 800075e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000762:	bd30      	popcc	{r4, r5, pc}
 8000764:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000768:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800076c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800077a:	bf1a      	itte	ne
 800077c:	4619      	movne	r1, r3
 800077e:	4610      	movne	r0, r2
 8000780:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000784:	bf1c      	itt	ne
 8000786:	460b      	movne	r3, r1
 8000788:	4602      	movne	r2, r0
 800078a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800078e:	bf06      	itte	eq
 8000790:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000794:	ea91 0f03 	teqeq	r1, r3
 8000798:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800079c:	bd30      	pop	{r4, r5, pc}
 800079e:	bf00      	nop

080007a0 <__aeabi_ui2d>:
 80007a0:	f090 0f00 	teq	r0, #0
 80007a4:	bf04      	itt	eq
 80007a6:	2100      	moveq	r1, #0
 80007a8:	4770      	bxeq	lr
 80007aa:	b530      	push	{r4, r5, lr}
 80007ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b4:	f04f 0500 	mov.w	r5, #0
 80007b8:	f04f 0100 	mov.w	r1, #0
 80007bc:	e750      	b.n	8000660 <__adddf3+0x138>
 80007be:	bf00      	nop

080007c0 <__aeabi_i2d>:
 80007c0:	f090 0f00 	teq	r0, #0
 80007c4:	bf04      	itt	eq
 80007c6:	2100      	moveq	r1, #0
 80007c8:	4770      	bxeq	lr
 80007ca:	b530      	push	{r4, r5, lr}
 80007cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	f04f 0100 	mov.w	r1, #0
 80007e0:	e73e      	b.n	8000660 <__adddf3+0x138>
 80007e2:	bf00      	nop

080007e4 <__aeabi_f2d>:
 80007e4:	0042      	lsls	r2, r0, #1
 80007e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80007ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007f2:	bf1f      	itttt	ne
 80007f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000800:	4770      	bxne	lr
 8000802:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000806:	bf08      	it	eq
 8000808:	4770      	bxeq	lr
 800080a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800080e:	bf04      	itt	eq
 8000810:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000814:	4770      	bxeq	lr
 8000816:	b530      	push	{r4, r5, lr}
 8000818:	f44f 7460 	mov.w	r4, #896	; 0x380
 800081c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000824:	e71c      	b.n	8000660 <__adddf3+0x138>
 8000826:	bf00      	nop

08000828 <__aeabi_ul2d>:
 8000828:	ea50 0201 	orrs.w	r2, r0, r1
 800082c:	bf08      	it	eq
 800082e:	4770      	bxeq	lr
 8000830:	b530      	push	{r4, r5, lr}
 8000832:	f04f 0500 	mov.w	r5, #0
 8000836:	e00a      	b.n	800084e <__aeabi_l2d+0x16>

08000838 <__aeabi_l2d>:
 8000838:	ea50 0201 	orrs.w	r2, r0, r1
 800083c:	bf08      	it	eq
 800083e:	4770      	bxeq	lr
 8000840:	b530      	push	{r4, r5, lr}
 8000842:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000846:	d502      	bpl.n	800084e <__aeabi_l2d+0x16>
 8000848:	4240      	negs	r0, r0
 800084a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800084e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000852:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000856:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800085a:	f43f aed8 	beq.w	800060e <__adddf3+0xe6>
 800085e:	f04f 0203 	mov.w	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800086e:	bf18      	it	ne
 8000870:	3203      	addne	r2, #3
 8000872:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000876:	f1c2 0320 	rsb	r3, r2, #32
 800087a:	fa00 fc03 	lsl.w	ip, r0, r3
 800087e:	fa20 f002 	lsr.w	r0, r0, r2
 8000882:	fa01 fe03 	lsl.w	lr, r1, r3
 8000886:	ea40 000e 	orr.w	r0, r0, lr
 800088a:	fa21 f102 	lsr.w	r1, r1, r2
 800088e:	4414      	add	r4, r2
 8000890:	e6bd      	b.n	800060e <__adddf3+0xe6>
 8000892:	bf00      	nop

08000894 <__aeabi_d2f>:
 8000894:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000898:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800089c:	bf24      	itt	cs
 800089e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008a6:	d90d      	bls.n	80008c4 <__aeabi_d2f+0x30>
 80008a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008bc:	bf08      	it	eq
 80008be:	f020 0001 	biceq.w	r0, r0, #1
 80008c2:	4770      	bx	lr
 80008c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008c8:	d121      	bne.n	800090e <__aeabi_d2f+0x7a>
 80008ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008ce:	bfbc      	itt	lt
 80008d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008d4:	4770      	bxlt	lr
 80008d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008de:	f1c2 0218 	rsb	r2, r2, #24
 80008e2:	f1c2 0c20 	rsb	ip, r2, #32
 80008e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008ea:	fa20 f002 	lsr.w	r0, r0, r2
 80008ee:	bf18      	it	ne
 80008f0:	f040 0001 	orrne.w	r0, r0, #1
 80008f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000900:	ea40 000c 	orr.w	r0, r0, ip
 8000904:	fa23 f302 	lsr.w	r3, r3, r2
 8000908:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800090c:	e7cc      	b.n	80008a8 <__aeabi_d2f+0x14>
 800090e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000912:	d107      	bne.n	8000924 <__aeabi_d2f+0x90>
 8000914:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000918:	bf1e      	ittt	ne
 800091a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800091e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000922:	4770      	bxne	lr
 8000924:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000928:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800092c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <__aeabi_frsub>:
 8000934:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000938:	e002      	b.n	8000940 <__addsf3>
 800093a:	bf00      	nop

0800093c <__aeabi_fsub>:
 800093c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000940 <__addsf3>:
 8000940:	0042      	lsls	r2, r0, #1
 8000942:	bf1f      	itttt	ne
 8000944:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000948:	ea92 0f03 	teqne	r2, r3
 800094c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000950:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000954:	d06a      	beq.n	8000a2c <__addsf3+0xec>
 8000956:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800095a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800095e:	bfc1      	itttt	gt
 8000960:	18d2      	addgt	r2, r2, r3
 8000962:	4041      	eorgt	r1, r0
 8000964:	4048      	eorgt	r0, r1
 8000966:	4041      	eorgt	r1, r0
 8000968:	bfb8      	it	lt
 800096a:	425b      	neglt	r3, r3
 800096c:	2b19      	cmp	r3, #25
 800096e:	bf88      	it	hi
 8000970:	4770      	bxhi	lr
 8000972:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000976:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800097a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800097e:	bf18      	it	ne
 8000980:	4240      	negne	r0, r0
 8000982:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000986:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800098a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800098e:	bf18      	it	ne
 8000990:	4249      	negne	r1, r1
 8000992:	ea92 0f03 	teq	r2, r3
 8000996:	d03f      	beq.n	8000a18 <__addsf3+0xd8>
 8000998:	f1a2 0201 	sub.w	r2, r2, #1
 800099c:	fa41 fc03 	asr.w	ip, r1, r3
 80009a0:	eb10 000c 	adds.w	r0, r0, ip
 80009a4:	f1c3 0320 	rsb	r3, r3, #32
 80009a8:	fa01 f103 	lsl.w	r1, r1, r3
 80009ac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009b0:	d502      	bpl.n	80009b8 <__addsf3+0x78>
 80009b2:	4249      	negs	r1, r1
 80009b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009bc:	d313      	bcc.n	80009e6 <__addsf3+0xa6>
 80009be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009c2:	d306      	bcc.n	80009d2 <__addsf3+0x92>
 80009c4:	0840      	lsrs	r0, r0, #1
 80009c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80009ca:	f102 0201 	add.w	r2, r2, #1
 80009ce:	2afe      	cmp	r2, #254	; 0xfe
 80009d0:	d251      	bcs.n	8000a76 <__addsf3+0x136>
 80009d2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009da:	bf08      	it	eq
 80009dc:	f020 0001 	biceq.w	r0, r0, #1
 80009e0:	ea40 0003 	orr.w	r0, r0, r3
 80009e4:	4770      	bx	lr
 80009e6:	0049      	lsls	r1, r1, #1
 80009e8:	eb40 0000 	adc.w	r0, r0, r0
 80009ec:	3a01      	subs	r2, #1
 80009ee:	bf28      	it	cs
 80009f0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009f4:	d2ed      	bcs.n	80009d2 <__addsf3+0x92>
 80009f6:	fab0 fc80 	clz	ip, r0
 80009fa:	f1ac 0c08 	sub.w	ip, ip, #8
 80009fe:	ebb2 020c 	subs.w	r2, r2, ip
 8000a02:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a06:	bfaa      	itet	ge
 8000a08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a0c:	4252      	neglt	r2, r2
 8000a0e:	4318      	orrge	r0, r3
 8000a10:	bfbc      	itt	lt
 8000a12:	40d0      	lsrlt	r0, r2
 8000a14:	4318      	orrlt	r0, r3
 8000a16:	4770      	bx	lr
 8000a18:	f092 0f00 	teq	r2, #0
 8000a1c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a20:	bf06      	itte	eq
 8000a22:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a26:	3201      	addeq	r2, #1
 8000a28:	3b01      	subne	r3, #1
 8000a2a:	e7b5      	b.n	8000998 <__addsf3+0x58>
 8000a2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a34:	bf18      	it	ne
 8000a36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3a:	d021      	beq.n	8000a80 <__addsf3+0x140>
 8000a3c:	ea92 0f03 	teq	r2, r3
 8000a40:	d004      	beq.n	8000a4c <__addsf3+0x10c>
 8000a42:	f092 0f00 	teq	r2, #0
 8000a46:	bf08      	it	eq
 8000a48:	4608      	moveq	r0, r1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea90 0f01 	teq	r0, r1
 8000a50:	bf1c      	itt	ne
 8000a52:	2000      	movne	r0, #0
 8000a54:	4770      	bxne	lr
 8000a56:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a5a:	d104      	bne.n	8000a66 <__addsf3+0x126>
 8000a5c:	0040      	lsls	r0, r0, #1
 8000a5e:	bf28      	it	cs
 8000a60:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a64:	4770      	bx	lr
 8000a66:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a6a:	bf3c      	itt	cc
 8000a6c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a70:	4770      	bxcc	lr
 8000a72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a76:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a7e:	4770      	bx	lr
 8000a80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a84:	bf16      	itet	ne
 8000a86:	4608      	movne	r0, r1
 8000a88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a8c:	4601      	movne	r1, r0
 8000a8e:	0242      	lsls	r2, r0, #9
 8000a90:	bf06      	itte	eq
 8000a92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a96:	ea90 0f01 	teqeq	r0, r1
 8000a9a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_ui2f>:
 8000aa0:	f04f 0300 	mov.w	r3, #0
 8000aa4:	e004      	b.n	8000ab0 <__aeabi_i2f+0x8>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_i2f>:
 8000aa8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000aac:	bf48      	it	mi
 8000aae:	4240      	negmi	r0, r0
 8000ab0:	ea5f 0c00 	movs.w	ip, r0
 8000ab4:	bf08      	it	eq
 8000ab6:	4770      	bxeq	lr
 8000ab8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000abc:	4601      	mov	r1, r0
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	e01c      	b.n	8000afe <__aeabi_l2f+0x2a>

08000ac4 <__aeabi_ul2f>:
 8000ac4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac8:	bf08      	it	eq
 8000aca:	4770      	bxeq	lr
 8000acc:	f04f 0300 	mov.w	r3, #0
 8000ad0:	e00a      	b.n	8000ae8 <__aeabi_l2f+0x14>
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_l2f>:
 8000ad4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad8:	bf08      	it	eq
 8000ada:	4770      	bxeq	lr
 8000adc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ae0:	d502      	bpl.n	8000ae8 <__aeabi_l2f+0x14>
 8000ae2:	4240      	negs	r0, r0
 8000ae4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae8:	ea5f 0c01 	movs.w	ip, r1
 8000aec:	bf02      	ittt	eq
 8000aee:	4684      	moveq	ip, r0
 8000af0:	4601      	moveq	r1, r0
 8000af2:	2000      	moveq	r0, #0
 8000af4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000af8:	bf08      	it	eq
 8000afa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000afe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b02:	fabc f28c 	clz	r2, ip
 8000b06:	3a08      	subs	r2, #8
 8000b08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b0c:	db10      	blt.n	8000b30 <__aeabi_l2f+0x5c>
 8000b0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b12:	4463      	add	r3, ip
 8000b14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b18:	f1c2 0220 	rsb	r2, r2, #32
 8000b1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b20:	fa20 f202 	lsr.w	r2, r0, r2
 8000b24:	eb43 0002 	adc.w	r0, r3, r2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f102 0220 	add.w	r2, r2, #32
 8000b34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b38:	f1c2 0220 	rsb	r2, r2, #32
 8000b3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b40:	fa21 f202 	lsr.w	r2, r1, r2
 8000b44:	eb43 0002 	adc.w	r0, r3, r2
 8000b48:	bf08      	it	eq
 8000b4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b4e:	4770      	bx	lr

08000b50 <__gesf2>:
 8000b50:	f04f 3cff 	mov.w	ip, #4294967295
 8000b54:	e006      	b.n	8000b64 <__cmpsf2+0x4>
 8000b56:	bf00      	nop

08000b58 <__lesf2>:
 8000b58:	f04f 0c01 	mov.w	ip, #1
 8000b5c:	e002      	b.n	8000b64 <__cmpsf2+0x4>
 8000b5e:	bf00      	nop

08000b60 <__cmpsf2>:
 8000b60:	f04f 0c01 	mov.w	ip, #1
 8000b64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b74:	bf18      	it	ne
 8000b76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b7a:	d011      	beq.n	8000ba0 <__cmpsf2+0x40>
 8000b7c:	b001      	add	sp, #4
 8000b7e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b82:	bf18      	it	ne
 8000b84:	ea90 0f01 	teqne	r0, r1
 8000b88:	bf58      	it	pl
 8000b8a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b8e:	bf88      	it	hi
 8000b90:	17c8      	asrhi	r0, r1, #31
 8000b92:	bf38      	it	cc
 8000b94:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b98:	bf18      	it	ne
 8000b9a:	f040 0001 	orrne.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba4:	d102      	bne.n	8000bac <__cmpsf2+0x4c>
 8000ba6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000baa:	d105      	bne.n	8000bb8 <__cmpsf2+0x58>
 8000bac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bb0:	d1e4      	bne.n	8000b7c <__cmpsf2+0x1c>
 8000bb2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000bb6:	d0e1      	beq.n	8000b7c <__cmpsf2+0x1c>
 8000bb8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_cfrcmple>:
 8000bc0:	4684      	mov	ip, r0
 8000bc2:	4608      	mov	r0, r1
 8000bc4:	4661      	mov	r1, ip
 8000bc6:	e7ff      	b.n	8000bc8 <__aeabi_cfcmpeq>

08000bc8 <__aeabi_cfcmpeq>:
 8000bc8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bca:	f7ff ffc9 	bl	8000b60 <__cmpsf2>
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	bf48      	it	mi
 8000bd2:	f110 0f00 	cmnmi.w	r0, #0
 8000bd6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bd8 <__aeabi_fcmpeq>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff fff4 	bl	8000bc8 <__aeabi_cfcmpeq>
 8000be0:	bf0c      	ite	eq
 8000be2:	2001      	moveq	r0, #1
 8000be4:	2000      	movne	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_fcmplt>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffea 	bl	8000bc8 <__aeabi_cfcmpeq>
 8000bf4:	bf34      	ite	cc
 8000bf6:	2001      	movcc	r0, #1
 8000bf8:	2000      	movcs	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fcmple>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffe0 	bl	8000bc8 <__aeabi_cfcmpeq>
 8000c08:	bf94      	ite	ls
 8000c0a:	2001      	movls	r0, #1
 8000c0c:	2000      	movhi	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <__aeabi_fcmpge>:
 8000c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c18:	f7ff ffd2 	bl	8000bc0 <__aeabi_cfrcmple>
 8000c1c:	bf94      	ite	ls
 8000c1e:	2001      	movls	r0, #1
 8000c20:	2000      	movhi	r0, #0
 8000c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c26:	bf00      	nop

08000c28 <__aeabi_fcmpgt>:
 8000c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c2c:	f7ff ffc8 	bl	8000bc0 <__aeabi_cfrcmple>
 8000c30:	bf34      	ite	cc
 8000c32:	2001      	movcc	r0, #1
 8000c34:	2000      	movcs	r0, #0
 8000c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3a:	bf00      	nop

08000c3c <__aeabi_f2iz>:
 8000c3c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c40:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c44:	d30f      	bcc.n	8000c66 <__aeabi_f2iz+0x2a>
 8000c46:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c4a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c4e:	d90d      	bls.n	8000c6c <__aeabi_f2iz+0x30>
 8000c50:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c58:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c5c:	fa23 f002 	lsr.w	r0, r3, r2
 8000c60:	bf18      	it	ne
 8000c62:	4240      	negne	r0, r0
 8000c64:	4770      	bx	lr
 8000c66:	f04f 0000 	mov.w	r0, #0
 8000c6a:	4770      	bx	lr
 8000c6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c70:	d101      	bne.n	8000c76 <__aeabi_f2iz+0x3a>
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	d105      	bne.n	8000c82 <__aeabi_f2iz+0x46>
 8000c76:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c7a:	bf08      	it	eq
 8000c7c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f04f 0000 	mov.w	r0, #0
 8000c86:	4770      	bx	lr

08000c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8e:	f001 f977 	bl	8001f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c92:	f000 f899 	bl	8000dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c96:	f000 f96b 	bl	8000f70 <MX_GPIO_Init>
  MX_CAN_Init();
 8000c9a:	f000 f8db 	bl	8000e54 <MX_CAN_Init>
  MX_I2C1_Init();
 8000c9e:	f000 f90f 	bl	8000ec0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ca2:	f000 f93b 	bl	8000f1c <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive(&huart1, &receivedData, 1, HAL_MAX_DELAY);
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	2201      	movs	r2, #1
 8000cac:	493c      	ldr	r1, [pc, #240]	; (8000da0 <main+0x118>)
 8000cae:	483d      	ldr	r0, [pc, #244]	; (8000da4 <main+0x11c>)
 8000cb0:	f003 ffd5 	bl	8004c5e <HAL_UART_Receive>

	     if (receivedData == 'A')
 8000cb4:	4b3a      	ldr	r3, [pc, #232]	; (8000da0 <main+0x118>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b41      	cmp	r3, #65	; 0x41
 8000cba:	d131      	bne.n	8000d20 <main+0x98>
	     {
	     	Read_ADS1115(AdcValues,12);
 8000cbc:	210c      	movs	r1, #12
 8000cbe:	483a      	ldr	r0, [pc, #232]	; (8000da8 <main+0x120>)
 8000cc0:	f000 f986 	bl	8000fd0 <Read_ADS1115>
	     	 for (int i = 0; i < 12; i++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	e026      	b.n	8000d18 <main+0x90>
	     	    {
	     	        value = AdcValues[i];
 8000cca:	4a37      	ldr	r2, [pc, #220]	; (8000da8 <main+0x120>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd2:	4a36      	ldr	r2, [pc, #216]	; (8000dac <main+0x124>)
 8000cd4:	6013      	str	r3, [r2, #0]


	     	        // Int değeri byte dizisine dönüştür
	     	        bytesToSend[0] = (value >> 24) & 0xFF;
 8000cd6:	4b35      	ldr	r3, [pc, #212]	; (8000dac <main+0x124>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	0e1b      	lsrs	r3, r3, #24
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <main+0x128>)
 8000ce0:	701a      	strb	r2, [r3, #0]
	     	        bytesToSend[1] = (value >> 16) & 0xFF;
 8000ce2:	4b32      	ldr	r3, [pc, #200]	; (8000dac <main+0x124>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	141b      	asrs	r3, r3, #16
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <main+0x128>)
 8000cec:	705a      	strb	r2, [r3, #1]
	     	        bytesToSend[2] = (value >> 8) & 0xFF;
 8000cee:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <main+0x124>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	121b      	asrs	r3, r3, #8
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <main+0x128>)
 8000cf8:	709a      	strb	r2, [r3, #2]
	     	        bytesToSend[3] = value & 0xFF;
 8000cfa:	4b2c      	ldr	r3, [pc, #176]	; (8000dac <main+0x124>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	4b2b      	ldr	r3, [pc, #172]	; (8000db0 <main+0x128>)
 8000d02:	70da      	strb	r2, [r3, #3]

	     	        // Byte dizisini UART üzerinden gönder
	     	        HAL_UART_Transmit(&huart1, bytesToSend, sizeof(bytesToSend), HAL_MAX_DELAY);
 8000d04:	f04f 33ff 	mov.w	r3, #4294967295
 8000d08:	2204      	movs	r2, #4
 8000d0a:	4929      	ldr	r1, [pc, #164]	; (8000db0 <main+0x128>)
 8000d0c:	4825      	ldr	r0, [pc, #148]	; (8000da4 <main+0x11c>)
 8000d0e:	f003 ff23 	bl	8004b58 <HAL_UART_Transmit>
	     	 for (int i = 0; i < 12; i++)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3301      	adds	r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b0b      	cmp	r3, #11
 8000d1c:	ddd5      	ble.n	8000cca <main+0x42>
 8000d1e:	e7c2      	b.n	8000ca6 <main+0x1e>
	     	    }
	     }
	     else  if (receivedData == 'C')
 8000d20:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <main+0x118>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b43      	cmp	r3, #67	; 0x43
 8000d26:	d12f      	bne.n	8000d88 <main+0x100>
	     {
	    	 CAN_Filter_Config();
 8000d28:	f000 fef8 	bl	8001b1c <CAN_Filter_Config>

	    	   	if(HAL_CAN_ActivateNotification(&hcan,CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_BUSOFF)!= HAL_OK)
 8000d2c:	f240 4103 	movw	r1, #1027	; 0x403
 8000d30:	4820      	ldr	r0, [pc, #128]	; (8000db4 <main+0x12c>)
 8000d32:	f001 fda3 	bl	800287c <HAL_CAN_ActivateNotification>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <main+0xb8>
	    	   	{
	    	   			Error_Handler();
 8000d3c:	f000 ff9a 	bl	8001c74 <Error_Handler>
	    	   	}


	    	   	if( HAL_CAN_Start(&hcan) != HAL_OK)
 8000d40:	481c      	ldr	r0, [pc, #112]	; (8000db4 <main+0x12c>)
 8000d42:	f001 fb67 	bl	8002414 <HAL_CAN_Start>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <main+0xc8>
	    	   	{
	    	   		Error_Handler();
 8000d4c:	f000 ff92 	bl	8001c74 <Error_Handler>
	    	   	}

		 		HAL_UART_Transmit(&huart1, (uint8_t *)"CAN TEST OK\r\n", 13, HAL_MAX_DELAY);
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295
 8000d54:	220d      	movs	r2, #13
 8000d56:	4918      	ldr	r1, [pc, #96]	; (8000db8 <main+0x130>)
 8000d58:	4812      	ldr	r0, [pc, #72]	; (8000da4 <main+0x11c>)
 8000d5a:	f003 fefd 	bl	8004b58 <HAL_UART_Transmit>


	    	   	while(CANOK == 0 && counter<50)
 8000d5e:	e00a      	b.n	8000d76 <main+0xee>
	    	   	{
	    	   		CAN1_Tx();
 8000d60:	f000 feb4 	bl	8001acc <CAN1_Tx>
	    	   		HAL_Delay(1000);
 8000d64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d68:	f001 f96c 	bl	8002044 <HAL_Delay>
	    	   		counter++;
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <main+0x134>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3301      	adds	r3, #1
 8000d72:	4a12      	ldr	r2, [pc, #72]	; (8000dbc <main+0x134>)
 8000d74:	6013      	str	r3, [r2, #0]
	    	   	while(CANOK == 0 && counter<50)
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <main+0x138>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d193      	bne.n	8000ca6 <main+0x1e>
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <main+0x134>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b31      	cmp	r3, #49	; 0x31
 8000d84:	ddec      	ble.n	8000d60 <main+0xd8>
 8000d86:	e78e      	b.n	8000ca6 <main+0x1e>
	    	   	}

	     }
	     else if(receivedData == 'B')
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <main+0x118>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b42      	cmp	r3, #66	; 0x42
 8000d8e:	d18a      	bne.n	8000ca6 <main+0x1e>
	     {
	 		HAL_UART_Transmit(&huart1, (uint8_t *)"CIHAZ BEKLEME MODUNDADIR\r\n", 26, HAL_MAX_DELAY);
 8000d90:	f04f 33ff 	mov.w	r3, #4294967295
 8000d94:	221a      	movs	r2, #26
 8000d96:	490b      	ldr	r1, [pc, #44]	; (8000dc4 <main+0x13c>)
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <main+0x11c>)
 8000d9a:	f003 fedd 	bl	8004b58 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, &receivedData, 1, HAL_MAX_DELAY);
 8000d9e:	e782      	b.n	8000ca6 <main+0x1e>
 8000da0:	20000120 	.word	0x20000120
 8000da4:	200000a4 	.word	0x200000a4
 8000da8:	200000f0 	.word	0x200000f0
 8000dac:	2000012c 	.word	0x2000012c
 8000db0:	20000130 	.word	0x20000130
 8000db4:	20000028 	.word	0x20000028
 8000db8:	08004fec 	.word	0x08004fec
 8000dbc:	20000154 	.word	0x20000154
 8000dc0:	20000150 	.word	0x20000150
 8000dc4:	08004ffc 	.word	0x08004ffc

08000dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b090      	sub	sp, #64	; 0x40
 8000dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dce:	f107 0318 	add.w	r3, r7, #24
 8000dd2:	2228      	movs	r2, #40	; 0x28
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f004 f8f4 	bl	8004fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e06:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0c:	f107 0318 	add.w	r3, r7, #24
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 fa41 	bl	8004298 <HAL_RCC_OscConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e1c:	f000 ff2a 	bl	8001c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e20:	230f      	movs	r3, #15
 8000e22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e24:	2302      	movs	r3, #2
 8000e26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2102      	movs	r1, #2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 fcae 	bl	800479c <HAL_RCC_ClockConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e46:	f000 ff15 	bl	8001c74 <Error_Handler>
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3740      	adds	r7, #64	; 0x40
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e5a:	4a18      	ldr	r2, [pc, #96]	; (8000ebc <MX_CAN_Init+0x68>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e60:	2208      	movs	r2, #8
 8000e62:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e72:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e76:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000e7e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000ea4:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000ea6:	f001 f8f1 	bl	800208c <HAL_CAN_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000eb0:	f000 fee0 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000028 	.word	0x20000028
 8000ebc:	40006400 	.word	0x40006400

08000ec0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <MX_I2C1_Init+0x50>)
 8000ec6:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <MX_I2C1_Init+0x54>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_I2C1_Init+0x50>)
 8000ecc:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <MX_I2C1_Init+0x58>)
 8000ece:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_I2C1_Init+0x50>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_I2C1_Init+0x50>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_I2C1_Init+0x50>)
 8000ede:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ee2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <MX_I2C1_Init+0x50>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_I2C1_Init+0x50>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <MX_I2C1_Init+0x50>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_I2C1_Init+0x50>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000efc:	4804      	ldr	r0, [pc, #16]	; (8000f10 <MX_I2C1_Init+0x50>)
 8000efe:	f002 f997 	bl	8003230 <HAL_I2C_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f08:	f000 feb4 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000050 	.word	0x20000050
 8000f14:	40005400 	.word	0x40005400
 8000f18:	000186a0 	.word	0x000186a0

08000f1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_USART1_UART_Init+0x4c>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <MX_USART1_UART_Init+0x50>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <MX_USART1_UART_Init+0x4c>)
 8000f28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_USART1_UART_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_USART1_UART_Init+0x4c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <MX_USART1_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_USART1_UART_Init+0x4c>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <MX_USART1_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_USART1_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_USART1_UART_Init+0x4c>)
 8000f54:	f003 fdb0 	bl	8004ab8 <HAL_UART_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f5e:	f000 fe89 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200000a4 	.word	0x200000a4
 8000f6c:	40013800 	.word	0x40013800

08000f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_GPIO_Init+0x58>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	4a13      	ldr	r2, [pc, #76]	; (8000fc8 <MX_GPIO_Init+0x58>)
 8000f7c:	f043 0320 	orr.w	r3, r3, #32
 8000f80:	6193      	str	r3, [r2, #24]
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_GPIO_Init+0x58>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	f003 0320 	and.w	r3, r3, #32
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_GPIO_Init+0x58>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <MX_GPIO_Init+0x58>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	6193      	str	r3, [r2, #24]
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <MX_GPIO_Init+0x58>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MX_GPIO_Init+0x58>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <MX_GPIO_Init+0x58>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	6193      	str	r3, [r2, #24]
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <MX_GPIO_Init+0x58>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	00000000 	.word	0x00000000

08000fd0 <Read_ADS1115>:

/* USER CODE BEGIN 4 */

void  Read_ADS1115(int VoltageArray[], int length)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af02      	add	r7, sp, #8
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
	float voltage;
	int lastintValue;

    // channel 1 read
	unsigned char i2c_address= 0x90;
 8000fda:	2390      	movs	r3, #144	; 0x90
 8000fdc:	75fb      	strb	r3, [r7, #23]
	buffer[0]=0x01; // address pointer register: 01 -> config register
 8000fde:	4bb0      	ldr	r3, [pc, #704]	; (80012a0 <Read_ADS1115+0x2d0>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]
	buffer[1]=0xC2;
 8000fe4:	4bae      	ldr	r3, [pc, #696]	; (80012a0 <Read_ADS1115+0x2d0>)
 8000fe6:	22c2      	movs	r2, #194	; 0xc2
 8000fe8:	705a      	strb	r2, [r3, #1]
	buffer[2]=0x85;
 8000fea:	4bad      	ldr	r3, [pc, #692]	; (80012a0 <Read_ADS1115+0x2d0>)
 8000fec:	2285      	movs	r2, #133	; 0x85
 8000fee:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,3,100);
 8000ff0:	7dfb      	ldrb	r3, [r7, #23]
 8000ff2:	b299      	uxth	r1, r3
 8000ff4:	2364      	movs	r3, #100	; 0x64
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	4aa9      	ldr	r2, [pc, #676]	; (80012a0 <Read_ADS1115+0x2d0>)
 8000ffc:	48a9      	ldr	r0, [pc, #676]	; (80012a4 <Read_ADS1115+0x2d4>)
 8000ffe:	f002 fa5b 	bl	80034b8 <HAL_I2C_Master_Transmit>
	buffer[0]=0x00;
 8001002:	4ba7      	ldr	r3, [pc, #668]	; (80012a0 <Read_ADS1115+0x2d0>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8001008:	200a      	movs	r0, #10
 800100a:	f001 f81b 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,1,100);
 800100e:	7dfb      	ldrb	r3, [r7, #23]
 8001010:	b299      	uxth	r1, r3
 8001012:	2364      	movs	r3, #100	; 0x64
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	4aa1      	ldr	r2, [pc, #644]	; (80012a0 <Read_ADS1115+0x2d0>)
 800101a:	48a2      	ldr	r0, [pc, #648]	; (80012a4 <Read_ADS1115+0x2d4>)
 800101c:	f002 fa4c 	bl	80034b8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001020:	200a      	movs	r0, #10
 8001022:	f001 f80f 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,i2c_address+1, buffer,2,100);
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	b29b      	uxth	r3, r3
 800102a:	3301      	adds	r3, #1
 800102c:	b299      	uxth	r1, r3
 800102e:	2364      	movs	r3, #100	; 0x64
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2302      	movs	r3, #2
 8001034:	4a9a      	ldr	r2, [pc, #616]	; (80012a0 <Read_ADS1115+0x2d0>)
 8001036:	489b      	ldr	r0, [pc, #620]	; (80012a4 <Read_ADS1115+0x2d4>)
 8001038:	f002 fb3c 	bl	80036b4 <HAL_I2C_Master_Receive>
	data = (buffer[0]<<8) + buffer[1];
 800103c:	4b98      	ldr	r3, [pc, #608]	; (80012a0 <Read_ADS1115+0x2d0>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	4a97      	ldr	r2, [pc, #604]	; (80012a0 <Read_ADS1115+0x2d0>)
 8001044:	7852      	ldrb	r2, [r2, #1]
 8001046:	4413      	add	r3, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fd2d 	bl	8000aa8 <__aeabi_i2f>
 800104e:	4603      	mov	r3, r0
 8001050:	4a95      	ldr	r2, [pc, #596]	; (80012a8 <Read_ADS1115+0x2d8>)
 8001052:	6013      	str	r3, [r2, #0]
	if(data==0xFFFF) {data=0;}
 8001054:	4b94      	ldr	r3, [pc, #592]	; (80012a8 <Read_ADS1115+0x2d8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4994      	ldr	r1, [pc, #592]	; (80012ac <Read_ADS1115+0x2dc>)
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fdbc 	bl	8000bd8 <__aeabi_fcmpeq>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <Read_ADS1115+0x9e>
 8001066:	4b90      	ldr	r3, [pc, #576]	; (80012a8 <Read_ADS1115+0x2d8>)
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
	voltage = data*0.000125;
 800106e:	4b8e      	ldr	r3, [pc, #568]	; (80012a8 <Read_ADS1115+0x2d8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fbb6 	bl	80007e4 <__aeabi_f2d>
 8001078:	a387      	add	r3, pc, #540	; (adr r3, 8001298 <Read_ADS1115+0x2c8>)
 800107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107e:	f7ff f86f 	bl	8000160 <__aeabi_dmul>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff fc03 	bl	8000894 <__aeabi_d2f>
 800108e:	4603      	mov	r3, r0
 8001090:	613b      	str	r3, [r7, #16]
	lastintValue = 1000*voltage;
 8001092:	4987      	ldr	r1, [pc, #540]	; (80012b0 <Read_ADS1115+0x2e0>)
 8001094:	6938      	ldr	r0, [r7, #16]
 8001096:	f7ff f98d 	bl	80003b4 <__aeabi_fmul>
 800109a:	4603      	mov	r3, r0
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fdcd 	bl	8000c3c <__aeabi_f2iz>
 80010a2:	4603      	mov	r3, r0
 80010a4:	60fb      	str	r3, [r7, #12]
	VoltageArray[0] = lastintValue;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	601a      	str	r2, [r3, #0]
	int size = sizeof(voltage);
 80010ac:	2304      	movs	r3, #4
 80010ae:	60bb      	str	r3, [r7, #8]
	lastintValue = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
	HAL_Delay(20);
 80010b4:	2014      	movs	r0, #20
 80010b6:	f000 ffc5 	bl	8002044 <HAL_Delay>

	 // channel 2 read

	i2c_address= 0x90;
 80010ba:	2390      	movs	r3, #144	; 0x90
 80010bc:	75fb      	strb	r3, [r7, #23]
	buffer[0]=0x01; // address pointer register: 01 -> config register
 80010be:	4b78      	ldr	r3, [pc, #480]	; (80012a0 <Read_ADS1115+0x2d0>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	701a      	strb	r2, [r3, #0]
	buffer[1]=0xD2;
 80010c4:	4b76      	ldr	r3, [pc, #472]	; (80012a0 <Read_ADS1115+0x2d0>)
 80010c6:	22d2      	movs	r2, #210	; 0xd2
 80010c8:	705a      	strb	r2, [r3, #1]
		buffer[2]=0x85;
 80010ca:	4b75      	ldr	r3, [pc, #468]	; (80012a0 <Read_ADS1115+0x2d0>)
 80010cc:	2285      	movs	r2, #133	; 0x85
 80010ce:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,3,100);
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	b299      	uxth	r1, r3
 80010d4:	2364      	movs	r3, #100	; 0x64
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2303      	movs	r3, #3
 80010da:	4a71      	ldr	r2, [pc, #452]	; (80012a0 <Read_ADS1115+0x2d0>)
 80010dc:	4871      	ldr	r0, [pc, #452]	; (80012a4 <Read_ADS1115+0x2d4>)
 80010de:	f002 f9eb 	bl	80034b8 <HAL_I2C_Master_Transmit>
	buffer[0]=0x00;
 80010e2:	4b6f      	ldr	r3, [pc, #444]	; (80012a0 <Read_ADS1115+0x2d0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 80010e8:	200a      	movs	r0, #10
 80010ea:	f000 ffab 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,1,100);
 80010ee:	7dfb      	ldrb	r3, [r7, #23]
 80010f0:	b299      	uxth	r1, r3
 80010f2:	2364      	movs	r3, #100	; 0x64
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	4a69      	ldr	r2, [pc, #420]	; (80012a0 <Read_ADS1115+0x2d0>)
 80010fa:	486a      	ldr	r0, [pc, #424]	; (80012a4 <Read_ADS1115+0x2d4>)
 80010fc:	f002 f9dc 	bl	80034b8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001100:	200a      	movs	r0, #10
 8001102:	f000 ff9f 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,i2c_address+1, buffer,2,100);
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	b29b      	uxth	r3, r3
 800110a:	3301      	adds	r3, #1
 800110c:	b299      	uxth	r1, r3
 800110e:	2364      	movs	r3, #100	; 0x64
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2302      	movs	r3, #2
 8001114:	4a62      	ldr	r2, [pc, #392]	; (80012a0 <Read_ADS1115+0x2d0>)
 8001116:	4863      	ldr	r0, [pc, #396]	; (80012a4 <Read_ADS1115+0x2d4>)
 8001118:	f002 facc 	bl	80036b4 <HAL_I2C_Master_Receive>
	data = (buffer[0]<<8) + buffer[1];
 800111c:	4b60      	ldr	r3, [pc, #384]	; (80012a0 <Read_ADS1115+0x2d0>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	4a5f      	ldr	r2, [pc, #380]	; (80012a0 <Read_ADS1115+0x2d0>)
 8001124:	7852      	ldrb	r2, [r2, #1]
 8001126:	4413      	add	r3, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fcbd 	bl	8000aa8 <__aeabi_i2f>
 800112e:	4603      	mov	r3, r0
 8001130:	4a5d      	ldr	r2, [pc, #372]	; (80012a8 <Read_ADS1115+0x2d8>)
 8001132:	6013      	str	r3, [r2, #0]
	if(data==0xFFFF) {data=0;}
 8001134:	4b5c      	ldr	r3, [pc, #368]	; (80012a8 <Read_ADS1115+0x2d8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	495c      	ldr	r1, [pc, #368]	; (80012ac <Read_ADS1115+0x2dc>)
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fd4c 	bl	8000bd8 <__aeabi_fcmpeq>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <Read_ADS1115+0x17e>
 8001146:	4b58      	ldr	r3, [pc, #352]	; (80012a8 <Read_ADS1115+0x2d8>)
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
	voltage = data*0.000125;
 800114e:	4b56      	ldr	r3, [pc, #344]	; (80012a8 <Read_ADS1115+0x2d8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fb46 	bl	80007e4 <__aeabi_f2d>
 8001158:	a34f      	add	r3, pc, #316	; (adr r3, 8001298 <Read_ADS1115+0x2c8>)
 800115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115e:	f7fe ffff 	bl	8000160 <__aeabi_dmul>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f7ff fb93 	bl	8000894 <__aeabi_d2f>
 800116e:	4603      	mov	r3, r0
 8001170:	613b      	str	r3, [r7, #16]
	lastintValue = 1000*voltage;
 8001172:	494f      	ldr	r1, [pc, #316]	; (80012b0 <Read_ADS1115+0x2e0>)
 8001174:	6938      	ldr	r0, [r7, #16]
 8001176:	f7ff f91d 	bl	80003b4 <__aeabi_fmul>
 800117a:	4603      	mov	r3, r0
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fd5d 	bl	8000c3c <__aeabi_f2iz>
 8001182:	4603      	mov	r3, r0
 8001184:	60fb      	str	r3, [r7, #12]
		VoltageArray[1] = lastintValue;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3304      	adds	r3, #4
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	601a      	str	r2, [r3, #0]
		lastintValue = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
		HAL_Delay(20);
 8001192:	2014      	movs	r0, #20
 8001194:	f000 ff56 	bl	8002044 <HAL_Delay>


		 // channel 3 read
	i2c_address= 0x90;
 8001198:	2390      	movs	r3, #144	; 0x90
 800119a:	75fb      	strb	r3, [r7, #23]
	buffer[0]=0x01; // address pointer register: 01 -> config register
 800119c:	4b40      	ldr	r3, [pc, #256]	; (80012a0 <Read_ADS1115+0x2d0>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
	buffer[1]=0xE2;
 80011a2:	4b3f      	ldr	r3, [pc, #252]	; (80012a0 <Read_ADS1115+0x2d0>)
 80011a4:	22e2      	movs	r2, #226	; 0xe2
 80011a6:	705a      	strb	r2, [r3, #1]
	buffer[2]=0x85;
 80011a8:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <Read_ADS1115+0x2d0>)
 80011aa:	2285      	movs	r2, #133	; 0x85
 80011ac:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,3,100);
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	b299      	uxth	r1, r3
 80011b2:	2364      	movs	r3, #100	; 0x64
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2303      	movs	r3, #3
 80011b8:	4a39      	ldr	r2, [pc, #228]	; (80012a0 <Read_ADS1115+0x2d0>)
 80011ba:	483a      	ldr	r0, [pc, #232]	; (80012a4 <Read_ADS1115+0x2d4>)
 80011bc:	f002 f97c 	bl	80034b8 <HAL_I2C_Master_Transmit>
	buffer[0]=0x00;
 80011c0:	4b37      	ldr	r3, [pc, #220]	; (80012a0 <Read_ADS1115+0x2d0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 80011c6:	200a      	movs	r0, #10
 80011c8:	f000 ff3c 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,1,100);
 80011cc:	7dfb      	ldrb	r3, [r7, #23]
 80011ce:	b299      	uxth	r1, r3
 80011d0:	2364      	movs	r3, #100	; 0x64
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2301      	movs	r3, #1
 80011d6:	4a32      	ldr	r2, [pc, #200]	; (80012a0 <Read_ADS1115+0x2d0>)
 80011d8:	4832      	ldr	r0, [pc, #200]	; (80012a4 <Read_ADS1115+0x2d4>)
 80011da:	f002 f96d 	bl	80034b8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80011de:	200a      	movs	r0, #10
 80011e0:	f000 ff30 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,i2c_address+1, buffer,2,100);
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	3301      	adds	r3, #1
 80011ea:	b299      	uxth	r1, r3
 80011ec:	2364      	movs	r3, #100	; 0x64
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2302      	movs	r3, #2
 80011f2:	4a2b      	ldr	r2, [pc, #172]	; (80012a0 <Read_ADS1115+0x2d0>)
 80011f4:	482b      	ldr	r0, [pc, #172]	; (80012a4 <Read_ADS1115+0x2d4>)
 80011f6:	f002 fa5d 	bl	80036b4 <HAL_I2C_Master_Receive>
	data = (buffer[0]<<8) + buffer[1];
 80011fa:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <Read_ADS1115+0x2d0>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	4a27      	ldr	r2, [pc, #156]	; (80012a0 <Read_ADS1115+0x2d0>)
 8001202:	7852      	ldrb	r2, [r2, #1]
 8001204:	4413      	add	r3, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fc4e 	bl	8000aa8 <__aeabi_i2f>
 800120c:	4603      	mov	r3, r0
 800120e:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <Read_ADS1115+0x2d8>)
 8001210:	6013      	str	r3, [r2, #0]
	if(data==0xFFFF) {data=0;}
 8001212:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <Read_ADS1115+0x2d8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4925      	ldr	r1, [pc, #148]	; (80012ac <Read_ADS1115+0x2dc>)
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fcdd 	bl	8000bd8 <__aeabi_fcmpeq>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <Read_ADS1115+0x25c>
 8001224:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <Read_ADS1115+0x2d8>)
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
	voltage = data*0.000125;
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <Read_ADS1115+0x2d8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fad7 	bl	80007e4 <__aeabi_f2d>
 8001236:	a318      	add	r3, pc, #96	; (adr r3, 8001298 <Read_ADS1115+0x2c8>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7fe ff90 	bl	8000160 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	f7ff fb24 	bl	8000894 <__aeabi_d2f>
 800124c:	4603      	mov	r3, r0
 800124e:	613b      	str	r3, [r7, #16]
	lastintValue = 1000*voltage;
 8001250:	4917      	ldr	r1, [pc, #92]	; (80012b0 <Read_ADS1115+0x2e0>)
 8001252:	6938      	ldr	r0, [r7, #16]
 8001254:	f7ff f8ae 	bl	80003b4 <__aeabi_fmul>
 8001258:	4603      	mov	r3, r0
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fcee 	bl	8000c3c <__aeabi_f2iz>
 8001260:	4603      	mov	r3, r0
 8001262:	60fb      	str	r3, [r7, #12]
		VoltageArray[2] = lastintValue;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3308      	adds	r3, #8
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	601a      	str	r2, [r3, #0]
		lastintValue = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
		HAL_Delay(20);
 8001270:	2014      	movs	r0, #20
 8001272:	f000 fee7 	bl	8002044 <HAL_Delay>

		 // channel 4 read
	i2c_address= 0x90;
 8001276:	2390      	movs	r3, #144	; 0x90
 8001278:	75fb      	strb	r3, [r7, #23]
	buffer[0]=0x01; // address pointer register: 01 -> config register
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <Read_ADS1115+0x2d0>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
	buffer[1]=0xF2;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <Read_ADS1115+0x2d0>)
 8001282:	22f2      	movs	r2, #242	; 0xf2
 8001284:	705a      	strb	r2, [r3, #1]
	buffer[2]=0x85;
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <Read_ADS1115+0x2d0>)
 8001288:	2285      	movs	r2, #133	; 0x85
 800128a:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,3,100);
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	b299      	uxth	r1, r3
 8001290:	2364      	movs	r3, #100	; 0x64
 8001292:	e00f      	b.n	80012b4 <Read_ADS1115+0x2e4>
 8001294:	f3af 8000 	nop.w
 8001298:	d2f1a9fc 	.word	0xd2f1a9fc
 800129c:	3f20624d 	.word	0x3f20624d
 80012a0:	20000124 	.word	0x20000124
 80012a4:	20000050 	.word	0x20000050
 80012a8:	200000ec 	.word	0x200000ec
 80012ac:	477fff00 	.word	0x477fff00
 80012b0:	447a0000 	.word	0x447a0000
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2303      	movs	r3, #3
 80012b8:	4aaf      	ldr	r2, [pc, #700]	; (8001578 <Read_ADS1115+0x5a8>)
 80012ba:	48b0      	ldr	r0, [pc, #704]	; (800157c <Read_ADS1115+0x5ac>)
 80012bc:	f002 f8fc 	bl	80034b8 <HAL_I2C_Master_Transmit>
	buffer[0]=0x00;
 80012c0:	4bad      	ldr	r3, [pc, #692]	; (8001578 <Read_ADS1115+0x5a8>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 80012c6:	200a      	movs	r0, #10
 80012c8:	f000 febc 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,1,100);
 80012cc:	7dfb      	ldrb	r3, [r7, #23]
 80012ce:	b299      	uxth	r1, r3
 80012d0:	2364      	movs	r3, #100	; 0x64
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2301      	movs	r3, #1
 80012d6:	4aa8      	ldr	r2, [pc, #672]	; (8001578 <Read_ADS1115+0x5a8>)
 80012d8:	48a8      	ldr	r0, [pc, #672]	; (800157c <Read_ADS1115+0x5ac>)
 80012da:	f002 f8ed 	bl	80034b8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80012de:	200a      	movs	r0, #10
 80012e0:	f000 feb0 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,i2c_address+1, buffer,2,100);
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	3301      	adds	r3, #1
 80012ea:	b299      	uxth	r1, r3
 80012ec:	2364      	movs	r3, #100	; 0x64
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2302      	movs	r3, #2
 80012f2:	4aa1      	ldr	r2, [pc, #644]	; (8001578 <Read_ADS1115+0x5a8>)
 80012f4:	48a1      	ldr	r0, [pc, #644]	; (800157c <Read_ADS1115+0x5ac>)
 80012f6:	f002 f9dd 	bl	80036b4 <HAL_I2C_Master_Receive>
	data = (buffer[0]<<8) + buffer[1];
 80012fa:	4b9f      	ldr	r3, [pc, #636]	; (8001578 <Read_ADS1115+0x5a8>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	4a9d      	ldr	r2, [pc, #628]	; (8001578 <Read_ADS1115+0x5a8>)
 8001302:	7852      	ldrb	r2, [r2, #1]
 8001304:	4413      	add	r3, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fbce 	bl	8000aa8 <__aeabi_i2f>
 800130c:	4603      	mov	r3, r0
 800130e:	4a9c      	ldr	r2, [pc, #624]	; (8001580 <Read_ADS1115+0x5b0>)
 8001310:	6013      	str	r3, [r2, #0]
	if(data==0xFFFF) {data=0;}
 8001312:	4b9b      	ldr	r3, [pc, #620]	; (8001580 <Read_ADS1115+0x5b0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	499b      	ldr	r1, [pc, #620]	; (8001584 <Read_ADS1115+0x5b4>)
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fc5d 	bl	8000bd8 <__aeabi_fcmpeq>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <Read_ADS1115+0x35c>
 8001324:	4b96      	ldr	r3, [pc, #600]	; (8001580 <Read_ADS1115+0x5b0>)
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
	voltage = data*0.000125;
 800132c:	4b94      	ldr	r3, [pc, #592]	; (8001580 <Read_ADS1115+0x5b0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fa57 	bl	80007e4 <__aeabi_f2d>
 8001336:	a38e      	add	r3, pc, #568	; (adr r3, 8001570 <Read_ADS1115+0x5a0>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7fe ff10 	bl	8000160 <__aeabi_dmul>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff faa4 	bl	8000894 <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	613b      	str	r3, [r7, #16]
	lastintValue = 1000*voltage;
 8001350:	498d      	ldr	r1, [pc, #564]	; (8001588 <Read_ADS1115+0x5b8>)
 8001352:	6938      	ldr	r0, [r7, #16]
 8001354:	f7ff f82e 	bl	80003b4 <__aeabi_fmul>
 8001358:	4603      	mov	r3, r0
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fc6e 	bl	8000c3c <__aeabi_f2iz>
 8001360:	4603      	mov	r3, r0
 8001362:	60fb      	str	r3, [r7, #12]
		VoltageArray[3] = lastintValue;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	330c      	adds	r3, #12
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	601a      	str	r2, [r3, #0]
		lastintValue = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
		HAL_Delay(10);
 8001370:	200a      	movs	r0, #10
 8001372:	f000 fe67 	bl	8002044 <HAL_Delay>


		 // channel 5 read
	i2c_address= 0x92;
 8001376:	2392      	movs	r3, #146	; 0x92
 8001378:	75fb      	strb	r3, [r7, #23]
	buffer[0]=0x01; // address pointer register: 01 -> config register
 800137a:	4b7f      	ldr	r3, [pc, #508]	; (8001578 <Read_ADS1115+0x5a8>)
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]
	buffer[1]=0xC2;
 8001380:	4b7d      	ldr	r3, [pc, #500]	; (8001578 <Read_ADS1115+0x5a8>)
 8001382:	22c2      	movs	r2, #194	; 0xc2
 8001384:	705a      	strb	r2, [r3, #1]
	buffer[2]=0x85;
 8001386:	4b7c      	ldr	r3, [pc, #496]	; (8001578 <Read_ADS1115+0x5a8>)
 8001388:	2285      	movs	r2, #133	; 0x85
 800138a:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,3,100);
 800138c:	7dfb      	ldrb	r3, [r7, #23]
 800138e:	b299      	uxth	r1, r3
 8001390:	2364      	movs	r3, #100	; 0x64
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2303      	movs	r3, #3
 8001396:	4a78      	ldr	r2, [pc, #480]	; (8001578 <Read_ADS1115+0x5a8>)
 8001398:	4878      	ldr	r0, [pc, #480]	; (800157c <Read_ADS1115+0x5ac>)
 800139a:	f002 f88d 	bl	80034b8 <HAL_I2C_Master_Transmit>
	buffer[0]=0x00;
 800139e:	4b76      	ldr	r3, [pc, #472]	; (8001578 <Read_ADS1115+0x5a8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 80013a4:	200a      	movs	r0, #10
 80013a6:	f000 fe4d 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,1,100);
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
 80013ac:	b299      	uxth	r1, r3
 80013ae:	2364      	movs	r3, #100	; 0x64
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2301      	movs	r3, #1
 80013b4:	4a70      	ldr	r2, [pc, #448]	; (8001578 <Read_ADS1115+0x5a8>)
 80013b6:	4871      	ldr	r0, [pc, #452]	; (800157c <Read_ADS1115+0x5ac>)
 80013b8:	f002 f87e 	bl	80034b8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80013bc:	200a      	movs	r0, #10
 80013be:	f000 fe41 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,i2c_address+1, buffer,2,100);
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	3301      	adds	r3, #1
 80013c8:	b299      	uxth	r1, r3
 80013ca:	2364      	movs	r3, #100	; 0x64
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2302      	movs	r3, #2
 80013d0:	4a69      	ldr	r2, [pc, #420]	; (8001578 <Read_ADS1115+0x5a8>)
 80013d2:	486a      	ldr	r0, [pc, #424]	; (800157c <Read_ADS1115+0x5ac>)
 80013d4:	f002 f96e 	bl	80036b4 <HAL_I2C_Master_Receive>
	data = (buffer[0]<<8) + buffer[1];
 80013d8:	4b67      	ldr	r3, [pc, #412]	; (8001578 <Read_ADS1115+0x5a8>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	4a66      	ldr	r2, [pc, #408]	; (8001578 <Read_ADS1115+0x5a8>)
 80013e0:	7852      	ldrb	r2, [r2, #1]
 80013e2:	4413      	add	r3, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fb5f 	bl	8000aa8 <__aeabi_i2f>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a64      	ldr	r2, [pc, #400]	; (8001580 <Read_ADS1115+0x5b0>)
 80013ee:	6013      	str	r3, [r2, #0]
	if(data==0xFFFF) {data=0;}
 80013f0:	4b63      	ldr	r3, [pc, #396]	; (8001580 <Read_ADS1115+0x5b0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4963      	ldr	r1, [pc, #396]	; (8001584 <Read_ADS1115+0x5b4>)
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fbee 	bl	8000bd8 <__aeabi_fcmpeq>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <Read_ADS1115+0x43a>
 8001402:	4b5f      	ldr	r3, [pc, #380]	; (8001580 <Read_ADS1115+0x5b0>)
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
	voltage = data*0.000125;
 800140a:	4b5d      	ldr	r3, [pc, #372]	; (8001580 <Read_ADS1115+0x5b0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f9e8 	bl	80007e4 <__aeabi_f2d>
 8001414:	a356      	add	r3, pc, #344	; (adr r3, 8001570 <Read_ADS1115+0x5a0>)
 8001416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141a:	f7fe fea1 	bl	8000160 <__aeabi_dmul>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	f7ff fa35 	bl	8000894 <__aeabi_d2f>
 800142a:	4603      	mov	r3, r0
 800142c:	613b      	str	r3, [r7, #16]
	lastintValue = 1000*voltage;
 800142e:	4956      	ldr	r1, [pc, #344]	; (8001588 <Read_ADS1115+0x5b8>)
 8001430:	6938      	ldr	r0, [r7, #16]
 8001432:	f7fe ffbf 	bl	80003b4 <__aeabi_fmul>
 8001436:	4603      	mov	r3, r0
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fbff 	bl	8000c3c <__aeabi_f2iz>
 800143e:	4603      	mov	r3, r0
 8001440:	60fb      	str	r3, [r7, #12]
		VoltageArray[4] = lastintValue;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3310      	adds	r3, #16
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	601a      	str	r2, [r3, #0]
		lastintValue = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
		HAL_Delay(20);
 800144e:	2014      	movs	r0, #20
 8001450:	f000 fdf8 	bl	8002044 <HAL_Delay>

	 // channel 6 read
	i2c_address= 0x92;
 8001454:	2392      	movs	r3, #146	; 0x92
 8001456:	75fb      	strb	r3, [r7, #23]
	buffer[0]=0x01; // address pointer register: 01 -> config register
 8001458:	4b47      	ldr	r3, [pc, #284]	; (8001578 <Read_ADS1115+0x5a8>)
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
	buffer[1]=0xD2;
 800145e:	4b46      	ldr	r3, [pc, #280]	; (8001578 <Read_ADS1115+0x5a8>)
 8001460:	22d2      	movs	r2, #210	; 0xd2
 8001462:	705a      	strb	r2, [r3, #1]
	buffer[2]=0x85;
 8001464:	4b44      	ldr	r3, [pc, #272]	; (8001578 <Read_ADS1115+0x5a8>)
 8001466:	2285      	movs	r2, #133	; 0x85
 8001468:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,3,100);
 800146a:	7dfb      	ldrb	r3, [r7, #23]
 800146c:	b299      	uxth	r1, r3
 800146e:	2364      	movs	r3, #100	; 0x64
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2303      	movs	r3, #3
 8001474:	4a40      	ldr	r2, [pc, #256]	; (8001578 <Read_ADS1115+0x5a8>)
 8001476:	4841      	ldr	r0, [pc, #260]	; (800157c <Read_ADS1115+0x5ac>)
 8001478:	f002 f81e 	bl	80034b8 <HAL_I2C_Master_Transmit>
	buffer[0]=0x00;
 800147c:	4b3e      	ldr	r3, [pc, #248]	; (8001578 <Read_ADS1115+0x5a8>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8001482:	200a      	movs	r0, #10
 8001484:	f000 fdde 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,1,100);
 8001488:	7dfb      	ldrb	r3, [r7, #23]
 800148a:	b299      	uxth	r1, r3
 800148c:	2364      	movs	r3, #100	; 0x64
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2301      	movs	r3, #1
 8001492:	4a39      	ldr	r2, [pc, #228]	; (8001578 <Read_ADS1115+0x5a8>)
 8001494:	4839      	ldr	r0, [pc, #228]	; (800157c <Read_ADS1115+0x5ac>)
 8001496:	f002 f80f 	bl	80034b8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 800149a:	200a      	movs	r0, #10
 800149c:	f000 fdd2 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,i2c_address+1, buffer,2,100);
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	3301      	adds	r3, #1
 80014a6:	b299      	uxth	r1, r3
 80014a8:	2364      	movs	r3, #100	; 0x64
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2302      	movs	r3, #2
 80014ae:	4a32      	ldr	r2, [pc, #200]	; (8001578 <Read_ADS1115+0x5a8>)
 80014b0:	4832      	ldr	r0, [pc, #200]	; (800157c <Read_ADS1115+0x5ac>)
 80014b2:	f002 f8ff 	bl	80036b4 <HAL_I2C_Master_Receive>
	data = (buffer[0]<<8) + buffer[1];
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <Read_ADS1115+0x5a8>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	4a2e      	ldr	r2, [pc, #184]	; (8001578 <Read_ADS1115+0x5a8>)
 80014be:	7852      	ldrb	r2, [r2, #1]
 80014c0:	4413      	add	r3, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff faf0 	bl	8000aa8 <__aeabi_i2f>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4a2d      	ldr	r2, [pc, #180]	; (8001580 <Read_ADS1115+0x5b0>)
 80014cc:	6013      	str	r3, [r2, #0]
	if(data==0xFFFF) {data=0;}
 80014ce:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <Read_ADS1115+0x5b0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	492c      	ldr	r1, [pc, #176]	; (8001584 <Read_ADS1115+0x5b4>)
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fb7f 	bl	8000bd8 <__aeabi_fcmpeq>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <Read_ADS1115+0x518>
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <Read_ADS1115+0x5b0>)
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
	voltage = data*0.000125;
 80014e8:	4b25      	ldr	r3, [pc, #148]	; (8001580 <Read_ADS1115+0x5b0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f979 	bl	80007e4 <__aeabi_f2d>
 80014f2:	a31f      	add	r3, pc, #124	; (adr r3, 8001570 <Read_ADS1115+0x5a0>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7fe fe32 	bl	8000160 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f7ff f9c6 	bl	8000894 <__aeabi_d2f>
 8001508:	4603      	mov	r3, r0
 800150a:	613b      	str	r3, [r7, #16]
	lastintValue = 1000*voltage;
 800150c:	491e      	ldr	r1, [pc, #120]	; (8001588 <Read_ADS1115+0x5b8>)
 800150e:	6938      	ldr	r0, [r7, #16]
 8001510:	f7fe ff50 	bl	80003b4 <__aeabi_fmul>
 8001514:	4603      	mov	r3, r0
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fb90 	bl	8000c3c <__aeabi_f2iz>
 800151c:	4603      	mov	r3, r0
 800151e:	60fb      	str	r3, [r7, #12]
		VoltageArray[5] = lastintValue;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3314      	adds	r3, #20
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	601a      	str	r2, [r3, #0]
		lastintValue = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
		HAL_Delay(20);
 800152c:	2014      	movs	r0, #20
 800152e:	f000 fd89 	bl	8002044 <HAL_Delay>

	 // channel 7 read
	i2c_address= 0x92;
 8001532:	2392      	movs	r3, #146	; 0x92
 8001534:	75fb      	strb	r3, [r7, #23]
	buffer[0]=0x01; // address pointer register: 01 -> config register
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <Read_ADS1115+0x5a8>)
 8001538:	2201      	movs	r2, #1
 800153a:	701a      	strb	r2, [r3, #0]
	buffer[1]=0xE2;
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <Read_ADS1115+0x5a8>)
 800153e:	22e2      	movs	r2, #226	; 0xe2
 8001540:	705a      	strb	r2, [r3, #1]
	buffer[2]=0x85;
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <Read_ADS1115+0x5a8>)
 8001544:	2285      	movs	r2, #133	; 0x85
 8001546:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,3,100);
 8001548:	7dfb      	ldrb	r3, [r7, #23]
 800154a:	b299      	uxth	r1, r3
 800154c:	2364      	movs	r3, #100	; 0x64
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2303      	movs	r3, #3
 8001552:	4a09      	ldr	r2, [pc, #36]	; (8001578 <Read_ADS1115+0x5a8>)
 8001554:	4809      	ldr	r0, [pc, #36]	; (800157c <Read_ADS1115+0x5ac>)
 8001556:	f001 ffaf 	bl	80034b8 <HAL_I2C_Master_Transmit>
	buffer[0]=0x00;
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <Read_ADS1115+0x5a8>)
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8001560:	200a      	movs	r0, #10
 8001562:	f000 fd6f 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,1,100);
 8001566:	7dfb      	ldrb	r3, [r7, #23]
 8001568:	b299      	uxth	r1, r3
 800156a:	2364      	movs	r3, #100	; 0x64
 800156c:	e00e      	b.n	800158c <Read_ADS1115+0x5bc>
 800156e:	bf00      	nop
 8001570:	d2f1a9fc 	.word	0xd2f1a9fc
 8001574:	3f20624d 	.word	0x3f20624d
 8001578:	20000124 	.word	0x20000124
 800157c:	20000050 	.word	0x20000050
 8001580:	200000ec 	.word	0x200000ec
 8001584:	477fff00 	.word	0x477fff00
 8001588:	447a0000 	.word	0x447a0000
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	2301      	movs	r3, #1
 8001590:	4aaf      	ldr	r2, [pc, #700]	; (8001850 <Read_ADS1115+0x880>)
 8001592:	48b0      	ldr	r0, [pc, #704]	; (8001854 <Read_ADS1115+0x884>)
 8001594:	f001 ff90 	bl	80034b8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001598:	200a      	movs	r0, #10
 800159a:	f000 fd53 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,i2c_address+1, buffer,2,100);
 800159e:	7dfb      	ldrb	r3, [r7, #23]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	3301      	adds	r3, #1
 80015a4:	b299      	uxth	r1, r3
 80015a6:	2364      	movs	r3, #100	; 0x64
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2302      	movs	r3, #2
 80015ac:	4aa8      	ldr	r2, [pc, #672]	; (8001850 <Read_ADS1115+0x880>)
 80015ae:	48a9      	ldr	r0, [pc, #676]	; (8001854 <Read_ADS1115+0x884>)
 80015b0:	f002 f880 	bl	80036b4 <HAL_I2C_Master_Receive>
	data = (buffer[0]<<8) + buffer[1];
 80015b4:	4ba6      	ldr	r3, [pc, #664]	; (8001850 <Read_ADS1115+0x880>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	4aa5      	ldr	r2, [pc, #660]	; (8001850 <Read_ADS1115+0x880>)
 80015bc:	7852      	ldrb	r2, [r2, #1]
 80015be:	4413      	add	r3, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fa71 	bl	8000aa8 <__aeabi_i2f>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4aa3      	ldr	r2, [pc, #652]	; (8001858 <Read_ADS1115+0x888>)
 80015ca:	6013      	str	r3, [r2, #0]
	if(data==0xFFFF) {data=0;}
 80015cc:	4ba2      	ldr	r3, [pc, #648]	; (8001858 <Read_ADS1115+0x888>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	49a2      	ldr	r1, [pc, #648]	; (800185c <Read_ADS1115+0x88c>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fb00 	bl	8000bd8 <__aeabi_fcmpeq>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <Read_ADS1115+0x616>
 80015de:	4b9e      	ldr	r3, [pc, #632]	; (8001858 <Read_ADS1115+0x888>)
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
	voltage = data*0.000125;
 80015e6:	4b9c      	ldr	r3, [pc, #624]	; (8001858 <Read_ADS1115+0x888>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff f8fa 	bl	80007e4 <__aeabi_f2d>
 80015f0:	a395      	add	r3, pc, #596	; (adr r3, 8001848 <Read_ADS1115+0x878>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7fe fdb3 	bl	8000160 <__aeabi_dmul>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	f7ff f947 	bl	8000894 <__aeabi_d2f>
 8001606:	4603      	mov	r3, r0
 8001608:	613b      	str	r3, [r7, #16]
	lastintValue = 1000*voltage;
 800160a:	4995      	ldr	r1, [pc, #596]	; (8001860 <Read_ADS1115+0x890>)
 800160c:	6938      	ldr	r0, [r7, #16]
 800160e:	f7fe fed1 	bl	80003b4 <__aeabi_fmul>
 8001612:	4603      	mov	r3, r0
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fb11 	bl	8000c3c <__aeabi_f2iz>
 800161a:	4603      	mov	r3, r0
 800161c:	60fb      	str	r3, [r7, #12]
		VoltageArray[6] = lastintValue;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3318      	adds	r3, #24
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	601a      	str	r2, [r3, #0]
		lastintValue = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
		HAL_Delay(20);
 800162a:	2014      	movs	r0, #20
 800162c:	f000 fd0a 	bl	8002044 <HAL_Delay>

	 // channel 8 read
	 i2c_address= 0x92;
 8001630:	2392      	movs	r3, #146	; 0x92
 8001632:	75fb      	strb	r3, [r7, #23]
	buffer[0]=0x01; // address pointer register: 01 -> config register
 8001634:	4b86      	ldr	r3, [pc, #536]	; (8001850 <Read_ADS1115+0x880>)
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
	buffer[1]=0xF2;
 800163a:	4b85      	ldr	r3, [pc, #532]	; (8001850 <Read_ADS1115+0x880>)
 800163c:	22f2      	movs	r2, #242	; 0xf2
 800163e:	705a      	strb	r2, [r3, #1]
	buffer[2]=0x85;
 8001640:	4b83      	ldr	r3, [pc, #524]	; (8001850 <Read_ADS1115+0x880>)
 8001642:	2285      	movs	r2, #133	; 0x85
 8001644:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,3,100);
 8001646:	7dfb      	ldrb	r3, [r7, #23]
 8001648:	b299      	uxth	r1, r3
 800164a:	2364      	movs	r3, #100	; 0x64
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2303      	movs	r3, #3
 8001650:	4a7f      	ldr	r2, [pc, #508]	; (8001850 <Read_ADS1115+0x880>)
 8001652:	4880      	ldr	r0, [pc, #512]	; (8001854 <Read_ADS1115+0x884>)
 8001654:	f001 ff30 	bl	80034b8 <HAL_I2C_Master_Transmit>
	buffer[0]=0x00;
 8001658:	4b7d      	ldr	r3, [pc, #500]	; (8001850 <Read_ADS1115+0x880>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 800165e:	200a      	movs	r0, #10
 8001660:	f000 fcf0 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,1,100);
 8001664:	7dfb      	ldrb	r3, [r7, #23]
 8001666:	b299      	uxth	r1, r3
 8001668:	2364      	movs	r3, #100	; 0x64
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2301      	movs	r3, #1
 800166e:	4a78      	ldr	r2, [pc, #480]	; (8001850 <Read_ADS1115+0x880>)
 8001670:	4878      	ldr	r0, [pc, #480]	; (8001854 <Read_ADS1115+0x884>)
 8001672:	f001 ff21 	bl	80034b8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001676:	200a      	movs	r0, #10
 8001678:	f000 fce4 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,i2c_address+1, buffer,2,100);
 800167c:	7dfb      	ldrb	r3, [r7, #23]
 800167e:	b29b      	uxth	r3, r3
 8001680:	3301      	adds	r3, #1
 8001682:	b299      	uxth	r1, r3
 8001684:	2364      	movs	r3, #100	; 0x64
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2302      	movs	r3, #2
 800168a:	4a71      	ldr	r2, [pc, #452]	; (8001850 <Read_ADS1115+0x880>)
 800168c:	4871      	ldr	r0, [pc, #452]	; (8001854 <Read_ADS1115+0x884>)
 800168e:	f002 f811 	bl	80036b4 <HAL_I2C_Master_Receive>
	data = (buffer[0]<<8) + buffer[1];
 8001692:	4b6f      	ldr	r3, [pc, #444]	; (8001850 <Read_ADS1115+0x880>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	4a6d      	ldr	r2, [pc, #436]	; (8001850 <Read_ADS1115+0x880>)
 800169a:	7852      	ldrb	r2, [r2, #1]
 800169c:	4413      	add	r3, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fa02 	bl	8000aa8 <__aeabi_i2f>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4a6c      	ldr	r2, [pc, #432]	; (8001858 <Read_ADS1115+0x888>)
 80016a8:	6013      	str	r3, [r2, #0]
	if(data==0xFFFF) {data=0;}
 80016aa:	4b6b      	ldr	r3, [pc, #428]	; (8001858 <Read_ADS1115+0x888>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	496b      	ldr	r1, [pc, #428]	; (800185c <Read_ADS1115+0x88c>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fa91 	bl	8000bd8 <__aeabi_fcmpeq>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <Read_ADS1115+0x6f4>
 80016bc:	4b66      	ldr	r3, [pc, #408]	; (8001858 <Read_ADS1115+0x888>)
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
	voltage = data*0.000125;
 80016c4:	4b64      	ldr	r3, [pc, #400]	; (8001858 <Read_ADS1115+0x888>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff f88b 	bl	80007e4 <__aeabi_f2d>
 80016ce:	a35e      	add	r3, pc, #376	; (adr r3, 8001848 <Read_ADS1115+0x878>)
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	f7fe fd44 	bl	8000160 <__aeabi_dmul>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	f7ff f8d8 	bl	8000894 <__aeabi_d2f>
 80016e4:	4603      	mov	r3, r0
 80016e6:	613b      	str	r3, [r7, #16]
	lastintValue = 1000*voltage;
 80016e8:	495d      	ldr	r1, [pc, #372]	; (8001860 <Read_ADS1115+0x890>)
 80016ea:	6938      	ldr	r0, [r7, #16]
 80016ec:	f7fe fe62 	bl	80003b4 <__aeabi_fmul>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff faa2 	bl	8000c3c <__aeabi_f2iz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	60fb      	str	r3, [r7, #12]
		VoltageArray[7] = lastintValue;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	331c      	adds	r3, #28
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	601a      	str	r2, [r3, #0]
		lastintValue = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
		HAL_Delay(20);
 8001708:	2014      	movs	r0, #20
 800170a:	f000 fc9b 	bl	8002044 <HAL_Delay>

	// channel 9 read
	i2c_address= 0x96;
 800170e:	2396      	movs	r3, #150	; 0x96
 8001710:	75fb      	strb	r3, [r7, #23]
	buffer[0]=0x01; // address pointer register: 01 -> config register
 8001712:	4b4f      	ldr	r3, [pc, #316]	; (8001850 <Read_ADS1115+0x880>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
	buffer[1]=0xC2;
 8001718:	4b4d      	ldr	r3, [pc, #308]	; (8001850 <Read_ADS1115+0x880>)
 800171a:	22c2      	movs	r2, #194	; 0xc2
 800171c:	705a      	strb	r2, [r3, #1]
	buffer[2]=0x85;
 800171e:	4b4c      	ldr	r3, [pc, #304]	; (8001850 <Read_ADS1115+0x880>)
 8001720:	2285      	movs	r2, #133	; 0x85
 8001722:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,3,100);
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	b299      	uxth	r1, r3
 8001728:	2364      	movs	r3, #100	; 0x64
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2303      	movs	r3, #3
 800172e:	4a48      	ldr	r2, [pc, #288]	; (8001850 <Read_ADS1115+0x880>)
 8001730:	4848      	ldr	r0, [pc, #288]	; (8001854 <Read_ADS1115+0x884>)
 8001732:	f001 fec1 	bl	80034b8 <HAL_I2C_Master_Transmit>
	buffer[0]=0x00;
 8001736:	4b46      	ldr	r3, [pc, #280]	; (8001850 <Read_ADS1115+0x880>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 800173c:	200a      	movs	r0, #10
 800173e:	f000 fc81 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,1,100);
 8001742:	7dfb      	ldrb	r3, [r7, #23]
 8001744:	b299      	uxth	r1, r3
 8001746:	2364      	movs	r3, #100	; 0x64
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	2301      	movs	r3, #1
 800174c:	4a40      	ldr	r2, [pc, #256]	; (8001850 <Read_ADS1115+0x880>)
 800174e:	4841      	ldr	r0, [pc, #260]	; (8001854 <Read_ADS1115+0x884>)
 8001750:	f001 feb2 	bl	80034b8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001754:	200a      	movs	r0, #10
 8001756:	f000 fc75 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,i2c_address+1, buffer,2,100);
 800175a:	7dfb      	ldrb	r3, [r7, #23]
 800175c:	b29b      	uxth	r3, r3
 800175e:	3301      	adds	r3, #1
 8001760:	b299      	uxth	r1, r3
 8001762:	2364      	movs	r3, #100	; 0x64
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2302      	movs	r3, #2
 8001768:	4a39      	ldr	r2, [pc, #228]	; (8001850 <Read_ADS1115+0x880>)
 800176a:	483a      	ldr	r0, [pc, #232]	; (8001854 <Read_ADS1115+0x884>)
 800176c:	f001 ffa2 	bl	80036b4 <HAL_I2C_Master_Receive>
	data = (buffer[0]<<8) + buffer[1];
 8001770:	4b37      	ldr	r3, [pc, #220]	; (8001850 <Read_ADS1115+0x880>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	4a36      	ldr	r2, [pc, #216]	; (8001850 <Read_ADS1115+0x880>)
 8001778:	7852      	ldrb	r2, [r2, #1]
 800177a:	4413      	add	r3, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff f993 	bl	8000aa8 <__aeabi_i2f>
 8001782:	4603      	mov	r3, r0
 8001784:	4a34      	ldr	r2, [pc, #208]	; (8001858 <Read_ADS1115+0x888>)
 8001786:	6013      	str	r3, [r2, #0]
	if(data==0xFFFF) {data=0;}
 8001788:	4b33      	ldr	r3, [pc, #204]	; (8001858 <Read_ADS1115+0x888>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4933      	ldr	r1, [pc, #204]	; (800185c <Read_ADS1115+0x88c>)
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fa22 	bl	8000bd8 <__aeabi_fcmpeq>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <Read_ADS1115+0x7d2>
 800179a:	4b2f      	ldr	r3, [pc, #188]	; (8001858 <Read_ADS1115+0x888>)
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
	voltage = data*0.000125;
 80017a2:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <Read_ADS1115+0x888>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff f81c 	bl	80007e4 <__aeabi_f2d>
 80017ac:	a326      	add	r3, pc, #152	; (adr r3, 8001848 <Read_ADS1115+0x878>)
 80017ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b2:	f7fe fcd5 	bl	8000160 <__aeabi_dmul>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff f869 	bl	8000894 <__aeabi_d2f>
 80017c2:	4603      	mov	r3, r0
 80017c4:	613b      	str	r3, [r7, #16]
	lastintValue = 1000*voltage;
 80017c6:	4926      	ldr	r1, [pc, #152]	; (8001860 <Read_ADS1115+0x890>)
 80017c8:	6938      	ldr	r0, [r7, #16]
 80017ca:	f7fe fdf3 	bl	80003b4 <__aeabi_fmul>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fa33 	bl	8000c3c <__aeabi_f2iz>
 80017d6:	4603      	mov	r3, r0
 80017d8:	60fb      	str	r3, [r7, #12]
		VoltageArray[8] = lastintValue;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3320      	adds	r3, #32
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	601a      	str	r2, [r3, #0]
		lastintValue = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
		HAL_Delay(20);
 80017e6:	2014      	movs	r0, #20
 80017e8:	f000 fc2c 	bl	8002044 <HAL_Delay>


	// channel 10 read
	 i2c_address= 0x96;
 80017ec:	2396      	movs	r3, #150	; 0x96
 80017ee:	75fb      	strb	r3, [r7, #23]
	buffer[0]=0x01; // address pointer register: 01 -> config register
 80017f0:	4b17      	ldr	r3, [pc, #92]	; (8001850 <Read_ADS1115+0x880>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	701a      	strb	r2, [r3, #0]
	buffer[1]=0xD2;
 80017f6:	4b16      	ldr	r3, [pc, #88]	; (8001850 <Read_ADS1115+0x880>)
 80017f8:	22d2      	movs	r2, #210	; 0xd2
 80017fa:	705a      	strb	r2, [r3, #1]
	buffer[2]=0x85;
 80017fc:	4b14      	ldr	r3, [pc, #80]	; (8001850 <Read_ADS1115+0x880>)
 80017fe:	2285      	movs	r2, #133	; 0x85
 8001800:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,3,100);
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	b299      	uxth	r1, r3
 8001806:	2364      	movs	r3, #100	; 0x64
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2303      	movs	r3, #3
 800180c:	4a10      	ldr	r2, [pc, #64]	; (8001850 <Read_ADS1115+0x880>)
 800180e:	4811      	ldr	r0, [pc, #68]	; (8001854 <Read_ADS1115+0x884>)
 8001810:	f001 fe52 	bl	80034b8 <HAL_I2C_Master_Transmit>
	buffer[0]=0x00;
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <Read_ADS1115+0x880>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 800181a:	200a      	movs	r0, #10
 800181c:	f000 fc12 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,1,100);
 8001820:	7dfb      	ldrb	r3, [r7, #23]
 8001822:	b299      	uxth	r1, r3
 8001824:	2364      	movs	r3, #100	; 0x64
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2301      	movs	r3, #1
 800182a:	4a09      	ldr	r2, [pc, #36]	; (8001850 <Read_ADS1115+0x880>)
 800182c:	4809      	ldr	r0, [pc, #36]	; (8001854 <Read_ADS1115+0x884>)
 800182e:	f001 fe43 	bl	80034b8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001832:	200a      	movs	r0, #10
 8001834:	f000 fc06 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,i2c_address+1, buffer,2,100);
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	b29b      	uxth	r3, r3
 800183c:	3301      	adds	r3, #1
 800183e:	b299      	uxth	r1, r3
 8001840:	2364      	movs	r3, #100	; 0x64
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	e00e      	b.n	8001864 <Read_ADS1115+0x894>
 8001846:	bf00      	nop
 8001848:	d2f1a9fc 	.word	0xd2f1a9fc
 800184c:	3f20624d 	.word	0x3f20624d
 8001850:	20000124 	.word	0x20000124
 8001854:	20000050 	.word	0x20000050
 8001858:	200000ec 	.word	0x200000ec
 800185c:	477fff00 	.word	0x477fff00
 8001860:	447a0000 	.word	0x447a0000
 8001864:	2302      	movs	r3, #2
 8001866:	4a94      	ldr	r2, [pc, #592]	; (8001ab8 <Read_ADS1115+0xae8>)
 8001868:	4894      	ldr	r0, [pc, #592]	; (8001abc <Read_ADS1115+0xaec>)
 800186a:	f001 ff23 	bl	80036b4 <HAL_I2C_Master_Receive>
	data = (buffer[0]<<8) + buffer[1];
 800186e:	4b92      	ldr	r3, [pc, #584]	; (8001ab8 <Read_ADS1115+0xae8>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	4a90      	ldr	r2, [pc, #576]	; (8001ab8 <Read_ADS1115+0xae8>)
 8001876:	7852      	ldrb	r2, [r2, #1]
 8001878:	4413      	add	r3, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff f914 	bl	8000aa8 <__aeabi_i2f>
 8001880:	4603      	mov	r3, r0
 8001882:	4a8f      	ldr	r2, [pc, #572]	; (8001ac0 <Read_ADS1115+0xaf0>)
 8001884:	6013      	str	r3, [r2, #0]
	if(data==0xFFFF) {data=0;}
 8001886:	4b8e      	ldr	r3, [pc, #568]	; (8001ac0 <Read_ADS1115+0xaf0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	498e      	ldr	r1, [pc, #568]	; (8001ac4 <Read_ADS1115+0xaf4>)
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff f9a3 	bl	8000bd8 <__aeabi_fcmpeq>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <Read_ADS1115+0x8d0>
 8001898:	4b89      	ldr	r3, [pc, #548]	; (8001ac0 <Read_ADS1115+0xaf0>)
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
	voltage = data*0.000125;
 80018a0:	4b87      	ldr	r3, [pc, #540]	; (8001ac0 <Read_ADS1115+0xaf0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe ff9d 	bl	80007e4 <__aeabi_f2d>
 80018aa:	a381      	add	r3, pc, #516	; (adr r3, 8001ab0 <Read_ADS1115+0xae0>)
 80018ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b0:	f7fe fc56 	bl	8000160 <__aeabi_dmul>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	f7fe ffea 	bl	8000894 <__aeabi_d2f>
 80018c0:	4603      	mov	r3, r0
 80018c2:	613b      	str	r3, [r7, #16]
	lastintValue = 1000*voltage;
 80018c4:	4980      	ldr	r1, [pc, #512]	; (8001ac8 <Read_ADS1115+0xaf8>)
 80018c6:	6938      	ldr	r0, [r7, #16]
 80018c8:	f7fe fd74 	bl	80003b4 <__aeabi_fmul>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f9b4 	bl	8000c3c <__aeabi_f2iz>
 80018d4:	4603      	mov	r3, r0
 80018d6:	60fb      	str	r3, [r7, #12]
		VoltageArray[9] = lastintValue;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3324      	adds	r3, #36	; 0x24
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	601a      	str	r2, [r3, #0]
		lastintValue = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
		HAL_Delay(20);
 80018e4:	2014      	movs	r0, #20
 80018e6:	f000 fbad 	bl	8002044 <HAL_Delay>


		// channel 11 read
	i2c_address= 0x96;
 80018ea:	2396      	movs	r3, #150	; 0x96
 80018ec:	75fb      	strb	r3, [r7, #23]
	buffer[0]=0x01; // address pointer register: 01 -> config register
 80018ee:	4b72      	ldr	r3, [pc, #456]	; (8001ab8 <Read_ADS1115+0xae8>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]
	buffer[1]=0xE2;
 80018f4:	4b70      	ldr	r3, [pc, #448]	; (8001ab8 <Read_ADS1115+0xae8>)
 80018f6:	22e2      	movs	r2, #226	; 0xe2
 80018f8:	705a      	strb	r2, [r3, #1]
	buffer[2]=0x85;
 80018fa:	4b6f      	ldr	r3, [pc, #444]	; (8001ab8 <Read_ADS1115+0xae8>)
 80018fc:	2285      	movs	r2, #133	; 0x85
 80018fe:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,3,100);
 8001900:	7dfb      	ldrb	r3, [r7, #23]
 8001902:	b299      	uxth	r1, r3
 8001904:	2364      	movs	r3, #100	; 0x64
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	2303      	movs	r3, #3
 800190a:	4a6b      	ldr	r2, [pc, #428]	; (8001ab8 <Read_ADS1115+0xae8>)
 800190c:	486b      	ldr	r0, [pc, #428]	; (8001abc <Read_ADS1115+0xaec>)
 800190e:	f001 fdd3 	bl	80034b8 <HAL_I2C_Master_Transmit>
	buffer[0]=0x00;
 8001912:	4b69      	ldr	r3, [pc, #420]	; (8001ab8 <Read_ADS1115+0xae8>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8001918:	200a      	movs	r0, #10
 800191a:	f000 fb93 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,1,100);
 800191e:	7dfb      	ldrb	r3, [r7, #23]
 8001920:	b299      	uxth	r1, r3
 8001922:	2364      	movs	r3, #100	; 0x64
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2301      	movs	r3, #1
 8001928:	4a63      	ldr	r2, [pc, #396]	; (8001ab8 <Read_ADS1115+0xae8>)
 800192a:	4864      	ldr	r0, [pc, #400]	; (8001abc <Read_ADS1115+0xaec>)
 800192c:	f001 fdc4 	bl	80034b8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001930:	200a      	movs	r0, #10
 8001932:	f000 fb87 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,i2c_address+1, buffer,2,100);
 8001936:	7dfb      	ldrb	r3, [r7, #23]
 8001938:	b29b      	uxth	r3, r3
 800193a:	3301      	adds	r3, #1
 800193c:	b299      	uxth	r1, r3
 800193e:	2364      	movs	r3, #100	; 0x64
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2302      	movs	r3, #2
 8001944:	4a5c      	ldr	r2, [pc, #368]	; (8001ab8 <Read_ADS1115+0xae8>)
 8001946:	485d      	ldr	r0, [pc, #372]	; (8001abc <Read_ADS1115+0xaec>)
 8001948:	f001 feb4 	bl	80036b4 <HAL_I2C_Master_Receive>
	data = (buffer[0]<<8) + buffer[1];
 800194c:	4b5a      	ldr	r3, [pc, #360]	; (8001ab8 <Read_ADS1115+0xae8>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	4a59      	ldr	r2, [pc, #356]	; (8001ab8 <Read_ADS1115+0xae8>)
 8001954:	7852      	ldrb	r2, [r2, #1]
 8001956:	4413      	add	r3, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff f8a5 	bl	8000aa8 <__aeabi_i2f>
 800195e:	4603      	mov	r3, r0
 8001960:	4a57      	ldr	r2, [pc, #348]	; (8001ac0 <Read_ADS1115+0xaf0>)
 8001962:	6013      	str	r3, [r2, #0]
	if(data==0xFFFF) {data=0;}
 8001964:	4b56      	ldr	r3, [pc, #344]	; (8001ac0 <Read_ADS1115+0xaf0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4956      	ldr	r1, [pc, #344]	; (8001ac4 <Read_ADS1115+0xaf4>)
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff f934 	bl	8000bd8 <__aeabi_fcmpeq>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <Read_ADS1115+0x9ae>
 8001976:	4b52      	ldr	r3, [pc, #328]	; (8001ac0 <Read_ADS1115+0xaf0>)
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
	voltage = data*0.000125;
 800197e:	4b50      	ldr	r3, [pc, #320]	; (8001ac0 <Read_ADS1115+0xaf0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe ff2e 	bl	80007e4 <__aeabi_f2d>
 8001988:	a349      	add	r3, pc, #292	; (adr r3, 8001ab0 <Read_ADS1115+0xae0>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	f7fe fbe7 	bl	8000160 <__aeabi_dmul>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4610      	mov	r0, r2
 8001998:	4619      	mov	r1, r3
 800199a:	f7fe ff7b 	bl	8000894 <__aeabi_d2f>
 800199e:	4603      	mov	r3, r0
 80019a0:	613b      	str	r3, [r7, #16]
	lastintValue = 1000*voltage;
 80019a2:	4949      	ldr	r1, [pc, #292]	; (8001ac8 <Read_ADS1115+0xaf8>)
 80019a4:	6938      	ldr	r0, [r7, #16]
 80019a6:	f7fe fd05 	bl	80003b4 <__aeabi_fmul>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f945 	bl	8000c3c <__aeabi_f2iz>
 80019b2:	4603      	mov	r3, r0
 80019b4:	60fb      	str	r3, [r7, #12]
		VoltageArray[10] = lastintValue;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3328      	adds	r3, #40	; 0x28
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	601a      	str	r2, [r3, #0]
		lastintValue = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
		HAL_Delay(20);
 80019c2:	2014      	movs	r0, #20
 80019c4:	f000 fb3e 	bl	8002044 <HAL_Delay>


	// channel 12 read
	i2c_address= 0x96;
 80019c8:	2396      	movs	r3, #150	; 0x96
 80019ca:	75fb      	strb	r3, [r7, #23]
	buffer[0]=0x01; // address pointer register: 01 -> config register
 80019cc:	4b3a      	ldr	r3, [pc, #232]	; (8001ab8 <Read_ADS1115+0xae8>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
	buffer[1]=0xF2;
 80019d2:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <Read_ADS1115+0xae8>)
 80019d4:	22f2      	movs	r2, #242	; 0xf2
 80019d6:	705a      	strb	r2, [r3, #1]
	buffer[2]=0x85;
 80019d8:	4b37      	ldr	r3, [pc, #220]	; (8001ab8 <Read_ADS1115+0xae8>)
 80019da:	2285      	movs	r2, #133	; 0x85
 80019dc:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,3,100);
 80019de:	7dfb      	ldrb	r3, [r7, #23]
 80019e0:	b299      	uxth	r1, r3
 80019e2:	2364      	movs	r3, #100	; 0x64
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	2303      	movs	r3, #3
 80019e8:	4a33      	ldr	r2, [pc, #204]	; (8001ab8 <Read_ADS1115+0xae8>)
 80019ea:	4834      	ldr	r0, [pc, #208]	; (8001abc <Read_ADS1115+0xaec>)
 80019ec:	f001 fd64 	bl	80034b8 <HAL_I2C_Master_Transmit>
	buffer[0]=0x00;
 80019f0:	4b31      	ldr	r3, [pc, #196]	; (8001ab8 <Read_ADS1115+0xae8>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 80019f6:	200a      	movs	r0, #10
 80019f8:	f000 fb24 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1,i2c_address+0,(uint8_t*)buffer,1,100);
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
 80019fe:	b299      	uxth	r1, r3
 8001a00:	2364      	movs	r3, #100	; 0x64
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	2301      	movs	r3, #1
 8001a06:	4a2c      	ldr	r2, [pc, #176]	; (8001ab8 <Read_ADS1115+0xae8>)
 8001a08:	482c      	ldr	r0, [pc, #176]	; (8001abc <Read_ADS1115+0xaec>)
 8001a0a:	f001 fd55 	bl	80034b8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001a0e:	200a      	movs	r0, #10
 8001a10:	f000 fb18 	bl	8002044 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,i2c_address+1, buffer,2,100);
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	3301      	adds	r3, #1
 8001a1a:	b299      	uxth	r1, r3
 8001a1c:	2364      	movs	r3, #100	; 0x64
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2302      	movs	r3, #2
 8001a22:	4a25      	ldr	r2, [pc, #148]	; (8001ab8 <Read_ADS1115+0xae8>)
 8001a24:	4825      	ldr	r0, [pc, #148]	; (8001abc <Read_ADS1115+0xaec>)
 8001a26:	f001 fe45 	bl	80036b4 <HAL_I2C_Master_Receive>
	data = (buffer[0]<<8) + buffer[1];
 8001a2a:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <Read_ADS1115+0xae8>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	4a21      	ldr	r2, [pc, #132]	; (8001ab8 <Read_ADS1115+0xae8>)
 8001a32:	7852      	ldrb	r2, [r2, #1]
 8001a34:	4413      	add	r3, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f836 	bl	8000aa8 <__aeabi_i2f>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4a20      	ldr	r2, [pc, #128]	; (8001ac0 <Read_ADS1115+0xaf0>)
 8001a40:	6013      	str	r3, [r2, #0]
	if(data==0xFFFF) {data=0;}
 8001a42:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <Read_ADS1115+0xaf0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	491f      	ldr	r1, [pc, #124]	; (8001ac4 <Read_ADS1115+0xaf4>)
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff f8c5 	bl	8000bd8 <__aeabi_fcmpeq>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <Read_ADS1115+0xa8c>
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <Read_ADS1115+0xaf0>)
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
	voltage = data*0.000125;
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <Read_ADS1115+0xaf0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe febf 	bl	80007e4 <__aeabi_f2d>
 8001a66:	a312      	add	r3, pc, #72	; (adr r3, 8001ab0 <Read_ADS1115+0xae0>)
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	f7fe fb78 	bl	8000160 <__aeabi_dmul>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	f7fe ff0c 	bl	8000894 <__aeabi_d2f>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	613b      	str	r3, [r7, #16]
	lastintValue = 1000*voltage;
 8001a80:	4911      	ldr	r1, [pc, #68]	; (8001ac8 <Read_ADS1115+0xaf8>)
 8001a82:	6938      	ldr	r0, [r7, #16]
 8001a84:	f7fe fc96 	bl	80003b4 <__aeabi_fmul>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f8d6 	bl	8000c3c <__aeabi_f2iz>
 8001a90:	4603      	mov	r3, r0
 8001a92:	60fb      	str	r3, [r7, #12]
		VoltageArray[11] = lastintValue;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	332c      	adds	r3, #44	; 0x2c
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	601a      	str	r2, [r3, #0]
		lastintValue = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
		HAL_Delay(20);
 8001aa0:	2014      	movs	r0, #20
 8001aa2:	f000 facf 	bl	8002044 <HAL_Delay>


	return 0;
 8001aa6:	bf00      	nop

}
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001ab4:	3f20624d 	.word	0x3f20624d
 8001ab8:	20000124 	.word	0x20000124
 8001abc:	20000050 	.word	0x20000050
 8001ac0:	200000ec 	.word	0x200000ec
 8001ac4:	477fff00 	.word	0x477fff00
 8001ac8:	447a0000 	.word	0x447a0000

08001acc <CAN1_Tx>:

uint8_t led_no=0;

void CAN1_Tx(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;

	uint32_t TxMailbox;

	uint8_t ourMessage[5] = {'H','E','L','L','O'};
 8001ad2:	4a10      	ldr	r2, [pc, #64]	; (8001b14 <CAN1_Tx+0x48>)
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ada:	6018      	str	r0, [r3, #0]
 8001adc:	3304      	adds	r3, #4
 8001ade:	7019      	strb	r1, [r3, #0]
	TxHeader.DLC = 5;
 8001ae0:	2305      	movs	r3, #5
 8001ae2:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x65D;
 8001ae4:	f240 635d 	movw	r3, #1629	; 0x65d
 8001ae8:	613b      	str	r3, [r7, #16]
	TxHeader.IDE = CAN_ID_STD;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_AddTxMessage(&hcan,&TxHeader,ourMessage,&TxMailbox) != HAL_OK)
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	1d3a      	adds	r2, r7, #4
 8001af8:	f107 0110 	add.w	r1, r7, #16
 8001afc:	4806      	ldr	r0, [pc, #24]	; (8001b18 <CAN1_Tx+0x4c>)
 8001afe:	f000 fccd 	bl	800249c <HAL_CAN_AddTxMessage>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <CAN1_Tx+0x40>
	{
		Error_Handler();
 8001b08:	f000 f8b4 	bl	8001c74 <Error_Handler>
	}



}
 8001b0c:	bf00      	nop
 8001b0e:	3728      	adds	r7, #40	; 0x28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	08005018 	.word	0x08005018
 8001b18:	20000028 	.word	0x20000028

08001b1c <CAN_Filter_Config>:

void CAN_Filter_Config(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;

	can1_filter_init.FilterActivation = ENABLE;
 8001b22:	2301      	movs	r3, #1
 8001b24:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank  = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0X01C0;
 8001b36:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001b3a:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8001b44:	2301      	movs	r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]

	if( HAL_CAN_ConfigFilter(&hcan,&can1_filter_init) != HAL_OK)
 8001b48:	463b      	mov	r3, r7
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4805      	ldr	r0, [pc, #20]	; (8001b64 <CAN_Filter_Config+0x48>)
 8001b4e:	f000 fb98 	bl	8002282 <HAL_CAN_ConfigFilter>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <CAN_Filter_Config+0x40>
	{
		Error_Handler();
 8001b58:	f000 f88c 	bl	8001c74 <Error_Handler>
	}

}
 8001b5c:	bf00      	nop
 8001b5e:	3728      	adds	r7, #40	; 0x28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000028 	.word	0x20000028

08001b68 <HAL_CAN_RxFifo0MsgPendingCallback>:

}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b092      	sub	sp, #72	; 0x48
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	uint8_t rcvd_msg[8];

	char msg[50];

	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,rcvd_msg) != HAL_OK)
 8001b70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b74:	4a29      	ldr	r2, [pc, #164]	; (8001c1c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001b76:	2100      	movs	r1, #0
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 fd5e 	bl	800263a <HAL_CAN_GetRxMessage>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
	{
		Error_Handler();
 8001b84:	f000 f876 	bl	8001c74 <Error_Handler>
	}

	if(RxHeader.StdId == 0x65D && RxHeader.RTR == 0 )
 8001b88:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f240 625d 	movw	r2, #1629	; 0x65d
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d10e      	bne.n	8001bb2 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 8001b94:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10a      	bne.n	8001bb2 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
	{
		//This is data frame sent by n1 to n2
		HAL_UART_Transmit(&huart1, (uint8_t *)"CAN TEST OK\r\n", 13, HAL_MAX_DELAY);
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba0:	220d      	movs	r2, #13
 8001ba2:	491f      	ldr	r1, [pc, #124]	; (8001c20 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8001ba4:	481f      	ldr	r0, [pc, #124]	; (8001c24 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8001ba6:	f002 ffd7 	bl	8004b58 <HAL_UART_Transmit>
		CANOK = 1;
 8001baa:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	e023      	b.n	8001bfa <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
	}
	else if ( RxHeader.StdId == 0x651 && RxHeader.RTR == 1)
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f240 6251 	movw	r2, #1617	; 0x651
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d109      	bne.n	8001bd2 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
 8001bbe:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d105      	bne.n	8001bd2 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
	{
		//This is a remote frame sent by n1 to n2
		Send_response(RxHeader.StdId);
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f82e 	bl	8001c2c <Send_response>
 8001bd0:	e021      	b.n	8001c16 <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
		return;
	}
	else if ( RxHeader.StdId == 0x651 && RxHeader.RTR == 0)
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f240 6251 	movw	r2, #1617	; 0x651
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d10d      	bne.n	8001bfa <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
 8001bde:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
	{
		//its a reply ( data frame) by n2 to n1
	    HAL_UART_Transmit(&huart1, (uint8_t *)"CAN TEST OK\r\n", 13, HAL_MAX_DELAY);
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bea:	220d      	movs	r2, #13
 8001bec:	490c      	ldr	r1, [pc, #48]	; (8001c20 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8001bee:	480d      	ldr	r0, [pc, #52]	; (8001c24 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8001bf0:	f002 ffb2 	bl	8004b58 <HAL_UART_Transmit>
	    CANOK = 1;
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
	}

	 HAL_UART_Transmit(&huart1,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe faa6 	bl	8000150 <strlen>
 8001c04:	4603      	mov	r3, r0
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	f107 010c 	add.w	r1, r7, #12
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c10:	4804      	ldr	r0, [pc, #16]	; (8001c24 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8001c12:	f002 ffa1 	bl	8004b58 <HAL_UART_Transmit>

}
 8001c16:	3748      	adds	r7, #72	; 0x48
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000134 	.word	0x20000134
 8001c20:	08004fec 	.word	0x08004fec
 8001c24:	200000a4 	.word	0x200000a4
 8001c28:	20000150 	.word	0x20000150

08001c2c <Send_response>:

void Send_response(uint32_t StdId)
 {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

 	CAN_TxHeaderTypeDef TxHeader;

 	uint32_t TxMailbox;

 	uint8_t response[2] = { 0xAB,0XCD};
 8001c34:	f64c 53ab 	movw	r3, #52651	; 0xcdab
 8001c38:	813b      	strh	r3, [r7, #8]

 	TxHeader.DLC = 2;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	623b      	str	r3, [r7, #32]
 	TxHeader.StdId = StdId;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	613b      	str	r3, [r7, #16]
 	TxHeader.IDE   = CAN_ID_STD;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
 	TxHeader.RTR = CAN_RTR_DATA;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]

 	if( HAL_CAN_AddTxMessage(&hcan,&TxHeader,response,&TxMailbox) != HAL_OK)
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	f107 0208 	add.w	r2, r7, #8
 8001c52:	f107 0110 	add.w	r1, r7, #16
 8001c56:	4806      	ldr	r0, [pc, #24]	; (8001c70 <Send_response+0x44>)
 8001c58:	f000 fc20 	bl	800249c <HAL_CAN_AddTxMessage>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <Send_response+0x3a>
 	{
 		Error_Handler();
 8001c62:	f000 f807 	bl	8001c74 <Error_Handler>
 	}

 }
 8001c66:	bf00      	nop
 8001c68:	3728      	adds	r7, #40	; 0x28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000028 	.word	0x20000028

08001c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c78:	b672      	cpsid	i
}
 8001c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <Error_Handler+0x8>
	...

08001c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <HAL_MspInit+0x5c>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	4a14      	ldr	r2, [pc, #80]	; (8001cdc <HAL_MspInit+0x5c>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6193      	str	r3, [r2, #24]
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_MspInit+0x5c>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_MspInit+0x5c>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <HAL_MspInit+0x5c>)
 8001ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	61d3      	str	r3, [r2, #28]
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_MspInit+0x5c>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_MspInit+0x60>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <HAL_MspInit+0x60>)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010000 	.word	0x40010000

08001ce4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0310 	add.w	r3, r7, #16
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a24      	ldr	r2, [pc, #144]	; (8001d90 <HAL_CAN_MspInit+0xac>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d141      	bne.n	8001d88 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d04:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <HAL_CAN_MspInit+0xb0>)
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	4a22      	ldr	r2, [pc, #136]	; (8001d94 <HAL_CAN_MspInit+0xb0>)
 8001d0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	61d3      	str	r3, [r2, #28]
 8001d10:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_CAN_MspInit+0xb0>)
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_CAN_MspInit+0xb0>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_CAN_MspInit+0xb0>)
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	6193      	str	r3, [r2, #24]
 8001d28:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <HAL_CAN_MspInit+0xb0>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d42:	f107 0310 	add.w	r3, r7, #16
 8001d46:	4619      	mov	r1, r3
 8001d48:	4813      	ldr	r0, [pc, #76]	; (8001d98 <HAL_CAN_MspInit+0xb4>)
 8001d4a:	f001 f8ed 	bl	8002f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5c:	f107 0310 	add.w	r3, r7, #16
 8001d60:	4619      	mov	r1, r3
 8001d62:	480d      	ldr	r0, [pc, #52]	; (8001d98 <HAL_CAN_MspInit+0xb4>)
 8001d64:	f001 f8e0 	bl	8002f28 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	2013      	movs	r0, #19
 8001d6e:	f001 f8a4 	bl	8002eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001d72:	2013      	movs	r0, #19
 8001d74:	f001 f8bd 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2014      	movs	r0, #20
 8001d7e:	f001 f89c 	bl	8002eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001d82:	2014      	movs	r0, #20
 8001d84:	f001 f8b5 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001d88:	bf00      	nop
 8001d8a:	3720      	adds	r7, #32
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40006400 	.word	0x40006400
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40010800 	.word	0x40010800

08001d9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0310 	add.w	r3, r7, #16
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <HAL_I2C_MspInit+0x70>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d123      	bne.n	8001e04 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <HAL_I2C_MspInit+0x74>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <HAL_I2C_MspInit+0x74>)
 8001dc2:	f043 0308 	orr.w	r3, r3, #8
 8001dc6:	6193      	str	r3, [r2, #24]
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_I2C_MspInit+0x74>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dd4:	23c0      	movs	r3, #192	; 0xc0
 8001dd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd8:	2312      	movs	r3, #18
 8001dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	f107 0310 	add.w	r3, r7, #16
 8001de4:	4619      	mov	r1, r3
 8001de6:	480b      	ldr	r0, [pc, #44]	; (8001e14 <HAL_I2C_MspInit+0x78>)
 8001de8:	f001 f89e 	bl	8002f28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <HAL_I2C_MspInit+0x74>)
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <HAL_I2C_MspInit+0x74>)
 8001df2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001df6:	61d3      	str	r3, [r2, #28]
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_I2C_MspInit+0x74>)
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e04:	bf00      	nop
 8001e06:	3720      	adds	r7, #32
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40005400 	.word	0x40005400
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40010c00 	.word	0x40010c00

08001e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 0310 	add.w	r3, r7, #16
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <HAL_UART_MspInit+0x8c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d131      	bne.n	8001e9c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e38:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <HAL_UART_MspInit+0x90>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	4a1a      	ldr	r2, [pc, #104]	; (8001ea8 <HAL_UART_MspInit+0x90>)
 8001e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e42:	6193      	str	r3, [r2, #24]
 8001e44:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <HAL_UART_MspInit+0x90>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e50:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <HAL_UART_MspInit+0x90>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	4a14      	ldr	r2, [pc, #80]	; (8001ea8 <HAL_UART_MspInit+0x90>)
 8001e56:	f043 0304 	orr.w	r3, r3, #4
 8001e5a:	6193      	str	r3, [r2, #24]
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_UART_MspInit+0x90>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e76:	f107 0310 	add.w	r3, r7, #16
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	480b      	ldr	r0, [pc, #44]	; (8001eac <HAL_UART_MspInit+0x94>)
 8001e7e:	f001 f853 	bl	8002f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e90:	f107 0310 	add.w	r3, r7, #16
 8001e94:	4619      	mov	r1, r3
 8001e96:	4805      	ldr	r0, [pc, #20]	; (8001eac <HAL_UART_MspInit+0x94>)
 8001e98:	f001 f846 	bl	8002f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e9c:	bf00      	nop
 8001e9e:	3720      	adds	r7, #32
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40013800 	.word	0x40013800
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40010800 	.word	0x40010800

08001eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <NMI_Handler+0x4>

08001eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eba:	e7fe      	b.n	8001eba <HardFault_Handler+0x4>

08001ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <MemManage_Handler+0x4>

08001ec2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec6:	e7fe      	b.n	8001ec6 <BusFault_Handler+0x4>

08001ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <UsageFault_Handler+0x4>

08001ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr

08001ef2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef6:	f000 f889 	bl	800200c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001f06:	f000 fcde 	bl	80028c6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000028 	.word	0x20000028

08001f14 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001f18:	4802      	ldr	r0, [pc, #8]	; (8001f24 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001f1a:	f000 fcd4 	bl	80028c6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000028 	.word	0x20000028

08001f28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr

08001f34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f34:	f7ff fff8 	bl	8001f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f38:	480b      	ldr	r0, [pc, #44]	; (8001f68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f3a:	490c      	ldr	r1, [pc, #48]	; (8001f6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f3c:	4a0c      	ldr	r2, [pc, #48]	; (8001f70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f40:	e002      	b.n	8001f48 <LoopCopyDataInit>

08001f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f46:	3304      	adds	r3, #4

08001f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f4c:	d3f9      	bcc.n	8001f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4e:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f50:	4c09      	ldr	r4, [pc, #36]	; (8001f78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f54:	e001      	b.n	8001f5a <LoopFillZerobss>

08001f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f58:	3204      	adds	r2, #4

08001f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f5c:	d3fb      	bcc.n	8001f56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f5e:	f003 f80d 	bl	8004f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f62:	f7fe fe91 	bl	8000c88 <main>
  bx lr
 8001f66:	4770      	bx	lr
  ldr r0, =_sdata
 8001f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f70:	0800506c 	.word	0x0800506c
  ldr r2, =_sbss
 8001f74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f78:	2000015c 	.word	0x2000015c

08001f7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f7c:	e7fe      	b.n	8001f7c <ADC1_2_IRQHandler>
	...

08001f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <HAL_Init+0x28>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a07      	ldr	r2, [pc, #28]	; (8001fa8 <HAL_Init+0x28>)
 8001f8a:	f043 0310 	orr.w	r3, r3, #16
 8001f8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f90:	2003      	movs	r0, #3
 8001f92:	f000 ff87 	bl	8002ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f96:	200f      	movs	r0, #15
 8001f98:	f000 f808 	bl	8001fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f9c:	f7ff fe70 	bl	8001c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40022000 	.word	0x40022000

08001fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb4:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_InitTick+0x54>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_InitTick+0x58>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 ff9f 	bl	8002f0e <HAL_SYSTICK_Config>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e00e      	b.n	8001ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b0f      	cmp	r3, #15
 8001fde:	d80a      	bhi.n	8001ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe8:	f000 ff67 	bl	8002eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fec:	4a06      	ldr	r2, [pc, #24]	; (8002008 <HAL_InitTick+0x5c>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e000      	b.n	8001ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000000 	.word	0x20000000
 8002004:	20000008 	.word	0x20000008
 8002008:	20000004 	.word	0x20000004

0800200c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <HAL_IncTick+0x1c>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_IncTick+0x20>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4413      	add	r3, r2
 800201c:	4a03      	ldr	r2, [pc, #12]	; (800202c <HAL_IncTick+0x20>)
 800201e:	6013      	str	r3, [r2, #0]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	20000008 	.word	0x20000008
 800202c:	20000158 	.word	0x20000158

08002030 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return uwTick;
 8002034:	4b02      	ldr	r3, [pc, #8]	; (8002040 <HAL_GetTick+0x10>)
 8002036:	681b      	ldr	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	20000158 	.word	0x20000158

08002044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800204c:	f7ff fff0 	bl	8002030 <HAL_GetTick>
 8002050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205c:	d005      	beq.n	800206a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <HAL_Delay+0x44>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800206a:	bf00      	nop
 800206c:	f7ff ffe0 	bl	8002030 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	429a      	cmp	r2, r3
 800207a:	d8f7      	bhi.n	800206c <HAL_Delay+0x28>
  {
  }
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000008 	.word	0x20000008

0800208c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e0ed      	b.n	800227a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d102      	bne.n	80020b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff fe1a 	bl	8001ce4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020c0:	f7ff ffb6 	bl	8002030 <HAL_GetTick>
 80020c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020c6:	e012      	b.n	80020ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020c8:	f7ff ffb2 	bl	8002030 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b0a      	cmp	r3, #10
 80020d4:	d90b      	bls.n	80020ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2205      	movs	r2, #5
 80020e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e0c5      	b.n	800227a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0e5      	beq.n	80020c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0202 	bic.w	r2, r2, #2
 800210a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800210c:	f7ff ff90 	bl	8002030 <HAL_GetTick>
 8002110:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002112:	e012      	b.n	800213a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002114:	f7ff ff8c 	bl	8002030 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b0a      	cmp	r3, #10
 8002120:	d90b      	bls.n	800213a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2205      	movs	r2, #5
 8002132:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e09f      	b.n	800227a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1e5      	bne.n	8002114 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	7e1b      	ldrb	r3, [r3, #24]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d108      	bne.n	8002162 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	e007      	b.n	8002172 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002170:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7e5b      	ldrb	r3, [r3, #25]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d108      	bne.n	800218c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e007      	b.n	800219c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800219a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	7e9b      	ldrb	r3, [r3, #26]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d108      	bne.n	80021b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0220 	orr.w	r2, r2, #32
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	e007      	b.n	80021c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0220 	bic.w	r2, r2, #32
 80021c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7edb      	ldrb	r3, [r3, #27]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d108      	bne.n	80021e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0210 	bic.w	r2, r2, #16
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	e007      	b.n	80021f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0210 	orr.w	r2, r2, #16
 80021ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	7f1b      	ldrb	r3, [r3, #28]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d108      	bne.n	800220a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0208 	orr.w	r2, r2, #8
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	e007      	b.n	800221a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0208 	bic.w	r2, r2, #8
 8002218:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	7f5b      	ldrb	r3, [r3, #29]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d108      	bne.n	8002234 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0204 	orr.w	r2, r2, #4
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	e007      	b.n	8002244 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0204 	bic.w	r2, r2, #4
 8002242:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	ea42 0103 	orr.w	r1, r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	1e5a      	subs	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002282:	b480      	push	{r7}
 8002284:	b087      	sub	sp, #28
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002298:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800229a:	7cfb      	ldrb	r3, [r7, #19]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d003      	beq.n	80022a8 <HAL_CAN_ConfigFilter+0x26>
 80022a0:	7cfb      	ldrb	r3, [r7, #19]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	f040 80aa 	bne.w	80023fc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022ae:	f043 0201 	orr.w	r2, r3, #1
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	f003 031f 	and.w	r3, r3, #31
 80022c0:	2201      	movs	r2, #1
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	401a      	ands	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d123      	bne.n	800232a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	401a      	ands	r2, r3
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002304:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	3248      	adds	r2, #72	; 0x48
 800230a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800231e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002320:	6979      	ldr	r1, [r7, #20]
 8002322:	3348      	adds	r3, #72	; 0x48
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d122      	bne.n	8002378 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	431a      	orrs	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002352:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	3248      	adds	r2, #72	; 0x48
 8002358:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800236c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800236e:	6979      	ldr	r1, [r7, #20]
 8002370:	3348      	adds	r3, #72	; 0x48
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	440b      	add	r3, r1
 8002376:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d109      	bne.n	8002394 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	43db      	mvns	r3, r3
 800238a:	401a      	ands	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002392:	e007      	b.n	80023a4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	431a      	orrs	r2, r3
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d109      	bne.n	80023c0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	401a      	ands	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80023be:	e007      	b.n	80023d0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	431a      	orrs	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d107      	bne.n	80023e8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	431a      	orrs	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023ee:	f023 0201 	bic.w	r2, r3, #1
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e006      	b.n	800240a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
  }
}
 800240a:	4618      	mov	r0, r3
 800240c:	371c      	adds	r7, #28
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d12e      	bne.n	8002486 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0201 	bic.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002440:	f7ff fdf6 	bl	8002030 <HAL_GetTick>
 8002444:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002446:	e012      	b.n	800246e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002448:	f7ff fdf2 	bl	8002030 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b0a      	cmp	r3, #10
 8002454:	d90b      	bls.n	800246e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2205      	movs	r2, #5
 8002466:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e012      	b.n	8002494 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1e5      	bne.n	8002448 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	e006      	b.n	8002494 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
  }
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	; 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024b0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80024ba:	7ffb      	ldrb	r3, [r7, #31]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d003      	beq.n	80024c8 <HAL_CAN_AddTxMessage+0x2c>
 80024c0:	7ffb      	ldrb	r3, [r7, #31]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	f040 80ad 	bne.w	8002622 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10a      	bne.n	80024e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d105      	bne.n	80024e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 8095 	beq.w	8002612 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	0e1b      	lsrs	r3, r3, #24
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80024f2:	2201      	movs	r2, #1
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	409a      	lsls	r2, r3
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10d      	bne.n	8002520 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800250e:	68f9      	ldr	r1, [r7, #12]
 8002510:	6809      	ldr	r1, [r1, #0]
 8002512:	431a      	orrs	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	3318      	adds	r3, #24
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	440b      	add	r3, r1
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	e00f      	b.n	8002540 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800252a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002530:	68f9      	ldr	r1, [r7, #12]
 8002532:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002534:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	3318      	adds	r3, #24
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	440b      	add	r3, r1
 800253e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6819      	ldr	r1, [r3, #0]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3318      	adds	r3, #24
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	440b      	add	r3, r1
 8002550:	3304      	adds	r3, #4
 8002552:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	7d1b      	ldrb	r3, [r3, #20]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d111      	bne.n	8002580 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	3318      	adds	r3, #24
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	4413      	add	r3, r2
 8002568:	3304      	adds	r3, #4
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	6811      	ldr	r1, [r2, #0]
 8002570:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	3318      	adds	r3, #24
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	440b      	add	r3, r1
 800257c:	3304      	adds	r3, #4
 800257e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3307      	adds	r3, #7
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	061a      	lsls	r2, r3, #24
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3306      	adds	r3, #6
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	041b      	lsls	r3, r3, #16
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3305      	adds	r3, #5
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	4313      	orrs	r3, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	3204      	adds	r2, #4
 80025a0:	7812      	ldrb	r2, [r2, #0]
 80025a2:	4610      	mov	r0, r2
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	6811      	ldr	r1, [r2, #0]
 80025a8:	ea43 0200 	orr.w	r2, r3, r0
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	440b      	add	r3, r1
 80025b2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80025b6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3303      	adds	r3, #3
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	061a      	lsls	r2, r3, #24
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3302      	adds	r3, #2
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	041b      	lsls	r3, r3, #16
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3301      	adds	r3, #1
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	021b      	lsls	r3, r3, #8
 80025d2:	4313      	orrs	r3, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	7812      	ldrb	r2, [r2, #0]
 80025d8:	4610      	mov	r0, r2
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	6811      	ldr	r1, [r2, #0]
 80025de:	ea43 0200 	orr.w	r2, r3, r0
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	440b      	add	r3, r1
 80025e8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80025ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	3318      	adds	r3, #24
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	4413      	add	r3, r2
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	6811      	ldr	r1, [r2, #0]
 8002600:	f043 0201 	orr.w	r2, r3, #1
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	3318      	adds	r3, #24
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	440b      	add	r3, r1
 800260c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	e00e      	b.n	8002630 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e006      	b.n	8002630 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
  }
}
 8002630:	4618      	mov	r0, r3
 8002632:	3724      	adds	r7, #36	; 0x24
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800263a:	b480      	push	{r7}
 800263c:	b087      	sub	sp, #28
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
 8002646:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800264e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002650:	7dfb      	ldrb	r3, [r7, #23]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d003      	beq.n	800265e <HAL_CAN_GetRxMessage+0x24>
 8002656:	7dfb      	ldrb	r3, [r7, #23]
 8002658:	2b02      	cmp	r3, #2
 800265a:	f040 8103 	bne.w	8002864 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10e      	bne.n	8002682 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d116      	bne.n	80026a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e0f7      	b.n	8002872 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d107      	bne.n	80026a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0e8      	b.n	8002872 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	331b      	adds	r3, #27
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	4413      	add	r3, r2
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0204 	and.w	r2, r3, #4
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10c      	bne.n	80026d8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	331b      	adds	r3, #27
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	4413      	add	r3, r2
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	0d5b      	lsrs	r3, r3, #21
 80026ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	e00b      	b.n	80026f0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	331b      	adds	r3, #27
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	4413      	add	r3, r2
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	08db      	lsrs	r3, r3, #3
 80026e8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	331b      	adds	r3, #27
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	4413      	add	r3, r2
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0202 	and.w	r2, r3, #2
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	331b      	adds	r3, #27
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	4413      	add	r3, r2
 8002712:	3304      	adds	r3, #4
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2208      	movs	r2, #8
 8002722:	611a      	str	r2, [r3, #16]
 8002724:	e00b      	b.n	800273e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	331b      	adds	r3, #27
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	4413      	add	r3, r2
 8002732:	3304      	adds	r3, #4
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 020f 	and.w	r2, r3, #15
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	331b      	adds	r3, #27
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	4413      	add	r3, r2
 800274a:	3304      	adds	r3, #4
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	b2da      	uxtb	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	331b      	adds	r3, #27
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	4413      	add	r3, r2
 8002762:	3304      	adds	r3, #4
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	0c1b      	lsrs	r3, r3, #16
 8002768:	b29a      	uxth	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	4413      	add	r3, r2
 8002778:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	b2da      	uxtb	r2, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	4413      	add	r3, r2
 800278e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	0a1a      	lsrs	r2, r3, #8
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	3301      	adds	r3, #1
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	0c1a      	lsrs	r2, r3, #16
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	3302      	adds	r3, #2
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	0e1a      	lsrs	r2, r3, #24
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	3303      	adds	r3, #3
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	4413      	add	r3, r2
 80027dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	3304      	adds	r3, #4
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	0a1a      	lsrs	r2, r3, #8
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	3305      	adds	r3, #5
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	4413      	add	r3, r2
 800280e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	0c1a      	lsrs	r2, r3, #16
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	3306      	adds	r3, #6
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	4413      	add	r3, r2
 8002828:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	0e1a      	lsrs	r2, r3, #24
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	3307      	adds	r3, #7
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d108      	bne.n	8002850 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 0220 	orr.w	r2, r2, #32
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	e007      	b.n	8002860 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0220 	orr.w	r2, r2, #32
 800285e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e006      	b.n	8002872 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
  }
}
 8002872:	4618      	mov	r0, r3
 8002874:	371c      	adds	r7, #28
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3020 	ldrb.w	r3, [r3, #32]
 800288c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d002      	beq.n	800289a <HAL_CAN_ActivateNotification+0x1e>
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d109      	bne.n	80028ae <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6959      	ldr	r1, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e006      	b.n	80028bc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
  }
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b08a      	sub	sp, #40	; 0x28
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d07c      	beq.n	8002a06 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d023      	beq.n	800295e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2201      	movs	r2, #1
 800291c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f983 	bl	8002c34 <HAL_CAN_TxMailbox0CompleteCallback>
 800292e:	e016      	b.n	800295e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	d004      	beq.n	8002944 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
 8002942:	e00c      	b.n	800295e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d004      	beq.n	8002958 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
 8002956:	e002      	b.n	800295e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f986 	bl	8002c6a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d024      	beq.n	80029b2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002970:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f962 	bl	8002c46 <HAL_CAN_TxMailbox1CompleteCallback>
 8002982:	e016      	b.n	80029b2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298a:	2b00      	cmp	r3, #0
 800298c:	d004      	beq.n	8002998 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
 8002996:	e00c      	b.n	80029b2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d004      	beq.n	80029ac <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
 80029aa:	e002      	b.n	80029b2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f965 	bl	8002c7c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d024      	beq.n	8002a06 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f941 	bl	8002c58 <HAL_CAN_TxMailbox2CompleteCallback>
 80029d6:	e016      	b.n	8002a06 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d004      	beq.n	80029ec <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ea:	e00c      	b.n	8002a06 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
 80029fe:	e002      	b.n	8002a06 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f944 	bl	8002c8e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00c      	beq.n	8002a2a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d007      	beq.n	8002a2a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2210      	movs	r2, #16
 8002a28:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00b      	beq.n	8002a4c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d006      	beq.n	8002a4c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2208      	movs	r2, #8
 8002a44:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f92a 	bl	8002ca0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff f87f 	bl	8001b68 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00c      	beq.n	8002a8e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2210      	movs	r2, #16
 8002a8c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00b      	beq.n	8002ab0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f90a 	bl	8002cc4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f8f2 	bl	8002cb2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00b      	beq.n	8002af0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d006      	beq.n	8002af0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2210      	movs	r2, #16
 8002ae8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f8f3 	bl	8002cd6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00b      	beq.n	8002b12 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d006      	beq.n	8002b12 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2208      	movs	r2, #8
 8002b0a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f8eb 	bl	8002ce8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d07b      	beq.n	8002c14 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d072      	beq.n	8002c0c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	f043 0302 	orr.w	r3, r3, #2
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	f043 0304 	orr.w	r3, r3, #4
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d043      	beq.n	8002c0c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d03e      	beq.n	8002c0c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b94:	2b60      	cmp	r3, #96	; 0x60
 8002b96:	d02b      	beq.n	8002bf0 <HAL_CAN_IRQHandler+0x32a>
 8002b98:	2b60      	cmp	r3, #96	; 0x60
 8002b9a:	d82e      	bhi.n	8002bfa <HAL_CAN_IRQHandler+0x334>
 8002b9c:	2b50      	cmp	r3, #80	; 0x50
 8002b9e:	d022      	beq.n	8002be6 <HAL_CAN_IRQHandler+0x320>
 8002ba0:	2b50      	cmp	r3, #80	; 0x50
 8002ba2:	d82a      	bhi.n	8002bfa <HAL_CAN_IRQHandler+0x334>
 8002ba4:	2b40      	cmp	r3, #64	; 0x40
 8002ba6:	d019      	beq.n	8002bdc <HAL_CAN_IRQHandler+0x316>
 8002ba8:	2b40      	cmp	r3, #64	; 0x40
 8002baa:	d826      	bhi.n	8002bfa <HAL_CAN_IRQHandler+0x334>
 8002bac:	2b30      	cmp	r3, #48	; 0x30
 8002bae:	d010      	beq.n	8002bd2 <HAL_CAN_IRQHandler+0x30c>
 8002bb0:	2b30      	cmp	r3, #48	; 0x30
 8002bb2:	d822      	bhi.n	8002bfa <HAL_CAN_IRQHandler+0x334>
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d002      	beq.n	8002bbe <HAL_CAN_IRQHandler+0x2f8>
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d005      	beq.n	8002bc8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002bbc:	e01d      	b.n	8002bfa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	f043 0308 	orr.w	r3, r3, #8
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bc6:	e019      	b.n	8002bfc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	f043 0310 	orr.w	r3, r3, #16
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bd0:	e014      	b.n	8002bfc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	f043 0320 	orr.w	r3, r3, #32
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bda:	e00f      	b.n	8002bfc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002be4:	e00a      	b.n	8002bfc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bee:	e005      	b.n	8002bfc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bf8:	e000      	b.n	8002bfc <HAL_CAN_IRQHandler+0x336>
            break;
 8002bfa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c0a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2204      	movs	r2, #4
 8002c12:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d008      	beq.n	8002c2c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f867 	bl	8002cfa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	3728      	adds	r7, #40	; 0x28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr

08002c6a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr

08002c8e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr

08002cfa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <__NVIC_SetPriorityGrouping+0x44>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d28:	4013      	ands	r3, r2
 8002d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d3e:	4a04      	ldr	r2, [pc, #16]	; (8002d50 <__NVIC_SetPriorityGrouping+0x44>)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	60d3      	str	r3, [r2, #12]
}
 8002d44:	bf00      	nop
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <__NVIC_GetPriorityGrouping+0x18>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	0a1b      	lsrs	r3, r3, #8
 8002d5e:	f003 0307 	and.w	r3, r3, #7
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	db0b      	blt.n	8002d9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	f003 021f 	and.w	r2, r3, #31
 8002d88:	4906      	ldr	r1, [pc, #24]	; (8002da4 <__NVIC_EnableIRQ+0x34>)
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	2001      	movs	r0, #1
 8002d92:	fa00 f202 	lsl.w	r2, r0, r2
 8002d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr
 8002da4:	e000e100 	.word	0xe000e100

08002da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	6039      	str	r1, [r7, #0]
 8002db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	db0a      	blt.n	8002dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	490c      	ldr	r1, [pc, #48]	; (8002df4 <__NVIC_SetPriority+0x4c>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	0112      	lsls	r2, r2, #4
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	440b      	add	r3, r1
 8002dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd0:	e00a      	b.n	8002de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4908      	ldr	r1, [pc, #32]	; (8002df8 <__NVIC_SetPriority+0x50>)
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	3b04      	subs	r3, #4
 8002de0:	0112      	lsls	r2, r2, #4
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	440b      	add	r3, r1
 8002de6:	761a      	strb	r2, [r3, #24]
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	e000e100 	.word	0xe000e100
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f1c3 0307 	rsb	r3, r3, #7
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	bf28      	it	cs
 8002e1a:	2304      	movcs	r3, #4
 8002e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3304      	adds	r3, #4
 8002e22:	2b06      	cmp	r3, #6
 8002e24:	d902      	bls.n	8002e2c <NVIC_EncodePriority+0x30>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3b03      	subs	r3, #3
 8002e2a:	e000      	b.n	8002e2e <NVIC_EncodePriority+0x32>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e30:	f04f 32ff 	mov.w	r2, #4294967295
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	401a      	ands	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e44:	f04f 31ff 	mov.w	r1, #4294967295
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	43d9      	mvns	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	4313      	orrs	r3, r2
         );
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3724      	adds	r7, #36	; 0x24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e70:	d301      	bcc.n	8002e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e72:	2301      	movs	r3, #1
 8002e74:	e00f      	b.n	8002e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e76:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <SysTick_Config+0x40>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e7e:	210f      	movs	r1, #15
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	f7ff ff90 	bl	8002da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <SysTick_Config+0x40>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e8e:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <SysTick_Config+0x40>)
 8002e90:	2207      	movs	r2, #7
 8002e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	e000e010 	.word	0xe000e010

08002ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff ff2d 	bl	8002d0c <__NVIC_SetPriorityGrouping>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ecc:	f7ff ff42 	bl	8002d54 <__NVIC_GetPriorityGrouping>
 8002ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	6978      	ldr	r0, [r7, #20]
 8002ed8:	f7ff ff90 	bl	8002dfc <NVIC_EncodePriority>
 8002edc:	4602      	mov	r2, r0
 8002ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ff5f 	bl	8002da8 <__NVIC_SetPriority>
}
 8002eea:	bf00      	nop
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	4603      	mov	r3, r0
 8002efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff35 	bl	8002d70 <__NVIC_EnableIRQ>
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff ffa2 	bl	8002e60 <SysTick_Config>
 8002f1c:	4603      	mov	r3, r0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b08b      	sub	sp, #44	; 0x2c
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f32:	2300      	movs	r3, #0
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f36:	2300      	movs	r3, #0
 8002f38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f3a:	e169      	b.n	8003210 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	69fa      	ldr	r2, [r7, #28]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	f040 8158 	bne.w	800320a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	4a9a      	ldr	r2, [pc, #616]	; (80031c8 <HAL_GPIO_Init+0x2a0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d05e      	beq.n	8003022 <HAL_GPIO_Init+0xfa>
 8002f64:	4a98      	ldr	r2, [pc, #608]	; (80031c8 <HAL_GPIO_Init+0x2a0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d875      	bhi.n	8003056 <HAL_GPIO_Init+0x12e>
 8002f6a:	4a98      	ldr	r2, [pc, #608]	; (80031cc <HAL_GPIO_Init+0x2a4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d058      	beq.n	8003022 <HAL_GPIO_Init+0xfa>
 8002f70:	4a96      	ldr	r2, [pc, #600]	; (80031cc <HAL_GPIO_Init+0x2a4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d86f      	bhi.n	8003056 <HAL_GPIO_Init+0x12e>
 8002f76:	4a96      	ldr	r2, [pc, #600]	; (80031d0 <HAL_GPIO_Init+0x2a8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d052      	beq.n	8003022 <HAL_GPIO_Init+0xfa>
 8002f7c:	4a94      	ldr	r2, [pc, #592]	; (80031d0 <HAL_GPIO_Init+0x2a8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d869      	bhi.n	8003056 <HAL_GPIO_Init+0x12e>
 8002f82:	4a94      	ldr	r2, [pc, #592]	; (80031d4 <HAL_GPIO_Init+0x2ac>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d04c      	beq.n	8003022 <HAL_GPIO_Init+0xfa>
 8002f88:	4a92      	ldr	r2, [pc, #584]	; (80031d4 <HAL_GPIO_Init+0x2ac>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d863      	bhi.n	8003056 <HAL_GPIO_Init+0x12e>
 8002f8e:	4a92      	ldr	r2, [pc, #584]	; (80031d8 <HAL_GPIO_Init+0x2b0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d046      	beq.n	8003022 <HAL_GPIO_Init+0xfa>
 8002f94:	4a90      	ldr	r2, [pc, #576]	; (80031d8 <HAL_GPIO_Init+0x2b0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d85d      	bhi.n	8003056 <HAL_GPIO_Init+0x12e>
 8002f9a:	2b12      	cmp	r3, #18
 8002f9c:	d82a      	bhi.n	8002ff4 <HAL_GPIO_Init+0xcc>
 8002f9e:	2b12      	cmp	r3, #18
 8002fa0:	d859      	bhi.n	8003056 <HAL_GPIO_Init+0x12e>
 8002fa2:	a201      	add	r2, pc, #4	; (adr r2, 8002fa8 <HAL_GPIO_Init+0x80>)
 8002fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa8:	08003023 	.word	0x08003023
 8002fac:	08002ffd 	.word	0x08002ffd
 8002fb0:	0800300f 	.word	0x0800300f
 8002fb4:	08003051 	.word	0x08003051
 8002fb8:	08003057 	.word	0x08003057
 8002fbc:	08003057 	.word	0x08003057
 8002fc0:	08003057 	.word	0x08003057
 8002fc4:	08003057 	.word	0x08003057
 8002fc8:	08003057 	.word	0x08003057
 8002fcc:	08003057 	.word	0x08003057
 8002fd0:	08003057 	.word	0x08003057
 8002fd4:	08003057 	.word	0x08003057
 8002fd8:	08003057 	.word	0x08003057
 8002fdc:	08003057 	.word	0x08003057
 8002fe0:	08003057 	.word	0x08003057
 8002fe4:	08003057 	.word	0x08003057
 8002fe8:	08003057 	.word	0x08003057
 8002fec:	08003005 	.word	0x08003005
 8002ff0:	08003019 	.word	0x08003019
 8002ff4:	4a79      	ldr	r2, [pc, #484]	; (80031dc <HAL_GPIO_Init+0x2b4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d013      	beq.n	8003022 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ffa:	e02c      	b.n	8003056 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	623b      	str	r3, [r7, #32]
          break;
 8003002:	e029      	b.n	8003058 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	3304      	adds	r3, #4
 800300a:	623b      	str	r3, [r7, #32]
          break;
 800300c:	e024      	b.n	8003058 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	3308      	adds	r3, #8
 8003014:	623b      	str	r3, [r7, #32]
          break;
 8003016:	e01f      	b.n	8003058 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	330c      	adds	r3, #12
 800301e:	623b      	str	r3, [r7, #32]
          break;
 8003020:	e01a      	b.n	8003058 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800302a:	2304      	movs	r3, #4
 800302c:	623b      	str	r3, [r7, #32]
          break;
 800302e:	e013      	b.n	8003058 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d105      	bne.n	8003044 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003038:	2308      	movs	r3, #8
 800303a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	611a      	str	r2, [r3, #16]
          break;
 8003042:	e009      	b.n	8003058 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003044:	2308      	movs	r3, #8
 8003046:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	615a      	str	r2, [r3, #20]
          break;
 800304e:	e003      	b.n	8003058 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003050:	2300      	movs	r3, #0
 8003052:	623b      	str	r3, [r7, #32]
          break;
 8003054:	e000      	b.n	8003058 <HAL_GPIO_Init+0x130>
          break;
 8003056:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	2bff      	cmp	r3, #255	; 0xff
 800305c:	d801      	bhi.n	8003062 <HAL_GPIO_Init+0x13a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	e001      	b.n	8003066 <HAL_GPIO_Init+0x13e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3304      	adds	r3, #4
 8003066:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	2bff      	cmp	r3, #255	; 0xff
 800306c:	d802      	bhi.n	8003074 <HAL_GPIO_Init+0x14c>
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	e002      	b.n	800307a <HAL_GPIO_Init+0x152>
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	3b08      	subs	r3, #8
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	210f      	movs	r1, #15
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	fa01 f303 	lsl.w	r3, r1, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	401a      	ands	r2, r3
 800308c:	6a39      	ldr	r1, [r7, #32]
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	fa01 f303 	lsl.w	r3, r1, r3
 8003094:	431a      	orrs	r2, r3
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 80b1 	beq.w	800320a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030a8:	4b4d      	ldr	r3, [pc, #308]	; (80031e0 <HAL_GPIO_Init+0x2b8>)
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	4a4c      	ldr	r2, [pc, #304]	; (80031e0 <HAL_GPIO_Init+0x2b8>)
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	6193      	str	r3, [r2, #24]
 80030b4:	4b4a      	ldr	r3, [pc, #296]	; (80031e0 <HAL_GPIO_Init+0x2b8>)
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030c0:	4a48      	ldr	r2, [pc, #288]	; (80031e4 <HAL_GPIO_Init+0x2bc>)
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	089b      	lsrs	r3, r3, #2
 80030c6:	3302      	adds	r3, #2
 80030c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	220f      	movs	r2, #15
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4013      	ands	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a40      	ldr	r2, [pc, #256]	; (80031e8 <HAL_GPIO_Init+0x2c0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d013      	beq.n	8003114 <HAL_GPIO_Init+0x1ec>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a3f      	ldr	r2, [pc, #252]	; (80031ec <HAL_GPIO_Init+0x2c4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00d      	beq.n	8003110 <HAL_GPIO_Init+0x1e8>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a3e      	ldr	r2, [pc, #248]	; (80031f0 <HAL_GPIO_Init+0x2c8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d007      	beq.n	800310c <HAL_GPIO_Init+0x1e4>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a3d      	ldr	r2, [pc, #244]	; (80031f4 <HAL_GPIO_Init+0x2cc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d101      	bne.n	8003108 <HAL_GPIO_Init+0x1e0>
 8003104:	2303      	movs	r3, #3
 8003106:	e006      	b.n	8003116 <HAL_GPIO_Init+0x1ee>
 8003108:	2304      	movs	r3, #4
 800310a:	e004      	b.n	8003116 <HAL_GPIO_Init+0x1ee>
 800310c:	2302      	movs	r3, #2
 800310e:	e002      	b.n	8003116 <HAL_GPIO_Init+0x1ee>
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <HAL_GPIO_Init+0x1ee>
 8003114:	2300      	movs	r3, #0
 8003116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003118:	f002 0203 	and.w	r2, r2, #3
 800311c:	0092      	lsls	r2, r2, #2
 800311e:	4093      	lsls	r3, r2
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003126:	492f      	ldr	r1, [pc, #188]	; (80031e4 <HAL_GPIO_Init+0x2bc>)
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	3302      	adds	r3, #2
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d006      	beq.n	800314e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003140:	4b2d      	ldr	r3, [pc, #180]	; (80031f8 <HAL_GPIO_Init+0x2d0>)
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	492c      	ldr	r1, [pc, #176]	; (80031f8 <HAL_GPIO_Init+0x2d0>)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	608b      	str	r3, [r1, #8]
 800314c:	e006      	b.n	800315c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800314e:	4b2a      	ldr	r3, [pc, #168]	; (80031f8 <HAL_GPIO_Init+0x2d0>)
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	43db      	mvns	r3, r3
 8003156:	4928      	ldr	r1, [pc, #160]	; (80031f8 <HAL_GPIO_Init+0x2d0>)
 8003158:	4013      	ands	r3, r2
 800315a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d006      	beq.n	8003176 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003168:	4b23      	ldr	r3, [pc, #140]	; (80031f8 <HAL_GPIO_Init+0x2d0>)
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	4922      	ldr	r1, [pc, #136]	; (80031f8 <HAL_GPIO_Init+0x2d0>)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	4313      	orrs	r3, r2
 8003172:	60cb      	str	r3, [r1, #12]
 8003174:	e006      	b.n	8003184 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003176:	4b20      	ldr	r3, [pc, #128]	; (80031f8 <HAL_GPIO_Init+0x2d0>)
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	43db      	mvns	r3, r3
 800317e:	491e      	ldr	r1, [pc, #120]	; (80031f8 <HAL_GPIO_Init+0x2d0>)
 8003180:	4013      	ands	r3, r2
 8003182:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d006      	beq.n	800319e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003190:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <HAL_GPIO_Init+0x2d0>)
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	4918      	ldr	r1, [pc, #96]	; (80031f8 <HAL_GPIO_Init+0x2d0>)
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	4313      	orrs	r3, r2
 800319a:	604b      	str	r3, [r1, #4]
 800319c:	e006      	b.n	80031ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800319e:	4b16      	ldr	r3, [pc, #88]	; (80031f8 <HAL_GPIO_Init+0x2d0>)
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	4914      	ldr	r1, [pc, #80]	; (80031f8 <HAL_GPIO_Init+0x2d0>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d021      	beq.n	80031fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031b8:	4b0f      	ldr	r3, [pc, #60]	; (80031f8 <HAL_GPIO_Init+0x2d0>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	490e      	ldr	r1, [pc, #56]	; (80031f8 <HAL_GPIO_Init+0x2d0>)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	600b      	str	r3, [r1, #0]
 80031c4:	e021      	b.n	800320a <HAL_GPIO_Init+0x2e2>
 80031c6:	bf00      	nop
 80031c8:	10320000 	.word	0x10320000
 80031cc:	10310000 	.word	0x10310000
 80031d0:	10220000 	.word	0x10220000
 80031d4:	10210000 	.word	0x10210000
 80031d8:	10120000 	.word	0x10120000
 80031dc:	10110000 	.word	0x10110000
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40010000 	.word	0x40010000
 80031e8:	40010800 	.word	0x40010800
 80031ec:	40010c00 	.word	0x40010c00
 80031f0:	40011000 	.word	0x40011000
 80031f4:	40011400 	.word	0x40011400
 80031f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_GPIO_Init+0x304>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	43db      	mvns	r3, r3
 8003204:	4909      	ldr	r1, [pc, #36]	; (800322c <HAL_GPIO_Init+0x304>)
 8003206:	4013      	ands	r3, r2
 8003208:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	3301      	adds	r3, #1
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	fa22 f303 	lsr.w	r3, r2, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	f47f ae8e 	bne.w	8002f3c <HAL_GPIO_Init+0x14>
  }
}
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	372c      	adds	r7, #44	; 0x2c
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr
 800322c:	40010400 	.word	0x40010400

08003230 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e12b      	b.n	800349a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fe fda0 	bl	8001d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	; 0x24
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003282:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003292:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003294:	f001 fbca 	bl	8004a2c <HAL_RCC_GetPCLK1Freq>
 8003298:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4a81      	ldr	r2, [pc, #516]	; (80034a4 <HAL_I2C_Init+0x274>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d807      	bhi.n	80032b4 <HAL_I2C_Init+0x84>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4a80      	ldr	r2, [pc, #512]	; (80034a8 <HAL_I2C_Init+0x278>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	bf94      	ite	ls
 80032ac:	2301      	movls	r3, #1
 80032ae:	2300      	movhi	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	e006      	b.n	80032c2 <HAL_I2C_Init+0x92>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a7d      	ldr	r2, [pc, #500]	; (80034ac <HAL_I2C_Init+0x27c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	bf94      	ite	ls
 80032bc:	2301      	movls	r3, #1
 80032be:	2300      	movhi	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0e7      	b.n	800349a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a78      	ldr	r2, [pc, #480]	; (80034b0 <HAL_I2C_Init+0x280>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	0c9b      	lsrs	r3, r3, #18
 80032d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4a6a      	ldr	r2, [pc, #424]	; (80034a4 <HAL_I2C_Init+0x274>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d802      	bhi.n	8003304 <HAL_I2C_Init+0xd4>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	3301      	adds	r3, #1
 8003302:	e009      	b.n	8003318 <HAL_I2C_Init+0xe8>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800330a:	fb02 f303 	mul.w	r3, r2, r3
 800330e:	4a69      	ldr	r2, [pc, #420]	; (80034b4 <HAL_I2C_Init+0x284>)
 8003310:	fba2 2303 	umull	r2, r3, r2, r3
 8003314:	099b      	lsrs	r3, r3, #6
 8003316:	3301      	adds	r3, #1
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	430b      	orrs	r3, r1
 800331e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800332a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	495c      	ldr	r1, [pc, #368]	; (80034a4 <HAL_I2C_Init+0x274>)
 8003334:	428b      	cmp	r3, r1
 8003336:	d819      	bhi.n	800336c <HAL_I2C_Init+0x13c>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1e59      	subs	r1, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	fbb1 f3f3 	udiv	r3, r1, r3
 8003346:	1c59      	adds	r1, r3, #1
 8003348:	f640 73fc 	movw	r3, #4092	; 0xffc
 800334c:	400b      	ands	r3, r1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_I2C_Init+0x138>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1e59      	subs	r1, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003360:	3301      	adds	r3, #1
 8003362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003366:	e051      	b.n	800340c <HAL_I2C_Init+0x1dc>
 8003368:	2304      	movs	r3, #4
 800336a:	e04f      	b.n	800340c <HAL_I2C_Init+0x1dc>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d111      	bne.n	8003398 <HAL_I2C_Init+0x168>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1e58      	subs	r0, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	440b      	add	r3, r1
 8003382:	fbb0 f3f3 	udiv	r3, r0, r3
 8003386:	3301      	adds	r3, #1
 8003388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338c:	2b00      	cmp	r3, #0
 800338e:	bf0c      	ite	eq
 8003390:	2301      	moveq	r3, #1
 8003392:	2300      	movne	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	e012      	b.n	80033be <HAL_I2C_Init+0x18e>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1e58      	subs	r0, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	0099      	lsls	r1, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ae:	3301      	adds	r3, #1
 80033b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Init+0x196>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e022      	b.n	800340c <HAL_I2C_Init+0x1dc>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10e      	bne.n	80033ec <HAL_I2C_Init+0x1bc>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1e58      	subs	r0, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6859      	ldr	r1, [r3, #4]
 80033d6:	460b      	mov	r3, r1
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	440b      	add	r3, r1
 80033dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e0:	3301      	adds	r3, #1
 80033e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ea:	e00f      	b.n	800340c <HAL_I2C_Init+0x1dc>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1e58      	subs	r0, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	0099      	lsls	r1, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003402:	3301      	adds	r3, #1
 8003404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	6809      	ldr	r1, [r1, #0]
 8003410:	4313      	orrs	r3, r2
 8003412:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800343a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6911      	ldr	r1, [r2, #16]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68d2      	ldr	r2, [r2, #12]
 8003446:	4311      	orrs	r1, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	430b      	orrs	r3, r1
 800344e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	000186a0 	.word	0x000186a0
 80034a8:	001e847f 	.word	0x001e847f
 80034ac:	003d08ff 	.word	0x003d08ff
 80034b0:	431bde83 	.word	0x431bde83
 80034b4:	10624dd3 	.word	0x10624dd3

080034b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	461a      	mov	r2, r3
 80034c4:	460b      	mov	r3, r1
 80034c6:	817b      	strh	r3, [r7, #10]
 80034c8:	4613      	mov	r3, r2
 80034ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034cc:	f7fe fdb0 	bl	8002030 <HAL_GetTick>
 80034d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b20      	cmp	r3, #32
 80034dc:	f040 80e0 	bne.w	80036a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2319      	movs	r3, #25
 80034e6:	2201      	movs	r2, #1
 80034e8:	4970      	ldr	r1, [pc, #448]	; (80036ac <HAL_I2C_Master_Transmit+0x1f4>)
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fc9e 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80034f6:	2302      	movs	r3, #2
 80034f8:	e0d3      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_I2C_Master_Transmit+0x50>
 8003504:	2302      	movs	r3, #2
 8003506:	e0cc      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b01      	cmp	r3, #1
 800351c:	d007      	beq.n	800352e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800353c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2221      	movs	r2, #33	; 0x21
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2210      	movs	r2, #16
 800354a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	893a      	ldrh	r2, [r7, #8]
 800355e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4a50      	ldr	r2, [pc, #320]	; (80036b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800356e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003570:	8979      	ldrh	r1, [r7, #10]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	6a3a      	ldr	r2, [r7, #32]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fb08 	bl	8003b8c <I2C_MasterRequestWrite>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e08d      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800359c:	e066      	b.n	800366c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	6a39      	ldr	r1, [r7, #32]
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 fd5c 	bl	8004060 <I2C_WaitOnTXEFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00d      	beq.n	80035ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d107      	bne.n	80035c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e06b      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	781a      	ldrb	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b04      	cmp	r3, #4
 8003606:	d11b      	bne.n	8003640 <HAL_I2C_Master_Transmit+0x188>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360c:	2b00      	cmp	r3, #0
 800360e:	d017      	beq.n	8003640 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	781a      	ldrb	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	6a39      	ldr	r1, [r7, #32]
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fd53 	bl	80040f0 <I2C_WaitOnBTFFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	2b04      	cmp	r3, #4
 8003656:	d107      	bne.n	8003668 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003666:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e01a      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003670:	2b00      	cmp	r3, #0
 8003672:	d194      	bne.n	800359e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	e000      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036a0:	2302      	movs	r3, #2
  }
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	00100002 	.word	0x00100002
 80036b0:	ffff0000 	.word	0xffff0000

080036b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08c      	sub	sp, #48	; 0x30
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	607a      	str	r2, [r7, #4]
 80036be:	461a      	mov	r2, r3
 80036c0:	460b      	mov	r3, r1
 80036c2:	817b      	strh	r3, [r7, #10]
 80036c4:	4613      	mov	r3, r2
 80036c6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036cc:	f7fe fcb0 	bl	8002030 <HAL_GetTick>
 80036d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b20      	cmp	r3, #32
 80036dc:	f040 824b 	bne.w	8003b76 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	2319      	movs	r3, #25
 80036e6:	2201      	movs	r2, #1
 80036e8:	497f      	ldr	r1, [pc, #508]	; (80038e8 <HAL_I2C_Master_Receive+0x234>)
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 fb9e 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80036f6:	2302      	movs	r3, #2
 80036f8:	e23e      	b.n	8003b78 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_I2C_Master_Receive+0x54>
 8003704:	2302      	movs	r3, #2
 8003706:	e237      	b.n	8003b78 <HAL_I2C_Master_Receive+0x4c4>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b01      	cmp	r3, #1
 800371c:	d007      	beq.n	800372e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0201 	orr.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800373c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2222      	movs	r2, #34	; 0x22
 8003742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2210      	movs	r2, #16
 800374a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	893a      	ldrh	r2, [r7, #8]
 800375e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4a5f      	ldr	r2, [pc, #380]	; (80038ec <HAL_I2C_Master_Receive+0x238>)
 800376e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003770:	8979      	ldrh	r1, [r7, #10]
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 fa8a 	bl	8003c90 <I2C_MasterRequestRead>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e1f8      	b.n	8003b78 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378a:	2b00      	cmp	r3, #0
 800378c:	d113      	bne.n	80037b6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800378e:	2300      	movs	r3, #0
 8003790:	61fb      	str	r3, [r7, #28]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	61fb      	str	r3, [r7, #28]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	61fb      	str	r3, [r7, #28]
 80037a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	e1cc      	b.n	8003b50 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d11e      	bne.n	80037fc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037ce:	b672      	cpsid	i
}
 80037d0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d2:	2300      	movs	r3, #0
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037f8:	b662      	cpsie	i
}
 80037fa:	e035      	b.n	8003868 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003800:	2b02      	cmp	r3, #2
 8003802:	d11e      	bne.n	8003842 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003812:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003814:	b672      	cpsid	i
}
 8003816:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800383c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800383e:	b662      	cpsie	i
}
 8003840:	e012      	b.n	8003868 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003850:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003852:	2300      	movs	r3, #0
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003868:	e172      	b.n	8003b50 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386e:	2b03      	cmp	r3, #3
 8003870:	f200 811f 	bhi.w	8003ab2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003878:	2b01      	cmp	r3, #1
 800387a:	d123      	bne.n	80038c4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800387c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 fc7d 	bl	8004180 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e173      	b.n	8003b78 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691a      	ldr	r2, [r3, #16]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038c2:	e145      	b.n	8003b50 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d152      	bne.n	8003972 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	2200      	movs	r2, #0
 80038d4:	4906      	ldr	r1, [pc, #24]	; (80038f0 <HAL_I2C_Master_Receive+0x23c>)
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 faa8 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d008      	beq.n	80038f4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e148      	b.n	8003b78 <HAL_I2C_Master_Receive+0x4c4>
 80038e6:	bf00      	nop
 80038e8:	00100002 	.word	0x00100002
 80038ec:	ffff0000 	.word	0xffff0000
 80038f0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80038f4:	b672      	cpsid	i
}
 80038f6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003906:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800393a:	b662      	cpsie	i
}
 800393c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003970:	e0ee      	b.n	8003b50 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	2200      	movs	r2, #0
 800397a:	4981      	ldr	r1, [pc, #516]	; (8003b80 <HAL_I2C_Master_Receive+0x4cc>)
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 fa55 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0f5      	b.n	8003b78 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800399a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800399c:	b672      	cpsid	i
}
 800399e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039d2:	4b6c      	ldr	r3, [pc, #432]	; (8003b84 <HAL_I2C_Master_Receive+0x4d0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	08db      	lsrs	r3, r3, #3
 80039d8:	4a6b      	ldr	r2, [pc, #428]	; (8003b88 <HAL_I2C_Master_Receive+0x4d4>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	0a1a      	lsrs	r2, r3, #8
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	00da      	lsls	r2, r3, #3
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d118      	bne.n	8003a2a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f043 0220 	orr.w	r2, r3, #32
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003a1a:	b662      	cpsie	i
}
 8003a1c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e0a6      	b.n	8003b78 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d1d9      	bne.n	80039ec <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691a      	ldr	r2, [r3, #16]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a7a:	b662      	cpsie	i
}
 8003a7c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ab0:	e04e      	b.n	8003b50 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fb62 	bl	8004180 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e058      	b.n	8003b78 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f003 0304 	and.w	r3, r3, #4
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d124      	bne.n	8003b50 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d107      	bne.n	8003b1e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f47f ae88 	bne.w	800386a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e000      	b.n	8003b78 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003b76:	2302      	movs	r3, #2
  }
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3728      	adds	r7, #40	; 0x28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	00010004 	.word	0x00010004
 8003b84:	20000000 	.word	0x20000000
 8003b88:	14f8b589 	.word	0x14f8b589

08003b8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d006      	beq.n	8003bb6 <I2C_MasterRequestWrite+0x2a>
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d003      	beq.n	8003bb6 <I2C_MasterRequestWrite+0x2a>
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bb4:	d108      	bne.n	8003bc8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	e00b      	b.n	8003be0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bcc:	2b12      	cmp	r3, #18
 8003bce:	d107      	bne.n	8003be0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f91d 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00d      	beq.n	8003c14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c06:	d103      	bne.n	8003c10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e035      	b.n	8003c80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c1c:	d108      	bne.n	8003c30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c1e:	897b      	ldrh	r3, [r7, #10]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c2c:	611a      	str	r2, [r3, #16]
 8003c2e:	e01b      	b.n	8003c68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c30:	897b      	ldrh	r3, [r7, #10]
 8003c32:	11db      	asrs	r3, r3, #7
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	f003 0306 	and.w	r3, r3, #6
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	f063 030f 	orn	r3, r3, #15
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	490e      	ldr	r1, [pc, #56]	; (8003c88 <I2C_MasterRequestWrite+0xfc>)
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f966 	bl	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e010      	b.n	8003c80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c5e:	897b      	ldrh	r3, [r7, #10]
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	4907      	ldr	r1, [pc, #28]	; (8003c8c <I2C_MasterRequestWrite+0x100>)
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 f956 	bl	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	00010008 	.word	0x00010008
 8003c8c:	00010002 	.word	0x00010002

08003c90 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cb4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d006      	beq.n	8003cca <I2C_MasterRequestRead+0x3a>
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d003      	beq.n	8003cca <I2C_MasterRequestRead+0x3a>
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cc8:	d108      	bne.n	8003cdc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	e00b      	b.n	8003cf4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	2b11      	cmp	r3, #17
 8003ce2:	d107      	bne.n	8003cf4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cf2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f893 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00d      	beq.n	8003d28 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d1a:	d103      	bne.n	8003d24 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e079      	b.n	8003e1c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d30:	d108      	bne.n	8003d44 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d32:	897b      	ldrh	r3, [r7, #10]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	611a      	str	r2, [r3, #16]
 8003d42:	e05f      	b.n	8003e04 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d44:	897b      	ldrh	r3, [r7, #10]
 8003d46:	11db      	asrs	r3, r3, #7
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f003 0306 	and.w	r3, r3, #6
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	f063 030f 	orn	r3, r3, #15
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	4930      	ldr	r1, [pc, #192]	; (8003e24 <I2C_MasterRequestRead+0x194>)
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f8dc 	bl	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e054      	b.n	8003e1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d72:	897b      	ldrh	r3, [r7, #10]
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	4929      	ldr	r1, [pc, #164]	; (8003e28 <I2C_MasterRequestRead+0x198>)
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 f8cc 	bl	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e044      	b.n	8003e1c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d92:	2300      	movs	r3, #0
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003db6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f831 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00d      	beq.n	8003dec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dde:	d103      	bne.n	8003de8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003de6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e017      	b.n	8003e1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003dec:	897b      	ldrh	r3, [r7, #10]
 8003dee:	11db      	asrs	r3, r3, #7
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	f003 0306 	and.w	r3, r3, #6
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	f063 030e 	orn	r3, r3, #14
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	4907      	ldr	r1, [pc, #28]	; (8003e28 <I2C_MasterRequestRead+0x198>)
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f888 	bl	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	00010008 	.word	0x00010008
 8003e28:	00010002 	.word	0x00010002

08003e2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e3c:	e048      	b.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e44:	d044      	beq.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e46:	f7fe f8f3 	bl	8002030 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d302      	bcc.n	8003e5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d139      	bne.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	0c1b      	lsrs	r3, r3, #16
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d10d      	bne.n	8003e82 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	43da      	mvns	r2, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	4013      	ands	r3, r2
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bf0c      	ite	eq
 8003e78:	2301      	moveq	r3, #1
 8003e7a:	2300      	movne	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	e00c      	b.n	8003e9c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	43da      	mvns	r2, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	bf0c      	ite	eq
 8003e94:	2301      	moveq	r3, #1
 8003e96:	2300      	movne	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d116      	bne.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	f043 0220 	orr.w	r2, r3, #32
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e023      	b.n	8003f18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	0c1b      	lsrs	r3, r3, #16
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d10d      	bne.n	8003ef6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	43da      	mvns	r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	bf0c      	ite	eq
 8003eec:	2301      	moveq	r3, #1
 8003eee:	2300      	movne	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	e00c      	b.n	8003f10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	43da      	mvns	r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	4013      	ands	r3, r2
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf0c      	ite	eq
 8003f08:	2301      	moveq	r3, #1
 8003f0a:	2300      	movne	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	79fb      	ldrb	r3, [r7, #7]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d093      	beq.n	8003e3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f2e:	e071      	b.n	8004014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f3e:	d123      	bne.n	8003f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	f043 0204 	orr.w	r2, r3, #4
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e067      	b.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8e:	d041      	beq.n	8004014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f90:	f7fe f84e 	bl	8002030 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d302      	bcc.n	8003fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d136      	bne.n	8004014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	0c1b      	lsrs	r3, r3, #16
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d10c      	bne.n	8003fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	43da      	mvns	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	bf14      	ite	ne
 8003fc2:	2301      	movne	r3, #1
 8003fc4:	2300      	moveq	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	e00b      	b.n	8003fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	43da      	mvns	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	bf14      	ite	ne
 8003fdc:	2301      	movne	r3, #1
 8003fde:	2300      	moveq	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d016      	beq.n	8004014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	f043 0220 	orr.w	r2, r3, #32
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e021      	b.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	0c1b      	lsrs	r3, r3, #16
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b01      	cmp	r3, #1
 800401c:	d10c      	bne.n	8004038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	43da      	mvns	r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	4013      	ands	r3, r2
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	bf14      	ite	ne
 8004030:	2301      	movne	r3, #1
 8004032:	2300      	moveq	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	e00b      	b.n	8004050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	43da      	mvns	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4013      	ands	r3, r2
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	bf14      	ite	ne
 800404a:	2301      	movne	r3, #1
 800404c:	2300      	moveq	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	f47f af6d 	bne.w	8003f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800406c:	e034      	b.n	80040d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f8e3 	bl	800423a <I2C_IsAcknowledgeFailed>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e034      	b.n	80040e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004084:	d028      	beq.n	80040d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004086:	f7fd ffd3 	bl	8002030 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	429a      	cmp	r2, r3
 8004094:	d302      	bcc.n	800409c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d11d      	bne.n	80040d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a6:	2b80      	cmp	r3, #128	; 0x80
 80040a8:	d016      	beq.n	80040d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	f043 0220 	orr.w	r2, r3, #32
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e007      	b.n	80040e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e2:	2b80      	cmp	r3, #128	; 0x80
 80040e4:	d1c3      	bne.n	800406e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040fc:	e034      	b.n	8004168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f89b 	bl	800423a <I2C_IsAcknowledgeFailed>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e034      	b.n	8004178 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004114:	d028      	beq.n	8004168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004116:	f7fd ff8b 	bl	8002030 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	429a      	cmp	r2, r3
 8004124:	d302      	bcc.n	800412c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d11d      	bne.n	8004168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b04      	cmp	r3, #4
 8004138:	d016      	beq.n	8004168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	f043 0220 	orr.w	r2, r3, #32
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e007      	b.n	8004178 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b04      	cmp	r3, #4
 8004174:	d1c3      	bne.n	80040fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800418c:	e049      	b.n	8004222 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	2b10      	cmp	r3, #16
 800419a:	d119      	bne.n	80041d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0210 	mvn.w	r2, #16
 80041a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e030      	b.n	8004232 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d0:	f7fd ff2e 	bl	8002030 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d302      	bcc.n	80041e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d11d      	bne.n	8004222 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f0:	2b40      	cmp	r3, #64	; 0x40
 80041f2:	d016      	beq.n	8004222 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f043 0220 	orr.w	r2, r3, #32
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e007      	b.n	8004232 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422c:	2b40      	cmp	r3, #64	; 0x40
 800422e:	d1ae      	bne.n	800418e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004250:	d11b      	bne.n	800428a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800425a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f043 0204 	orr.w	r2, r3, #4
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr
	...

08004298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e272      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8087 	beq.w	80043c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042b8:	4b92      	ldr	r3, [pc, #584]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 030c 	and.w	r3, r3, #12
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d00c      	beq.n	80042de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042c4:	4b8f      	ldr	r3, [pc, #572]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 030c 	and.w	r3, r3, #12
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d112      	bne.n	80042f6 <HAL_RCC_OscConfig+0x5e>
 80042d0:	4b8c      	ldr	r3, [pc, #560]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042dc:	d10b      	bne.n	80042f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042de:	4b89      	ldr	r3, [pc, #548]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d06c      	beq.n	80043c4 <HAL_RCC_OscConfig+0x12c>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d168      	bne.n	80043c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e24c      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042fe:	d106      	bne.n	800430e <HAL_RCC_OscConfig+0x76>
 8004300:	4b80      	ldr	r3, [pc, #512]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a7f      	ldr	r2, [pc, #508]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	e02e      	b.n	800436c <HAL_RCC_OscConfig+0xd4>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10c      	bne.n	8004330 <HAL_RCC_OscConfig+0x98>
 8004316:	4b7b      	ldr	r3, [pc, #492]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a7a      	ldr	r2, [pc, #488]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 800431c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	4b78      	ldr	r3, [pc, #480]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a77      	ldr	r2, [pc, #476]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004328:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e01d      	b.n	800436c <HAL_RCC_OscConfig+0xd4>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004338:	d10c      	bne.n	8004354 <HAL_RCC_OscConfig+0xbc>
 800433a:	4b72      	ldr	r3, [pc, #456]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a71      	ldr	r2, [pc, #452]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	4b6f      	ldr	r3, [pc, #444]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a6e      	ldr	r2, [pc, #440]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 800434c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e00b      	b.n	800436c <HAL_RCC_OscConfig+0xd4>
 8004354:	4b6b      	ldr	r3, [pc, #428]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a6a      	ldr	r2, [pc, #424]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 800435a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	4b68      	ldr	r3, [pc, #416]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a67      	ldr	r2, [pc, #412]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800436a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d013      	beq.n	800439c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fd fe5c 	bl	8002030 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800437c:	f7fd fe58 	bl	8002030 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	; 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e200      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438e:	4b5d      	ldr	r3, [pc, #372]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0xe4>
 800439a:	e014      	b.n	80043c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439c:	f7fd fe48 	bl	8002030 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a4:	f7fd fe44 	bl	8002030 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	; 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e1ec      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043b6:	4b53      	ldr	r3, [pc, #332]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0x10c>
 80043c2:	e000      	b.n	80043c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d063      	beq.n	800449a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043d2:	4b4c      	ldr	r3, [pc, #304]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00b      	beq.n	80043f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043de:	4b49      	ldr	r3, [pc, #292]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f003 030c 	and.w	r3, r3, #12
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d11c      	bne.n	8004424 <HAL_RCC_OscConfig+0x18c>
 80043ea:	4b46      	ldr	r3, [pc, #280]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d116      	bne.n	8004424 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f6:	4b43      	ldr	r3, [pc, #268]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d005      	beq.n	800440e <HAL_RCC_OscConfig+0x176>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d001      	beq.n	800440e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e1c0      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440e:	4b3d      	ldr	r3, [pc, #244]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4939      	ldr	r1, [pc, #228]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 800441e:	4313      	orrs	r3, r2
 8004420:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004422:	e03a      	b.n	800449a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d020      	beq.n	800446e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800442c:	4b36      	ldr	r3, [pc, #216]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004432:	f7fd fdfd 	bl	8002030 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800443a:	f7fd fdf9 	bl	8002030 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e1a1      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444c:	4b2d      	ldr	r3, [pc, #180]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004458:	4b2a      	ldr	r3, [pc, #168]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4927      	ldr	r1, [pc, #156]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004468:	4313      	orrs	r3, r2
 800446a:	600b      	str	r3, [r1, #0]
 800446c:	e015      	b.n	800449a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800446e:	4b26      	ldr	r3, [pc, #152]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004474:	f7fd fddc 	bl	8002030 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800447c:	f7fd fdd8 	bl	8002030 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e180      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800448e:	4b1d      	ldr	r3, [pc, #116]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d03a      	beq.n	800451c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d019      	beq.n	80044e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ae:	4b17      	ldr	r3, [pc, #92]	; (800450c <HAL_RCC_OscConfig+0x274>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b4:	f7fd fdbc 	bl	8002030 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044bc:	f7fd fdb8 	bl	8002030 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e160      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ce:	4b0d      	ldr	r3, [pc, #52]	; (8004504 <HAL_RCC_OscConfig+0x26c>)
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044da:	2001      	movs	r0, #1
 80044dc:	f000 face 	bl	8004a7c <RCC_Delay>
 80044e0:	e01c      	b.n	800451c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e2:	4b0a      	ldr	r3, [pc, #40]	; (800450c <HAL_RCC_OscConfig+0x274>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e8:	f7fd fda2 	bl	8002030 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ee:	e00f      	b.n	8004510 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f0:	f7fd fd9e 	bl	8002030 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d908      	bls.n	8004510 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e146      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
 8004502:	bf00      	nop
 8004504:	40021000 	.word	0x40021000
 8004508:	42420000 	.word	0x42420000
 800450c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004510:	4b92      	ldr	r3, [pc, #584]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e9      	bne.n	80044f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80a6 	beq.w	8004676 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800452a:	2300      	movs	r3, #0
 800452c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800452e:	4b8b      	ldr	r3, [pc, #556]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10d      	bne.n	8004556 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800453a:	4b88      	ldr	r3, [pc, #544]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	4a87      	ldr	r2, [pc, #540]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004544:	61d3      	str	r3, [r2, #28]
 8004546:	4b85      	ldr	r3, [pc, #532]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454e:	60bb      	str	r3, [r7, #8]
 8004550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004552:	2301      	movs	r3, #1
 8004554:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004556:	4b82      	ldr	r3, [pc, #520]	; (8004760 <HAL_RCC_OscConfig+0x4c8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455e:	2b00      	cmp	r3, #0
 8004560:	d118      	bne.n	8004594 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004562:	4b7f      	ldr	r3, [pc, #508]	; (8004760 <HAL_RCC_OscConfig+0x4c8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a7e      	ldr	r2, [pc, #504]	; (8004760 <HAL_RCC_OscConfig+0x4c8>)
 8004568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800456c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456e:	f7fd fd5f 	bl	8002030 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004576:	f7fd fd5b 	bl	8002030 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b64      	cmp	r3, #100	; 0x64
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e103      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004588:	4b75      	ldr	r3, [pc, #468]	; (8004760 <HAL_RCC_OscConfig+0x4c8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0f0      	beq.n	8004576 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d106      	bne.n	80045aa <HAL_RCC_OscConfig+0x312>
 800459c:	4b6f      	ldr	r3, [pc, #444]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	4a6e      	ldr	r2, [pc, #440]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6213      	str	r3, [r2, #32]
 80045a8:	e02d      	b.n	8004606 <HAL_RCC_OscConfig+0x36e>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10c      	bne.n	80045cc <HAL_RCC_OscConfig+0x334>
 80045b2:	4b6a      	ldr	r3, [pc, #424]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	4a69      	ldr	r2, [pc, #420]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045b8:	f023 0301 	bic.w	r3, r3, #1
 80045bc:	6213      	str	r3, [r2, #32]
 80045be:	4b67      	ldr	r3, [pc, #412]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	4a66      	ldr	r2, [pc, #408]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045c4:	f023 0304 	bic.w	r3, r3, #4
 80045c8:	6213      	str	r3, [r2, #32]
 80045ca:	e01c      	b.n	8004606 <HAL_RCC_OscConfig+0x36e>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	2b05      	cmp	r3, #5
 80045d2:	d10c      	bne.n	80045ee <HAL_RCC_OscConfig+0x356>
 80045d4:	4b61      	ldr	r3, [pc, #388]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	4a60      	ldr	r2, [pc, #384]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045da:	f043 0304 	orr.w	r3, r3, #4
 80045de:	6213      	str	r3, [r2, #32]
 80045e0:	4b5e      	ldr	r3, [pc, #376]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	4a5d      	ldr	r2, [pc, #372]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045e6:	f043 0301 	orr.w	r3, r3, #1
 80045ea:	6213      	str	r3, [r2, #32]
 80045ec:	e00b      	b.n	8004606 <HAL_RCC_OscConfig+0x36e>
 80045ee:	4b5b      	ldr	r3, [pc, #364]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	4a5a      	ldr	r2, [pc, #360]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045f4:	f023 0301 	bic.w	r3, r3, #1
 80045f8:	6213      	str	r3, [r2, #32]
 80045fa:	4b58      	ldr	r3, [pc, #352]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	4a57      	ldr	r2, [pc, #348]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004600:	f023 0304 	bic.w	r3, r3, #4
 8004604:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d015      	beq.n	800463a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460e:	f7fd fd0f 	bl	8002030 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004614:	e00a      	b.n	800462c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7fd fd0b 	bl	8002030 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f241 3288 	movw	r2, #5000	; 0x1388
 8004624:	4293      	cmp	r3, r2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e0b1      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462c:	4b4b      	ldr	r3, [pc, #300]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0ee      	beq.n	8004616 <HAL_RCC_OscConfig+0x37e>
 8004638:	e014      	b.n	8004664 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800463a:	f7fd fcf9 	bl	8002030 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004640:	e00a      	b.n	8004658 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004642:	f7fd fcf5 	bl	8002030 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004650:	4293      	cmp	r3, r2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e09b      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004658:	4b40      	ldr	r3, [pc, #256]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1ee      	bne.n	8004642 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004664:	7dfb      	ldrb	r3, [r7, #23]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d105      	bne.n	8004676 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800466a:	4b3c      	ldr	r3, [pc, #240]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	4a3b      	ldr	r2, [pc, #236]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004674:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 8087 	beq.w	800478e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004680:	4b36      	ldr	r3, [pc, #216]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f003 030c 	and.w	r3, r3, #12
 8004688:	2b08      	cmp	r3, #8
 800468a:	d061      	beq.n	8004750 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d146      	bne.n	8004722 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004694:	4b33      	ldr	r3, [pc, #204]	; (8004764 <HAL_RCC_OscConfig+0x4cc>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469a:	f7fd fcc9 	bl	8002030 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a2:	f7fd fcc5 	bl	8002030 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e06d      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046b4:	4b29      	ldr	r3, [pc, #164]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1f0      	bne.n	80046a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c8:	d108      	bne.n	80046dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046ca:	4b24      	ldr	r3, [pc, #144]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	4921      	ldr	r1, [pc, #132]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046dc:	4b1f      	ldr	r3, [pc, #124]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a19      	ldr	r1, [r3, #32]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	430b      	orrs	r3, r1
 80046ee:	491b      	ldr	r1, [pc, #108]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046f4:	4b1b      	ldr	r3, [pc, #108]	; (8004764 <HAL_RCC_OscConfig+0x4cc>)
 80046f6:	2201      	movs	r2, #1
 80046f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fa:	f7fd fc99 	bl	8002030 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004702:	f7fd fc95 	bl	8002030 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e03d      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004714:	4b11      	ldr	r3, [pc, #68]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f0      	beq.n	8004702 <HAL_RCC_OscConfig+0x46a>
 8004720:	e035      	b.n	800478e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004722:	4b10      	ldr	r3, [pc, #64]	; (8004764 <HAL_RCC_OscConfig+0x4cc>)
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004728:	f7fd fc82 	bl	8002030 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004730:	f7fd fc7e 	bl	8002030 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e026      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004742:	4b06      	ldr	r3, [pc, #24]	; (800475c <HAL_RCC_OscConfig+0x4c4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x498>
 800474e:	e01e      	b.n	800478e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d107      	bne.n	8004768 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e019      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
 800475c:	40021000 	.word	0x40021000
 8004760:	40007000 	.word	0x40007000
 8004764:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004768:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <HAL_RCC_OscConfig+0x500>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	429a      	cmp	r2, r3
 800477a:	d106      	bne.n	800478a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004786:	429a      	cmp	r2, r3
 8004788:	d001      	beq.n	800478e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40021000 	.word	0x40021000

0800479c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0d0      	b.n	8004952 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047b0:	4b6a      	ldr	r3, [pc, #424]	; (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d910      	bls.n	80047e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047be:	4b67      	ldr	r3, [pc, #412]	; (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f023 0207 	bic.w	r2, r3, #7
 80047c6:	4965      	ldr	r1, [pc, #404]	; (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ce:	4b63      	ldr	r3, [pc, #396]	; (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0b8      	b.n	8004952 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d020      	beq.n	800482e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047f8:	4b59      	ldr	r3, [pc, #356]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	4a58      	ldr	r2, [pc, #352]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 80047fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004802:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004810:	4b53      	ldr	r3, [pc, #332]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	4a52      	ldr	r2, [pc, #328]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004816:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800481a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800481c:	4b50      	ldr	r3, [pc, #320]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	494d      	ldr	r1, [pc, #308]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 800482a:	4313      	orrs	r3, r2
 800482c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d040      	beq.n	80048bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d107      	bne.n	8004852 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004842:	4b47      	ldr	r3, [pc, #284]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d115      	bne.n	800487a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e07f      	b.n	8004952 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d107      	bne.n	800486a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800485a:	4b41      	ldr	r3, [pc, #260]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d109      	bne.n	800487a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e073      	b.n	8004952 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486a:	4b3d      	ldr	r3, [pc, #244]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e06b      	b.n	8004952 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800487a:	4b39      	ldr	r3, [pc, #228]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f023 0203 	bic.w	r2, r3, #3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	4936      	ldr	r1, [pc, #216]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004888:	4313      	orrs	r3, r2
 800488a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800488c:	f7fd fbd0 	bl	8002030 <HAL_GetTick>
 8004890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004892:	e00a      	b.n	80048aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004894:	f7fd fbcc 	bl	8002030 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e053      	b.n	8004952 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048aa:	4b2d      	ldr	r3, [pc, #180]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f003 020c 	and.w	r2, r3, #12
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d1eb      	bne.n	8004894 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048bc:	4b27      	ldr	r3, [pc, #156]	; (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d210      	bcs.n	80048ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ca:	4b24      	ldr	r3, [pc, #144]	; (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f023 0207 	bic.w	r2, r3, #7
 80048d2:	4922      	ldr	r1, [pc, #136]	; (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048da:	4b20      	ldr	r3, [pc, #128]	; (800495c <HAL_RCC_ClockConfig+0x1c0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e032      	b.n	8004952 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f8:	4b19      	ldr	r3, [pc, #100]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4916      	ldr	r1, [pc, #88]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004906:	4313      	orrs	r3, r2
 8004908:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004916:	4b12      	ldr	r3, [pc, #72]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	490e      	ldr	r1, [pc, #56]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004926:	4313      	orrs	r3, r2
 8004928:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800492a:	f000 f821 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 800492e:	4602      	mov	r2, r0
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	490a      	ldr	r1, [pc, #40]	; (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 800493c:	5ccb      	ldrb	r3, [r1, r3]
 800493e:	fa22 f303 	lsr.w	r3, r2, r3
 8004942:	4a09      	ldr	r2, [pc, #36]	; (8004968 <HAL_RCC_ClockConfig+0x1cc>)
 8004944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004946:	4b09      	ldr	r3, [pc, #36]	; (800496c <HAL_RCC_ClockConfig+0x1d0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7fd fb2e 	bl	8001fac <HAL_InitTick>

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40022000 	.word	0x40022000
 8004960:	40021000 	.word	0x40021000
 8004964:	08005038 	.word	0x08005038
 8004968:	20000000 	.word	0x20000000
 800496c:	20000004 	.word	0x20000004

08004970 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	2300      	movs	r3, #0
 8004984:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800498a:	4b1e      	ldr	r3, [pc, #120]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x94>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b04      	cmp	r3, #4
 8004998:	d002      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0x30>
 800499a:	2b08      	cmp	r3, #8
 800499c:	d003      	beq.n	80049a6 <HAL_RCC_GetSysClockFreq+0x36>
 800499e:	e027      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049a0:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80049a2:	613b      	str	r3, [r7, #16]
      break;
 80049a4:	e027      	b.n	80049f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	0c9b      	lsrs	r3, r3, #18
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	4a17      	ldr	r2, [pc, #92]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x9c>)
 80049b0:	5cd3      	ldrb	r3, [r2, r3]
 80049b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d010      	beq.n	80049e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049be:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x94>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	0c5b      	lsrs	r3, r3, #17
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	4a11      	ldr	r2, [pc, #68]	; (8004a10 <HAL_RCC_GetSysClockFreq+0xa0>)
 80049ca:	5cd3      	ldrb	r3, [r2, r3]
 80049cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a0d      	ldr	r2, [pc, #52]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80049d2:	fb03 f202 	mul.w	r2, r3, r2
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	e004      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a0c      	ldr	r2, [pc, #48]	; (8004a14 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049e4:	fb02 f303 	mul.w	r3, r2, r3
 80049e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	613b      	str	r3, [r7, #16]
      break;
 80049ee:	e002      	b.n	80049f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80049f2:	613b      	str	r3, [r7, #16]
      break;
 80049f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049f6:	693b      	ldr	r3, [r7, #16]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	371c      	adds	r7, #28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40021000 	.word	0x40021000
 8004a08:	007a1200 	.word	0x007a1200
 8004a0c:	08005050 	.word	0x08005050
 8004a10:	08005060 	.word	0x08005060
 8004a14:	003d0900 	.word	0x003d0900

08004a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a1c:	4b02      	ldr	r3, [pc, #8]	; (8004a28 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr
 8004a28:	20000000 	.word	0x20000000

08004a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a30:	f7ff fff2 	bl	8004a18 <HAL_RCC_GetHCLKFreq>
 8004a34:	4602      	mov	r2, r0
 8004a36:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	0a1b      	lsrs	r3, r3, #8
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	4903      	ldr	r1, [pc, #12]	; (8004a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a42:	5ccb      	ldrb	r3, [r1, r3]
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	08005048 	.word	0x08005048

08004a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a58:	f7ff ffde 	bl	8004a18 <HAL_RCC_GetHCLKFreq>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	0adb      	lsrs	r3, r3, #11
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	4903      	ldr	r1, [pc, #12]	; (8004a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a6a:	5ccb      	ldrb	r3, [r1, r3]
 8004a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40021000 	.word	0x40021000
 8004a78:	08005048 	.word	0x08005048

08004a7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a84:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <RCC_Delay+0x34>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a0a      	ldr	r2, [pc, #40]	; (8004ab4 <RCC_Delay+0x38>)
 8004a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8e:	0a5b      	lsrs	r3, r3, #9
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	fb02 f303 	mul.w	r3, r2, r3
 8004a96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a98:	bf00      	nop
  }
  while (Delay --);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1e5a      	subs	r2, r3, #1
 8004a9e:	60fa      	str	r2, [r7, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1f9      	bne.n	8004a98 <RCC_Delay+0x1c>
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr
 8004ab0:	20000000 	.word	0x20000000
 8004ab4:	10624dd3 	.word	0x10624dd3

08004ab8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e042      	b.n	8004b50 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fd f99a 	bl	8001e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2224      	movs	r2, #36	; 0x24
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004afa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f9af 	bl	8004e60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695a      	ldr	r2, [r3, #20]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08a      	sub	sp, #40	; 0x28
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	4613      	mov	r3, r2
 8004b66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	d16d      	bne.n	8004c54 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <HAL_UART_Transmit+0x2c>
 8004b7e:	88fb      	ldrh	r3, [r7, #6]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e066      	b.n	8004c56 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2221      	movs	r2, #33	; 0x21
 8004b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b96:	f7fd fa4b 	bl	8002030 <HAL_GetTick>
 8004b9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	88fa      	ldrh	r2, [r7, #6]
 8004ba0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	88fa      	ldrh	r2, [r7, #6]
 8004ba6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb0:	d108      	bne.n	8004bc4 <HAL_UART_Transmit+0x6c>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d104      	bne.n	8004bc4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	61bb      	str	r3, [r7, #24]
 8004bc2:	e003      	b.n	8004bcc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bcc:	e02a      	b.n	8004c24 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2180      	movs	r1, #128	; 0x80
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f8d2 	bl	8004d82 <UART_WaitOnFlagUntilTimeout>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e036      	b.n	8004c56 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10b      	bne.n	8004c06 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	3302      	adds	r3, #2
 8004c02:	61bb      	str	r3, [r7, #24]
 8004c04:	e007      	b.n	8004c16 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	781a      	ldrb	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	3301      	adds	r3, #1
 8004c14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1cf      	bne.n	8004bce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2200      	movs	r2, #0
 8004c36:	2140      	movs	r1, #64	; 0x40
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f8a2 	bl	8004d82 <UART_WaitOnFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e006      	b.n	8004c56 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	e000      	b.n	8004c56 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004c54:	2302      	movs	r3, #2
  }
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3720      	adds	r7, #32
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b08a      	sub	sp, #40	; 0x28
 8004c62:	af02      	add	r7, sp, #8
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	603b      	str	r3, [r7, #0]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	d17c      	bne.n	8004d78 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <HAL_UART_Receive+0x2c>
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e075      	b.n	8004d7a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2222      	movs	r2, #34	; 0x22
 8004c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ca2:	f7fd f9c5 	bl	8002030 <HAL_GetTick>
 8004ca6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	88fa      	ldrh	r2, [r7, #6]
 8004cac:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	88fa      	ldrh	r2, [r7, #6]
 8004cb2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cbc:	d108      	bne.n	8004cd0 <HAL_UART_Receive+0x72>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d104      	bne.n	8004cd0 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	61bb      	str	r3, [r7, #24]
 8004cce:	e003      	b.n	8004cd8 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004cd8:	e043      	b.n	8004d62 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2120      	movs	r1, #32
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 f84c 	bl	8004d82 <UART_WaitOnFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e042      	b.n	8004d7a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10c      	bne.n	8004d14 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	3302      	adds	r3, #2
 8004d10:	61bb      	str	r3, [r7, #24]
 8004d12:	e01f      	b.n	8004d54 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1c:	d007      	beq.n	8004d2e <HAL_UART_Receive+0xd0>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10a      	bne.n	8004d3c <HAL_UART_Receive+0xde>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	e008      	b.n	8004d4e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	3301      	adds	r3, #1
 8004d52:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1b6      	bne.n	8004cda <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	e000      	b.n	8004d7a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d78:	2302      	movs	r3, #2
  }
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3720      	adds	r7, #32
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b090      	sub	sp, #64	; 0x40
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	603b      	str	r3, [r7, #0]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d92:	e050      	b.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9a:	d04c      	beq.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d007      	beq.n	8004db2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004da2:	f7fd f945 	bl	8002030 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d241      	bcs.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	330c      	adds	r3, #12
 8004db8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	e853 3f00 	ldrex	r3, [r3]
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	330c      	adds	r3, #12
 8004dd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dd2:	637a      	str	r2, [r7, #52]	; 0x34
 8004dd4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dda:	e841 2300 	strex	r3, r2, [r1]
 8004dde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1e5      	bne.n	8004db2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3314      	adds	r3, #20
 8004dec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	e853 3f00 	ldrex	r3, [r3]
 8004df4:	613b      	str	r3, [r7, #16]
   return(result);
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f023 0301 	bic.w	r3, r3, #1
 8004dfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3314      	adds	r3, #20
 8004e04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e06:	623a      	str	r2, [r7, #32]
 8004e08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	69f9      	ldr	r1, [r7, #28]
 8004e0c:	6a3a      	ldr	r2, [r7, #32]
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e5      	bne.n	8004de6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e00f      	b.n	8004e56 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	bf0c      	ite	eq
 8004e46:	2301      	moveq	r3, #1
 8004e48:	2300      	movne	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d09f      	beq.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3740      	adds	r7, #64	; 0x40
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e9a:	f023 030c 	bic.w	r3, r3, #12
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6812      	ldr	r2, [r2, #0]
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a2c      	ldr	r2, [pc, #176]	; (8004f74 <UART_SetConfig+0x114>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d103      	bne.n	8004ed0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ec8:	f7ff fdc4 	bl	8004a54 <HAL_RCC_GetPCLK2Freq>
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	e002      	b.n	8004ed6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ed0:	f7ff fdac 	bl	8004a2c <HAL_RCC_GetPCLK1Freq>
 8004ed4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	009a      	lsls	r2, r3, #2
 8004ee0:	441a      	add	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eec:	4a22      	ldr	r2, [pc, #136]	; (8004f78 <UART_SetConfig+0x118>)
 8004eee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	0119      	lsls	r1, r3, #4
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	009a      	lsls	r2, r3, #2
 8004f00:	441a      	add	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f0c:	4b1a      	ldr	r3, [pc, #104]	; (8004f78 <UART_SetConfig+0x118>)
 8004f0e:	fba3 0302 	umull	r0, r3, r3, r2
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	2064      	movs	r0, #100	; 0x64
 8004f16:	fb00 f303 	mul.w	r3, r0, r3
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	3332      	adds	r3, #50	; 0x32
 8004f20:	4a15      	ldr	r2, [pc, #84]	; (8004f78 <UART_SetConfig+0x118>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f2c:	4419      	add	r1, r3
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	009a      	lsls	r2, r3, #2
 8004f38:	441a      	add	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f44:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <UART_SetConfig+0x118>)
 8004f46:	fba3 0302 	umull	r0, r3, r3, r2
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	2064      	movs	r0, #100	; 0x64
 8004f4e:	fb00 f303 	mul.w	r3, r0, r3
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	3332      	adds	r3, #50	; 0x32
 8004f58:	4a07      	ldr	r2, [pc, #28]	; (8004f78 <UART_SetConfig+0x118>)
 8004f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	f003 020f 	and.w	r2, r3, #15
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	440a      	add	r2, r1
 8004f6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f6c:	bf00      	nop
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40013800 	.word	0x40013800
 8004f78:	51eb851f 	.word	0x51eb851f

08004f7c <__libc_init_array>:
 8004f7c:	b570      	push	{r4, r5, r6, lr}
 8004f7e:	2600      	movs	r6, #0
 8004f80:	4d0c      	ldr	r5, [pc, #48]	; (8004fb4 <__libc_init_array+0x38>)
 8004f82:	4c0d      	ldr	r4, [pc, #52]	; (8004fb8 <__libc_init_array+0x3c>)
 8004f84:	1b64      	subs	r4, r4, r5
 8004f86:	10a4      	asrs	r4, r4, #2
 8004f88:	42a6      	cmp	r6, r4
 8004f8a:	d109      	bne.n	8004fa0 <__libc_init_array+0x24>
 8004f8c:	f000 f822 	bl	8004fd4 <_init>
 8004f90:	2600      	movs	r6, #0
 8004f92:	4d0a      	ldr	r5, [pc, #40]	; (8004fbc <__libc_init_array+0x40>)
 8004f94:	4c0a      	ldr	r4, [pc, #40]	; (8004fc0 <__libc_init_array+0x44>)
 8004f96:	1b64      	subs	r4, r4, r5
 8004f98:	10a4      	asrs	r4, r4, #2
 8004f9a:	42a6      	cmp	r6, r4
 8004f9c:	d105      	bne.n	8004faa <__libc_init_array+0x2e>
 8004f9e:	bd70      	pop	{r4, r5, r6, pc}
 8004fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa4:	4798      	blx	r3
 8004fa6:	3601      	adds	r6, #1
 8004fa8:	e7ee      	b.n	8004f88 <__libc_init_array+0xc>
 8004faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fae:	4798      	blx	r3
 8004fb0:	3601      	adds	r6, #1
 8004fb2:	e7f2      	b.n	8004f9a <__libc_init_array+0x1e>
 8004fb4:	08005064 	.word	0x08005064
 8004fb8:	08005064 	.word	0x08005064
 8004fbc:	08005064 	.word	0x08005064
 8004fc0:	08005068 	.word	0x08005068

08004fc4 <memset>:
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	4402      	add	r2, r0
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d100      	bne.n	8004fce <memset+0xa>
 8004fcc:	4770      	bx	lr
 8004fce:	f803 1b01 	strb.w	r1, [r3], #1
 8004fd2:	e7f9      	b.n	8004fc8 <memset+0x4>

08004fd4 <_init>:
 8004fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd6:	bf00      	nop
 8004fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fda:	bc08      	pop	{r3}
 8004fdc:	469e      	mov	lr, r3
 8004fde:	4770      	bx	lr

08004fe0 <_fini>:
 8004fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe2:	bf00      	nop
 8004fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe6:	bc08      	pop	{r3}
 8004fe8:	469e      	mov	lr, r3
 8004fea:	4770      	bx	lr
